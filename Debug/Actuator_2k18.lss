
Actuator_2k18.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000015b4  00001648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000187  00800100  00800100  00001648  2**0
                  ALLOC
  3 .stab         00002274  00000000  00000000  00001648  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014bf  00000000  00000000  000038bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004d7b  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004d8c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      54:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_21>
      58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      80:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <__vector_32>
      84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      88:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_34>
      8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
      a0:	22 e0       	ldi	r18, 0x02	; 2
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	a7 38       	cpi	r26, 0x87	; 135
      ac:	b2 07       	cpc	r27, r18
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
      b0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <main>
      b4:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <_exit>

000000b8 <__bad_interrupt>:
      b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <ax_convert_angle_to_10>:

#include <stdio.h>
#include "ax.h"
#include "dynamixel.h"

static uint16_t ax_convert_angle_to_10(float angle)   		   	{ return (uint16_t)(1023 * angle) / 300;     } // converts angle(0-300) to register range (0-1023)
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
      c0:	00 d0       	rcall	.+0      	; 0xc2 <ax_convert_angle_to_10+0x6>
      c2:	00 d0       	rcall	.+0      	; 0xc4 <ax_convert_angle_to_10+0x8>
      c4:	cd b7       	in	r28, 0x3d	; 61
      c6:	de b7       	in	r29, 0x3e	; 62
      c8:	69 83       	std	Y+1, r22	; 0x01
      ca:	7a 83       	std	Y+2, r23	; 0x02
      cc:	8b 83       	std	Y+3, r24	; 0x03
      ce:	9c 83       	std	Y+4, r25	; 0x04
      d0:	20 e0       	ldi	r18, 0x00	; 0
      d2:	30 ec       	ldi	r19, 0xC0	; 192
      d4:	4f e7       	ldi	r20, 0x7F	; 127
      d6:	54 e4       	ldi	r21, 0x44	; 68
      d8:	69 81       	ldd	r22, Y+1	; 0x01
      da:	7a 81       	ldd	r23, Y+2	; 0x02
      dc:	8b 81       	ldd	r24, Y+3	; 0x03
      de:	9c 81       	ldd	r25, Y+4	; 0x04
      e0:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__mulsf3>
      e4:	dc 01       	movw	r26, r24
      e6:	cb 01       	movw	r24, r22
      e8:	bc 01       	movw	r22, r24
      ea:	cd 01       	movw	r24, r26
      ec:	0e 94 85 09 	call	0x130a	; 0x130a <__fixunssfsi>
      f0:	dc 01       	movw	r26, r24
      f2:	cb 01       	movw	r24, r22
      f4:	96 95       	lsr	r25
      f6:	87 95       	ror	r24
      f8:	96 95       	lsr	r25
      fa:	87 95       	ror	r24
      fc:	9c 01       	movw	r18, r24
      fe:	ab e3       	ldi	r26, 0x3B	; 59
     100:	bd e6       	ldi	r27, 0x6D	; 109
     102:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__umulhisi3>
     106:	96 95       	lsr	r25
     108:	87 95       	ror	r24
     10a:	92 95       	swap	r25
     10c:	82 95       	swap	r24
     10e:	8f 70       	andi	r24, 0x0F	; 15
     110:	89 27       	eor	r24, r25
     112:	9f 70       	andi	r25, 0x0F	; 15
     114:	89 27       	eor	r24, r25
     116:	0f 90       	pop	r0
     118:	0f 90       	pop	r0
     11a:	0f 90       	pop	r0
     11c:	0f 90       	pop	r0
     11e:	df 91       	pop	r29
     120:	cf 91       	pop	r28
     122:	08 95       	ret

00000124 <ax_convert_10_to_angle>:
static float	ax_convert_10_to_angle(uint16_t angle_bit) 		{ return (float)(angle_bit * 300) / 1023;    } // converts register range (0-1023) to angle(0-300)
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	00 d0       	rcall	.+0      	; 0x12a <ax_convert_10_to_angle+0x6>
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
     12e:	9a 83       	std	Y+2, r25	; 0x02
     130:	89 83       	std	Y+1, r24	; 0x01
     132:	49 81       	ldd	r20, Y+1	; 0x01
     134:	5a 81       	ldd	r21, Y+2	; 0x02
     136:	2c e2       	ldi	r18, 0x2C	; 44
     138:	31 e0       	ldi	r19, 0x01	; 1
     13a:	42 9f       	mul	r20, r18
     13c:	c0 01       	movw	r24, r0
     13e:	43 9f       	mul	r20, r19
     140:	90 0d       	add	r25, r0
     142:	52 9f       	mul	r21, r18
     144:	90 0d       	add	r25, r0
     146:	11 24       	eor	r1, r1
     148:	cc 01       	movw	r24, r24
     14a:	a0 e0       	ldi	r26, 0x00	; 0
     14c:	b0 e0       	ldi	r27, 0x00	; 0
     14e:	bc 01       	movw	r22, r24
     150:	cd 01       	movw	r24, r26
     152:	0e 94 b4 09 	call	0x1368	; 0x1368 <__floatunsisf>
     156:	dc 01       	movw	r26, r24
     158:	cb 01       	movw	r24, r22
     15a:	20 e0       	ldi	r18, 0x00	; 0
     15c:	30 ec       	ldi	r19, 0xC0	; 192
     15e:	4f e7       	ldi	r20, 0x7F	; 127
     160:	54 e4       	ldi	r21, 0x44	; 68
     162:	bc 01       	movw	r22, r24
     164:	cd 01       	movw	r24, r26
     166:	0e 94 13 09 	call	0x1226	; 0x1226 <__divsf3>
     16a:	dc 01       	movw	r26, r24
     16c:	cb 01       	movw	r24, r22
     16e:	bc 01       	movw	r22, r24
     170:	cd 01       	movw	r24, r26
     172:	0f 90       	pop	r0
     174:	0f 90       	pop	r0
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	08 95       	ret

0000017c <ax_convert_speed_to_10>:
static uint16_t ax_convert_speed_to_10(uint8_t speed)	   		{ return (uint16_t)(1023 * speed) / 100;	 } // converts speed (0-100) to register range (0-1023)
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	1f 92       	push	r1
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	89 83       	std	Y+1, r24	; 0x01
     188:	89 81       	ldd	r24, Y+1	; 0x01
     18a:	28 2f       	mov	r18, r24
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	8f ef       	ldi	r24, 0xFF	; 255
     190:	93 e0       	ldi	r25, 0x03	; 3
     192:	28 9f       	mul	r18, r24
     194:	a0 01       	movw	r20, r0
     196:	29 9f       	mul	r18, r25
     198:	50 0d       	add	r21, r0
     19a:	38 9f       	mul	r19, r24
     19c:	50 0d       	add	r21, r0
     19e:	11 24       	eor	r1, r1
     1a0:	ca 01       	movw	r24, r20
     1a2:	96 95       	lsr	r25
     1a4:	87 95       	ror	r24
     1a6:	96 95       	lsr	r25
     1a8:	87 95       	ror	r24
     1aa:	9c 01       	movw	r18, r24
     1ac:	ab e7       	ldi	r26, 0x7B	; 123
     1ae:	b4 e1       	ldi	r27, 0x14	; 20
     1b0:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__umulhisi3>
     1b4:	96 95       	lsr	r25
     1b6:	87 95       	ror	r24
     1b8:	0f 90       	pop	r0
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	08 95       	ret

000001c0 <ax_convert_10_to_speed>:
static uint8_t  ax_convert_10_to_speed(uint16_t speed_bit) 		{ return (uint8_t)(speed_bit * 100) / 1023;  } // converts register range (0-1023) to speed (0-100)
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	00 d0       	rcall	.+0      	; 0x1c6 <ax_convert_10_to_speed+0x6>
     1c6:	00 d0       	rcall	.+0      	; 0x1c8 <ax_convert_10_to_speed+0x8>
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	9a 83       	std	Y+2, r25	; 0x02
     1ce:	89 83       	std	Y+1, r24	; 0x01
     1d0:	99 81       	ldd	r25, Y+1	; 0x01
     1d2:	84 e6       	ldi	r24, 0x64	; 100
     1d4:	98 9f       	mul	r25, r24
     1d6:	80 2d       	mov	r24, r0
     1d8:	11 24       	eor	r1, r1
     1da:	88 2f       	mov	r24, r24
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	2f ef       	ldi	r18, 0xFF	; 255
     1e0:	33 e0       	ldi	r19, 0x03	; 3
     1e2:	b9 01       	movw	r22, r18
     1e4:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__divmodhi4>
     1e8:	cb 01       	movw	r24, r22
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <ax_set_angle>:
 * 	Paramters:   uint8_t id    -> the id of the servo
 * 				 float angle   -> the angle (0-300) in decimal
 * 				 uint8_t speed -> the speed of the servo (0-100)
 * 	Description: it sets the angle and the speed of the given id servo
 */
uint8_t ax_set_angle(uint8_t id, float angle, uint8_t speed) {
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	2a 97       	sbiw	r28, 0x0a	; 10
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	8d 83       	std	Y+5, r24	; 0x05
     20e:	4e 83       	std	Y+6, r20	; 0x06
     210:	5f 83       	std	Y+7, r21	; 0x07
     212:	68 87       	std	Y+8, r22	; 0x08
     214:	79 87       	std	Y+9, r23	; 0x09
     216:	2a 87       	std	Y+10, r18	; 0x0a

	uint16_t ax_angle = ax_convert_angle_to_10(angle);	// converts the angle
     218:	8e 81       	ldd	r24, Y+6	; 0x06
     21a:	9f 81       	ldd	r25, Y+7	; 0x07
     21c:	a8 85       	ldd	r26, Y+8	; 0x08
     21e:	b9 85       	ldd	r27, Y+9	; 0x09
     220:	bc 01       	movw	r22, r24
     222:	cd 01       	movw	r24, r26
     224:	0e 94 5e 00 	call	0xbc	; 0xbc <ax_convert_angle_to_10>
     228:	9a 83       	std	Y+2, r25	; 0x02
     22a:	89 83       	std	Y+1, r24	; 0x01
	uint16_t ax_speed = ax_convert_speed_to_10(speed);  // converts the speed
     22c:	8a 85       	ldd	r24, Y+10	; 0x0a
     22e:	0e 94 be 00 	call	0x17c	; 0x17c <ax_convert_speed_to_10>
     232:	9c 83       	std	Y+4, r25	; 0x04
     234:	8b 83       	std	Y+3, r24	; 0x03

	// writes to dynamixel and returns a 1 if everything is okay
	if(dynamixel_writeword(id, AX_GOAL_SPEED_L, ax_speed) == DYNAMIXEL_SUCCESS && dynamixel_writeword(id, AX_GOAL_POSITION_L, ax_angle) == DYNAMIXEL_SUCCESS)
     236:	8b 81       	ldd	r24, Y+3	; 0x03
     238:	9c 81       	ldd	r25, Y+4	; 0x04
     23a:	ac 01       	movw	r20, r24
     23c:	60 e2       	ldi	r22, 0x20	; 32
     23e:	8d 81       	ldd	r24, Y+5	; 0x05
     240:	0e 94 a3 05 	call	0xb46	; 0xb46 <dynamixel_writeword>
     244:	81 30       	cpi	r24, 0x01	; 1
     246:	59 f4       	brne	.+22     	; 0x25e <ax_set_angle+0x66>
     248:	89 81       	ldd	r24, Y+1	; 0x01
     24a:	9a 81       	ldd	r25, Y+2	; 0x02
     24c:	ac 01       	movw	r20, r24
     24e:	6e e1       	ldi	r22, 0x1E	; 30
     250:	8d 81       	ldd	r24, Y+5	; 0x05
     252:	0e 94 a3 05 	call	0xb46	; 0xb46 <dynamixel_writeword>
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	11 f4       	brne	.+4      	; 0x25e <ax_set_angle+0x66>
		return 1; // everything okay
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	01 c0       	rjmp	.+2      	; 0x260 <ax_set_angle+0x68>
	else
		return 0; // some error
     25e:	80 e0       	ldi	r24, 0x00	; 0
}
     260:	2a 96       	adiw	r28, 0x0a	; 10
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	f8 94       	cli
     266:	de bf       	out	0x3e, r29	; 62
     268:	0f be       	out	0x3f, r0	; 63
     26a:	cd bf       	out	0x3d, r28	; 61
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <ax_get_speed>:
/*
 * 	Function:    uint8_t ax_get_speed(uint8_t id)
 * 	Parameters:  uint8_t id -> the id of the servo
 * 	Description: returns the present speed that the servo is moving
 */
uint8_t ax_get_speed(uint8_t id) {
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	00 d0       	rcall	.+0      	; 0x278 <ax_get_speed+0x6>
     278:	1f 92       	push	r1
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	8b 83       	std	Y+3, r24	; 0x03

	uint16_t present_speed;	// holder for the value

	if(dynamixel_readword(id, AX_PRESENT_SPEED_L, &present_speed) == DYNAMIXEL_SUCCESS)
     280:	ce 01       	movw	r24, r28
     282:	01 96       	adiw	r24, 0x01	; 1
     284:	ac 01       	movw	r20, r24
     286:	66 e2       	ldi	r22, 0x26	; 38
     288:	8b 81       	ldd	r24, Y+3	; 0x03
     28a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <dynamixel_readword>
     28e:	81 30       	cpi	r24, 0x01	; 1
     290:	29 f4       	brne	.+10     	; 0x29c <ax_get_speed+0x2a>
		return ax_convert_10_to_speed(present_speed); // converts the range to 0-100 from the register IF everything is okay
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	9a 81       	ldd	r25, Y+2	; 0x02
     296:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <ax_convert_10_to_speed>
     29a:	01 c0       	rjmp	.+2      	; 0x29e <ax_get_speed+0x2c>
	else
		return 2; // some error
     29c:	82 e0       	ldi	r24, 0x02	; 2
}
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <ax_get_angle>:
/*
 * 	Function:    float ax_get_angle(uint8_t id)
 * 	Parameters:  uint8_t id -> the id of the servo
 * 	Description: returns the current angle of the servo
 */
float ax_get_angle(uint8_t id) {
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	00 d0       	rcall	.+0      	; 0x2b0 <ax_get_angle+0x6>
     2b0:	1f 92       	push	r1
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	8b 83       	std	Y+3, r24	; 0x03

	uint16_t present_angle; // holder for the value

	if(dynamixel_readword(id, AX_PRESENT_POSITION_L, &present_angle) == DYNAMIXEL_SUCCESS)
     2b8:	ce 01       	movw	r24, r28
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	ac 01       	movw	r20, r24
     2be:	64 e2       	ldi	r22, 0x24	; 36
     2c0:	8b 81       	ldd	r24, Y+3	; 0x03
     2c2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <dynamixel_readword>
     2c6:	81 30       	cpi	r24, 0x01	; 1
     2c8:	39 f4       	brne	.+14     	; 0x2d8 <ax_get_angle+0x2e>
		return ax_convert_10_to_angle(present_angle); // converts the range to 0-300 from the register IF everything is okay
     2ca:	89 81       	ldd	r24, Y+1	; 0x01
     2cc:	9a 81       	ldd	r25, Y+2	; 0x02
     2ce:	0e 94 92 00 	call	0x124	; 0x124 <ax_convert_10_to_angle>
     2d2:	dc 01       	movw	r26, r24
     2d4:	cb 01       	movw	r24, r22
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <ax_get_angle+0x36>
	else
		return 2; // some error
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	a0 e0       	ldi	r26, 0x00	; 0
     2de:	b0 e4       	ldi	r27, 0x40	; 64
}
     2e0:	bc 01       	movw	r22, r24
     2e2:	cd 01       	movw	r24, r26
     2e4:	0f 90       	pop	r0
     2e6:	0f 90       	pop	r0
     2e8:	0f 90       	pop	r0
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <ax_check_moving>:
/*
 * 	Function:    uint8_t ax_check_moving(uint8_t id)
 * 	Parameters:  uint8_t id -> the id of the servo
 * 	Description: returns the status of the moving of the servo (0 or 1)
 */
uint8_t ax_check_moving(uint8_t id) {
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	00 d0       	rcall	.+0      	; 0x2f6 <ax_check_moving+0x6>
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t moving_status; // holder for the value

	if(dynamixel_readbyte(id, AX_MOVING, &moving_status) == DYNAMIXEL_SUCCESS)
     2fc:	ce 01       	movw	r24, r28
     2fe:	01 96       	adiw	r24, 0x01	; 1
     300:	ac 01       	movw	r20, r24
     302:	6e e2       	ldi	r22, 0x2E	; 46
     304:	8a 81       	ldd	r24, Y+2	; 0x02
     306:	0e 94 b8 04 	call	0x970	; 0x970 <dynamixel_readbyte>
     30a:	81 30       	cpi	r24, 0x01	; 1
     30c:	11 f4       	brne	.+4      	; 0x312 <ax_check_moving+0x22>
		return moving_status; // returns the value of the moving register IF everything is okay
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	01 c0       	rjmp	.+2      	; 0x314 <ax_check_moving+0x24>
	else
		return 2; // some error
     312:	82 e0       	ldi	r24, 0x02	; 2
}
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <ax_check_temperature>:
/*
 * 	Function:    uint8_t ax_check_temperature(uint8_t id)
 * 	Parameters:  uint8_t id -> the id of the servo
 * 	Description: returns the temperature of the servo in celsius
 */
uint8_t ax_check_temperature(uint8_t id) {
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	00 d0       	rcall	.+0      	; 0x324 <ax_check_temperature+0x6>
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t temperature_status; // holder for the value

	if(dynamixel_readbyte(id, AX_PRESENT_VOLTAGE, &temperature_status) == DYNAMIXEL_SUCCESS)
     32a:	ce 01       	movw	r24, r28
     32c:	01 96       	adiw	r24, 0x01	; 1
     32e:	ac 01       	movw	r20, r24
     330:	6a e2       	ldi	r22, 0x2A	; 42
     332:	8a 81       	ldd	r24, Y+2	; 0x02
     334:	0e 94 b8 04 	call	0x970	; 0x970 <dynamixel_readbyte>
     338:	81 30       	cpi	r24, 0x01	; 1
     33a:	11 f4       	brne	.+4      	; 0x340 <ax_check_temperature+0x22>
		return temperature_status; // returns the temperature of the servo IF everything is okay
     33c:	89 81       	ldd	r24, Y+1	; 0x01
     33e:	01 c0       	rjmp	.+2      	; 0x342 <ax_check_temperature+0x24>
	else
		return 0; // some error
     340:	80 e0       	ldi	r24, 0x00	; 0
}
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <ax_check_voltage>:
/*
 * 	Function:    uint8_t ax_check_voltage(uint8_t id)
 * 	Parameters:  uint8_t id -> the id of the servo
 * 	Description: returns the voltage on the servo
 */
uint8_t ax_check_voltage(uint8_t id) {
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	00 d0       	rcall	.+0      	; 0x352 <ax_check_voltage+0x6>
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t voltage_status; // holder for the value

	if(dynamixel_readbyte(id, AX_PRESENT_VOLTAGE, &voltage_status) == DYNAMIXEL_SUCCESS)
     358:	ce 01       	movw	r24, r28
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	ac 01       	movw	r20, r24
     35e:	6a e2       	ldi	r22, 0x2A	; 42
     360:	8a 81       	ldd	r24, Y+2	; 0x02
     362:	0e 94 b8 04 	call	0x970	; 0x970 <dynamixel_readbyte>
     366:	81 30       	cpi	r24, 0x01	; 1
     368:	49 f4       	brne	.+18     	; 0x37c <ax_check_voltage+0x30>
		return voltage_status / 10; // it returns the 10* voltage of the servo IF everything is okay
     36a:	99 81       	ldd	r25, Y+1	; 0x01
     36c:	8d ec       	ldi	r24, 0xCD	; 205
     36e:	98 9f       	mul	r25, r24
     370:	81 2d       	mov	r24, r1
     372:	11 24       	eor	r1, r1
     374:	86 95       	lsr	r24
     376:	86 95       	lsr	r24
     378:	86 95       	lsr	r24
     37a:	01 c0       	rjmp	.+2      	; 0x37e <ax_check_voltage+0x32>
	else
		return 0; // some error
     37c:	80 e0       	ldi	r24, 0x00	; 0
}
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	08 95       	ret

00000388 <__vector_21>:
volatile uint8_t dynamixel_txpacket[DYNAMIXEL_PACKET_SIZE];
volatile uint8_t dynamixel_rxpacket[DYNAMIXEL_PACKET_SIZE];
volatile uint8_t dynamixel_rxindex = 0;

ISR(USART0_RX_vect)
{
     388:	1f 92       	push	r1
     38a:	0f 92       	push	r0
     38c:	00 90 5f 00 	lds	r0, 0x005F
     390:	0f 92       	push	r0
     392:	11 24       	eor	r1, r1
     394:	00 90 5b 00 	lds	r0, 0x005B
     398:	0f 92       	push	r0
     39a:	2f 93       	push	r18
     39c:	3f 93       	push	r19
     39e:	8f 93       	push	r24
     3a0:	9f 93       	push	r25
     3a2:	ef 93       	push	r30
     3a4:	ff 93       	push	r31
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
	dynamixel_rxpacket[dynamixel_rxindex++] = UDR0;
     3ae:	80 91 00 01 	lds	r24, 0x0100
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	98 0f       	add	r25, r24
     3b6:	90 93 00 01 	sts	0x0100, r25
     3ba:	88 2f       	mov	r24, r24
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	26 ec       	ldi	r18, 0xC6	; 198
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	f9 01       	movw	r30, r18
     3c4:	20 81       	ld	r18, Z
     3c6:	89 5f       	subi	r24, 0xF9	; 249
     3c8:	9d 4f       	sbci	r25, 0xFD	; 253
     3ca:	fc 01       	movw	r30, r24
     3cc:	20 83       	st	Z, r18
}
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	ff 91       	pop	r31
     3d4:	ef 91       	pop	r30
     3d6:	9f 91       	pop	r25
     3d8:	8f 91       	pop	r24
     3da:	3f 91       	pop	r19
     3dc:	2f 91       	pop	r18
     3de:	0f 90       	pop	r0
     3e0:	00 92 5b 00 	sts	0x005B, r0
     3e4:	0f 90       	pop	r0
     3e6:	00 92 5f 00 	sts	0x005F, r0
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <dynamixel_init>:

void dynamixel_init(double baud)
{
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <dynamixel_init+0x6>
     3f6:	00 d0       	rcall	.+0      	; 0x3f8 <dynamixel_init+0x8>
     3f8:	cd b7       	in	r28, 0x3d	; 61
     3fa:	de b7       	in	r29, 0x3e	; 62
     3fc:	69 83       	std	Y+1, r22	; 0x01
     3fe:	7a 83       	std	Y+2, r23	; 0x02
     400:	8b 83       	std	Y+3, r24	; 0x03
     402:	9c 83       	std	Y+4, r25	; 0x04
	// Set UART baudrate
	UBRR0H = ((F_CPU / 8 + DYNAMIXEL_BAUDRATE / 2) / DYNAMIXEL_BAUDRATE - 1) >> 8;
     404:	85 ec       	ldi	r24, 0xC5	; 197
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	fc 01       	movw	r30, r24
     40a:	10 82       	st	Z, r1
	UBRR0L = ((F_CPU / 8 + DYNAMIXEL_BAUDRATE / 2) / DYNAMIXEL_BAUDRATE - 1);
     40c:	84 ec       	ldi	r24, 0xC4	; 196
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	25 e0       	ldi	r18, 0x05	; 5
     412:	fc 01       	movw	r30, r24
     414:	20 83       	st	Z, r18

	// Enable UART TX, RX, and RX interrupt
	UCSR0B |= (1 << TXEN0);
     416:	81 ec       	ldi	r24, 0xC1	; 193
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	21 ec       	ldi	r18, 0xC1	; 193
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	f9 01       	movw	r30, r18
     420:	20 81       	ld	r18, Z
     422:	28 60       	ori	r18, 0x08	; 8
     424:	fc 01       	movw	r30, r24
     426:	20 83       	st	Z, r18
	UCSR0B |= (1 << RXEN0);
     428:	81 ec       	ldi	r24, 0xC1	; 193
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	21 ec       	ldi	r18, 0xC1	; 193
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	f9 01       	movw	r30, r18
     432:	20 81       	ld	r18, Z
     434:	20 61       	ori	r18, 0x10	; 16
     436:	fc 01       	movw	r30, r24
     438:	20 83       	st	Z, r18
	UCSR0B |= (1 << RXCIE0);
     43a:	81 ec       	ldi	r24, 0xC1	; 193
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	21 ec       	ldi	r18, 0xC1	; 193
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	f9 01       	movw	r30, r18
     444:	20 81       	ld	r18, Z
     446:	20 68       	ori	r18, 0x80	; 128
     448:	fc 01       	movw	r30, r24
     44a:	20 83       	st	Z, r18

	// Set UART direction pins as outputs
	DDRD |= (1 << PD2);
     44c:	8a e2       	ldi	r24, 0x2A	; 42
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	2a e2       	ldi	r18, 0x2A	; 42
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	f9 01       	movw	r30, r18
     456:	20 81       	ld	r18, Z
     458:	24 60       	ori	r18, 0x04	; 4
     45a:	fc 01       	movw	r30, r24
     45c:	20 83       	st	Z, r18
	DDRD |= (1 << PD3);
     45e:	8a e2       	ldi	r24, 0x2A	; 42
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	2a e2       	ldi	r18, 0x2A	; 42
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	f9 01       	movw	r30, r18
     468:	20 81       	ld	r18, Z
     46a:	28 60       	ori	r18, 0x08	; 8
     46c:	fc 01       	movw	r30, r24
     46e:	20 83       	st	Z, r18

	// Reset rx index
	dynamixel_rxindex = 0;
     470:	10 92 00 01 	sts	0x0100, r1
}
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <dynamixel_settx>:

void dynamixel_settx(void)
{
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
	// Set UART direction pins
	PORTD |= (1 << PD2);
     48a:	8b e2       	ldi	r24, 0x2B	; 43
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	2b e2       	ldi	r18, 0x2B	; 43
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	f9 01       	movw	r30, r18
     494:	20 81       	ld	r18, Z
     496:	24 60       	ori	r18, 0x04	; 4
     498:	fc 01       	movw	r30, r24
     49a:	20 83       	st	Z, r18
	PORTD &= ~(1 << PD3);
     49c:	8b e2       	ldi	r24, 0x2B	; 43
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	2b e2       	ldi	r18, 0x2B	; 43
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	f9 01       	movw	r30, r18
     4a6:	20 81       	ld	r18, Z
     4a8:	27 7f       	andi	r18, 0xF7	; 247
     4aa:	fc 01       	movw	r30, r24
     4ac:	20 83       	st	Z, r18

	//UCSR0B |= (1 << TXEN0);
	//UCSR0B &= ~(1 << RXEN0);
	//UCSR0B &= ~(1 << RXCIE0);
}
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	08 95       	ret

000004b4 <dynamixel_setrx>:

void dynamixel_setrx(void)
{
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
     4bc:	a0 97       	sbiw	r28, 0x20	; 32
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	f8 94       	cli
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	cd bf       	out	0x3d, r28	; 61
	// Wait for TX complete flag before turning the bus around
	while(bit_is_clear(UCSR0A, TXC0));
     4c8:	00 00       	nop
     4ca:	80 ec       	ldi	r24, 0xC0	; 192
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	fc 01       	movw	r30, r24
     4d0:	80 81       	ld	r24, Z
     4d2:	88 2f       	mov	r24, r24
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	80 74       	andi	r24, 0x40	; 64
     4d8:	99 27       	eor	r25, r25
     4da:	89 2b       	or	r24, r25
     4dc:	b1 f3       	breq	.-20     	; 0x4ca <dynamixel_setrx+0x16>
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	a0 e8       	ldi	r26, 0x80	; 128
     4e4:	bf e3       	ldi	r27, 0x3F	; 63
     4e6:	89 83       	std	Y+1, r24	; 0x01
     4e8:	9a 83       	std	Y+2, r25	; 0x02
     4ea:	ab 83       	std	Y+3, r26	; 0x03
     4ec:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     4ee:	2a ef       	ldi	r18, 0xFA	; 250
     4f0:	3d ee       	ldi	r19, 0xED	; 237
     4f2:	4b e6       	ldi	r20, 0x6B	; 107
     4f4:	50 e4       	ldi	r21, 0x40	; 64
     4f6:	69 81       	ldd	r22, Y+1	; 0x01
     4f8:	7a 81       	ldd	r23, Y+2	; 0x02
     4fa:	8b 81       	ldd	r24, Y+3	; 0x03
     4fc:	9c 81       	ldd	r25, Y+4	; 0x04
     4fe:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__mulsf3>
     502:	dc 01       	movw	r26, r24
     504:	cb 01       	movw	r24, r22
     506:	8d 83       	std	Y+5, r24	; 0x05
     508:	9e 83       	std	Y+6, r25	; 0x06
     50a:	af 83       	std	Y+7, r26	; 0x07
     50c:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     50e:	2c e7       	ldi	r18, 0x7C	; 124
     510:	32 ef       	ldi	r19, 0xF2	; 242
     512:	40 e3       	ldi	r20, 0x30	; 48
     514:	50 e4       	ldi	r21, 0x40	; 64
     516:	69 81       	ldd	r22, Y+1	; 0x01
     518:	7a 81       	ldd	r23, Y+2	; 0x02
     51a:	8b 81       	ldd	r24, Y+3	; 0x03
     51c:	9c 81       	ldd	r25, Y+4	; 0x04
     51e:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__mulsf3>
     522:	dc 01       	movw	r26, r24
     524:	cb 01       	movw	r24, r22
     526:	89 87       	std	Y+9, r24	; 0x09
     528:	9a 87       	std	Y+10, r25	; 0x0a
     52a:	ab 87       	std	Y+11, r26	; 0x0b
     52c:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 e8       	ldi	r20, 0x80	; 128
     534:	5f e3       	ldi	r21, 0x3F	; 63
     536:	6d 81       	ldd	r22, Y+5	; 0x05
     538:	7e 81       	ldd	r23, Y+6	; 0x06
     53a:	8f 81       	ldd	r24, Y+7	; 0x07
     53c:	98 85       	ldd	r25, Y+8	; 0x08
     53e:	0e 94 0e 09 	call	0x121c	; 0x121c <__cmpsf2>
     542:	88 23       	and	r24, r24
     544:	1c f4       	brge	.+6      	; 0x54c <dynamixel_setrx+0x98>
		__ticks = 1;
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	8d 87       	std	Y+13, r24	; 0x0d
     54a:	b2 c0       	rjmp	.+356    	; 0x6b0 <dynamixel_setrx+0x1fc>
	else if (__tmp2 > 65535)
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	3f ef       	ldi	r19, 0xFF	; 255
     550:	4f e7       	ldi	r20, 0x7F	; 127
     552:	57 e4       	ldi	r21, 0x47	; 71
     554:	69 85       	ldd	r22, Y+9	; 0x09
     556:	7a 85       	ldd	r23, Y+10	; 0x0a
     558:	8b 85       	ldd	r24, Y+11	; 0x0b
     55a:	9c 85       	ldd	r25, Y+12	; 0x0c
     55c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__gesf2>
     560:	18 16       	cp	r1, r24
     562:	0c f0       	brlt	.+2      	; 0x566 <dynamixel_setrx+0xb2>
     564:	7b c0       	rjmp	.+246    	; 0x65c <dynamixel_setrx+0x1a8>
	{
		_delay_ms(__us / 1000.0);
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	4a e7       	ldi	r20, 0x7A	; 122
     56c:	54 e4       	ldi	r21, 0x44	; 68
     56e:	69 81       	ldd	r22, Y+1	; 0x01
     570:	7a 81       	ldd	r23, Y+2	; 0x02
     572:	8b 81       	ldd	r24, Y+3	; 0x03
     574:	9c 81       	ldd	r25, Y+4	; 0x04
     576:	0e 94 13 09 	call	0x1226	; 0x1226 <__divsf3>
     57a:	dc 01       	movw	r26, r24
     57c:	cb 01       	movw	r24, r22
     57e:	8e 87       	std	Y+14, r24	; 0x0e
     580:	9f 87       	std	Y+15, r25	; 0x0f
     582:	a8 8b       	std	Y+16, r26	; 0x10
     584:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     586:	2d ec       	ldi	r18, 0xCD	; 205
     588:	3c ec       	ldi	r19, 0xCC	; 204
     58a:	4c e2       	ldi	r20, 0x2C	; 44
     58c:	55 e4       	ldi	r21, 0x45	; 69
     58e:	6e 85       	ldd	r22, Y+14	; 0x0e
     590:	7f 85       	ldd	r23, Y+15	; 0x0f
     592:	88 89       	ldd	r24, Y+16	; 0x10
     594:	99 89       	ldd	r25, Y+17	; 0x11
     596:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__mulsf3>
     59a:	dc 01       	movw	r26, r24
     59c:	cb 01       	movw	r24, r22
     59e:	8a 8b       	std	Y+18, r24	; 0x12
     5a0:	9b 8b       	std	Y+19, r25	; 0x13
     5a2:	ac 8b       	std	Y+20, r26	; 0x14
     5a4:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	40 e8       	ldi	r20, 0x80	; 128
     5ac:	5f e3       	ldi	r21, 0x3F	; 63
     5ae:	6a 89       	ldd	r22, Y+18	; 0x12
     5b0:	7b 89       	ldd	r23, Y+19	; 0x13
     5b2:	8c 89       	ldd	r24, Y+20	; 0x14
     5b4:	9d 89       	ldd	r25, Y+21	; 0x15
     5b6:	0e 94 0e 09 	call	0x121c	; 0x121c <__cmpsf2>
     5ba:	88 23       	and	r24, r24
     5bc:	2c f4       	brge	.+10     	; 0x5c8 <dynamixel_setrx+0x114>
		__ticks = 1;
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	9f 8b       	std	Y+23, r25	; 0x17
     5c4:	8e 8b       	std	Y+22, r24	; 0x16
     5c6:	3f c0       	rjmp	.+126    	; 0x646 <dynamixel_setrx+0x192>
	else if (__tmp > 65535)
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	3f ef       	ldi	r19, 0xFF	; 255
     5cc:	4f e7       	ldi	r20, 0x7F	; 127
     5ce:	57 e4       	ldi	r21, 0x47	; 71
     5d0:	6a 89       	ldd	r22, Y+18	; 0x12
     5d2:	7b 89       	ldd	r23, Y+19	; 0x13
     5d4:	8c 89       	ldd	r24, Y+20	; 0x14
     5d6:	9d 89       	ldd	r25, Y+21	; 0x15
     5d8:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__gesf2>
     5dc:	18 16       	cp	r1, r24
     5de:	4c f5       	brge	.+82     	; 0x632 <dynamixel_setrx+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e2       	ldi	r20, 0x20	; 32
     5e6:	51 e4       	ldi	r21, 0x41	; 65
     5e8:	6e 85       	ldd	r22, Y+14	; 0x0e
     5ea:	7f 85       	ldd	r23, Y+15	; 0x0f
     5ec:	88 89       	ldd	r24, Y+16	; 0x10
     5ee:	99 89       	ldd	r25, Y+17	; 0x11
     5f0:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__mulsf3>
     5f4:	dc 01       	movw	r26, r24
     5f6:	cb 01       	movw	r24, r22
     5f8:	bc 01       	movw	r22, r24
     5fa:	cd 01       	movw	r24, r26
     5fc:	0e 94 85 09 	call	0x130a	; 0x130a <__fixunssfsi>
     600:	dc 01       	movw	r26, r24
     602:	cb 01       	movw	r24, r22
     604:	9f 8b       	std	Y+23, r25	; 0x17
     606:	8e 8b       	std	Y+22, r24	; 0x16
     608:	0f c0       	rjmp	.+30     	; 0x628 <dynamixel_setrx+0x174>
     60a:	84 e1       	ldi	r24, 0x14	; 20
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	99 8f       	std	Y+25, r25	; 0x19
     610:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     612:	88 8d       	ldd	r24, Y+24	; 0x18
     614:	99 8d       	ldd	r25, Y+25	; 0x19
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	f1 f7       	brne	.-4      	; 0x616 <dynamixel_setrx+0x162>
     61a:	99 8f       	std	Y+25, r25	; 0x19
     61c:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     61e:	8e 89       	ldd	r24, Y+22	; 0x16
     620:	9f 89       	ldd	r25, Y+23	; 0x17
     622:	01 97       	sbiw	r24, 0x01	; 1
     624:	9f 8b       	std	Y+23, r25	; 0x17
     626:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     628:	8e 89       	ldd	r24, Y+22	; 0x16
     62a:	9f 89       	ldd	r25, Y+23	; 0x17
     62c:	89 2b       	or	r24, r25
     62e:	69 f7       	brne	.-38     	; 0x60a <dynamixel_setrx+0x156>
     630:	3f c0       	rjmp	.+126    	; 0x6b0 <dynamixel_setrx+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     632:	6a 89       	ldd	r22, Y+18	; 0x12
     634:	7b 89       	ldd	r23, Y+19	; 0x13
     636:	8c 89       	ldd	r24, Y+20	; 0x14
     638:	9d 89       	ldd	r25, Y+21	; 0x15
     63a:	0e 94 85 09 	call	0x130a	; 0x130a <__fixunssfsi>
     63e:	dc 01       	movw	r26, r24
     640:	cb 01       	movw	r24, r22
     642:	9f 8b       	std	Y+23, r25	; 0x17
     644:	8e 8b       	std	Y+22, r24	; 0x16
     646:	8e 89       	ldd	r24, Y+22	; 0x16
     648:	9f 89       	ldd	r25, Y+23	; 0x17
     64a:	9b 8f       	std	Y+27, r25	; 0x1b
     64c:	8a 8f       	std	Y+26, r24	; 0x1a
     64e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     650:	9b 8d       	ldd	r25, Y+27	; 0x1b
     652:	01 97       	sbiw	r24, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <dynamixel_setrx+0x19e>
     656:	9b 8f       	std	Y+27, r25	; 0x1b
     658:	8a 8f       	std	Y+26, r24	; 0x1a
     65a:	2a c0       	rjmp	.+84     	; 0x6b0 <dynamixel_setrx+0x1fc>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	4f e7       	ldi	r20, 0x7F	; 127
     662:	53 e4       	ldi	r21, 0x43	; 67
     664:	6d 81       	ldd	r22, Y+5	; 0x05
     666:	7e 81       	ldd	r23, Y+6	; 0x06
     668:	8f 81       	ldd	r24, Y+7	; 0x07
     66a:	98 85       	ldd	r25, Y+8	; 0x08
     66c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__gesf2>
     670:	18 16       	cp	r1, r24
     672:	ac f4       	brge	.+42     	; 0x69e <dynamixel_setrx+0x1ea>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     674:	69 85       	ldd	r22, Y+9	; 0x09
     676:	7a 85       	ldd	r23, Y+10	; 0x0a
     678:	8b 85       	ldd	r24, Y+11	; 0x0b
     67a:	9c 85       	ldd	r25, Y+12	; 0x0c
     67c:	0e 94 85 09 	call	0x130a	; 0x130a <__fixunssfsi>
     680:	dc 01       	movw	r26, r24
     682:	cb 01       	movw	r24, r22
     684:	9d 8f       	std	Y+29, r25	; 0x1d
     686:	8c 8f       	std	Y+28, r24	; 0x1c
     688:	8c 8d       	ldd	r24, Y+28	; 0x1c
     68a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     68c:	9f 8f       	std	Y+31, r25	; 0x1f
     68e:	8e 8f       	std	Y+30, r24	; 0x1e
     690:	8e 8d       	ldd	r24, Y+30	; 0x1e
     692:	9f 8d       	ldd	r25, Y+31	; 0x1f
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <dynamixel_setrx+0x1e0>
     698:	9f 8f       	std	Y+31, r25	; 0x1f
     69a:	8e 8f       	std	Y+30, r24	; 0x1e
     69c:	0f c0       	rjmp	.+30     	; 0x6bc <dynamixel_setrx+0x208>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     69e:	6d 81       	ldd	r22, Y+5	; 0x05
     6a0:	7e 81       	ldd	r23, Y+6	; 0x06
     6a2:	8f 81       	ldd	r24, Y+7	; 0x07
     6a4:	98 85       	ldd	r25, Y+8	; 0x08
     6a6:	0e 94 85 09 	call	0x130a	; 0x130a <__fixunssfsi>
     6aa:	dc 01       	movw	r26, r24
     6ac:	cb 01       	movw	r24, r22
     6ae:	8d 87       	std	Y+13, r24	; 0x0d
     6b0:	8d 85       	ldd	r24, Y+13	; 0x0d
     6b2:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6b4:	88 a1       	ldd	r24, Y+32	; 0x20
     6b6:	8a 95       	dec	r24
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <dynamixel_setrx+0x202>
     6ba:	88 a3       	std	Y+32, r24	; 0x20

	_delay_us(1);

	// Set UART direction pins
	PORTD &= ~(1 << PD2);
     6bc:	8b e2       	ldi	r24, 0x2B	; 43
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	2b e2       	ldi	r18, 0x2B	; 43
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	f9 01       	movw	r30, r18
     6c6:	20 81       	ld	r18, Z
     6c8:	2b 7f       	andi	r18, 0xFB	; 251
     6ca:	fc 01       	movw	r30, r24
     6cc:	20 83       	st	Z, r18
	PORTD |= (1 << PD3);
     6ce:	8b e2       	ldi	r24, 0x2B	; 43
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	2b e2       	ldi	r18, 0x2B	; 43
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	f9 01       	movw	r30, r18
     6d8:	20 81       	ld	r18, Z
     6da:	28 60       	ori	r18, 0x08	; 8
     6dc:	fc 01       	movw	r30, r24
     6de:	20 83       	st	Z, r18
	//UCSR0B &= ~(1 << TXEN0);
	//UCSR0B |= (1 << RXEN0);
	//UCSR0B |= (1 << RXCIE0);

	// Reset rx index
	dynamixel_rxindex = 0;
     6e0:	10 92 00 01 	sts	0x0100, r1
}
     6e4:	a0 96       	adiw	r28, 0x20	; 32
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <dynamixel_write>:

void dynamixel_write(uint8_t c)
{
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	1f 92       	push	r1
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	89 83       	std	Y+1, r24	; 0x01
	while(bit_is_clear(UCSR0A, UDRE0));
     702:	00 00       	nop
     704:	80 ec       	ldi	r24, 0xC0	; 192
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	fc 01       	movw	r30, r24
     70a:	80 81       	ld	r24, Z
     70c:	88 2f       	mov	r24, r24
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	80 72       	andi	r24, 0x20	; 32
     712:	99 27       	eor	r25, r25
     714:	89 2b       	or	r24, r25
     716:	b1 f3       	breq	.-20     	; 0x704 <dynamixel_write+0xe>
	UDR0 = c;
     718:	86 ec       	ldi	r24, 0xC6	; 198
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	29 81       	ldd	r18, Y+1	; 0x01
     71e:	fc 01       	movw	r30, r24
     720:	20 83       	st	Z, r18
}
     722:	0f 90       	pop	r0
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <dynamixel_calculatechecksum>:

uint8_t dynamixel_calculatechecksum(volatile uint8_t* packet)
{
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	00 d0       	rcall	.+0      	; 0x730 <dynamixel_calculatechecksum+0x6>
     730:	00 d0       	rcall	.+0      	; 0x732 <dynamixel_calculatechecksum+0x8>
     732:	1f 92       	push	r1
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	9d 83       	std	Y+5, r25	; 0x05
     73a:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t checksum = 0;
     73c:	1a 82       	std	Y+2, r1	; 0x02
     73e:	19 82       	std	Y+1, r1	; 0x01

	for(uint8_t i = DYNAMIXEL_ID; i <= (packet[DYNAMIXEL_LENGTH] + 2); i++)
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	8b 83       	std	Y+3, r24	; 0x03
     744:	14 c0       	rjmp	.+40     	; 0x76e <dynamixel_calculatechecksum+0x44>
		checksum += packet[i];
     746:	8b 81       	ldd	r24, Y+3	; 0x03
     748:	88 2f       	mov	r24, r24
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	2c 81       	ldd	r18, Y+4	; 0x04
     74e:	3d 81       	ldd	r19, Y+5	; 0x05
     750:	82 0f       	add	r24, r18
     752:	93 1f       	adc	r25, r19
     754:	fc 01       	movw	r30, r24
     756:	80 81       	ld	r24, Z
     758:	88 2f       	mov	r24, r24
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	29 81       	ldd	r18, Y+1	; 0x01
     75e:	3a 81       	ldd	r19, Y+2	; 0x02
     760:	82 0f       	add	r24, r18
     762:	93 1f       	adc	r25, r19
     764:	9a 83       	std	Y+2, r25	; 0x02
     766:	89 83       	std	Y+1, r24	; 0x01

uint8_t dynamixel_calculatechecksum(volatile uint8_t* packet)
{
	uint16_t checksum = 0;

	for(uint8_t i = DYNAMIXEL_ID; i <= (packet[DYNAMIXEL_LENGTH] + 2); i++)
     768:	8b 81       	ldd	r24, Y+3	; 0x03
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	8b 83       	std	Y+3, r24	; 0x03
     76e:	8b 81       	ldd	r24, Y+3	; 0x03
     770:	28 2f       	mov	r18, r24
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	8c 81       	ldd	r24, Y+4	; 0x04
     776:	9d 81       	ldd	r25, Y+5	; 0x05
     778:	03 96       	adiw	r24, 0x03	; 3
     77a:	fc 01       	movw	r30, r24
     77c:	80 81       	ld	r24, Z
     77e:	88 2f       	mov	r24, r24
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	02 96       	adiw	r24, 0x02	; 2
     784:	82 17       	cp	r24, r18
     786:	93 07       	cpc	r25, r19
     788:	f4 f6       	brge	.-68     	; 0x746 <dynamixel_calculatechecksum+0x1c>
		checksum += packet[i];

	return ~(checksum % 256);
     78a:	89 81       	ldd	r24, Y+1	; 0x01
     78c:	80 95       	com	r24
}
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <dynamixel_writepacket>:

uint8_t dynamixel_writepacket(volatile uint8_t* txpacket, uint8_t packetlength)
{
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	00 d0       	rcall	.+0      	; 0x7a4 <dynamixel_writepacket+0x6>
     7a4:	00 d0       	rcall	.+0      	; 0x7a6 <dynamixel_writepacket+0x8>
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	9b 83       	std	Y+3, r25	; 0x03
     7ac:	8a 83       	std	Y+2, r24	; 0x02
     7ae:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8_t i = 0; i < packetlength; i++)
     7b0:	19 82       	std	Y+1, r1	; 0x01
     7b2:	0e c0       	rjmp	.+28     	; 0x7d0 <dynamixel_writepacket+0x32>
		dynamixel_write(txpacket[i]);
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
     7b6:	88 2f       	mov	r24, r24
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	2a 81       	ldd	r18, Y+2	; 0x02
     7bc:	3b 81       	ldd	r19, Y+3	; 0x03
     7be:	82 0f       	add	r24, r18
     7c0:	93 1f       	adc	r25, r19
     7c2:	fc 01       	movw	r30, r24
     7c4:	80 81       	ld	r24, Z
     7c6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <dynamixel_write>
	return ~(checksum % 256);
}

uint8_t dynamixel_writepacket(volatile uint8_t* txpacket, uint8_t packetlength)
{
	for(uint8_t i = 0; i < packetlength; i++)
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	8f 5f       	subi	r24, 0xFF	; 255
     7ce:	89 83       	std	Y+1, r24	; 0x01
     7d0:	99 81       	ldd	r25, Y+1	; 0x01
     7d2:	8c 81       	ldd	r24, Y+4	; 0x04
     7d4:	98 17       	cp	r25, r24
     7d6:	70 f3       	brcs	.-36     	; 0x7b4 <dynamixel_writepacket+0x16>
		dynamixel_write(txpacket[i]);

	return DYNAMIXEL_SUCCESS;
     7d8:	81 e0       	ldi	r24, 0x01	; 1
}
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <dynamixel_readpacket>:

uint8_t dynamixel_readpacket(volatile uint8_t* rxpacket, uint8_t packetlength)
{
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	00 d0       	rcall	.+0      	; 0x7f0 <dynamixel_readpacket+0x8>
     7f0:	00 d0       	rcall	.+0      	; 0x7f2 <dynamixel_readpacket+0xa>
     7f2:	1f 92       	push	r1
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	9c 83       	std	Y+4, r25	; 0x04
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t ulcounter = 0;
     7fe:	1a 82       	std	Y+2, r1	; 0x02
     800:	19 82       	std	Y+1, r1	; 0x01

	while(dynamixel_rxindex < packetlength)
     802:	0c c0       	rjmp	.+24     	; 0x81c <dynamixel_readpacket+0x34>
	{
		if(ulcounter++ > 10000)
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	9a 81       	ldd	r25, Y+2	; 0x02
     808:	9c 01       	movw	r18, r24
     80a:	2f 5f       	subi	r18, 0xFF	; 255
     80c:	3f 4f       	sbci	r19, 0xFF	; 255
     80e:	3a 83       	std	Y+2, r19	; 0x02
     810:	29 83       	std	Y+1, r18	; 0x01
     812:	81 31       	cpi	r24, 0x11	; 17
     814:	97 42       	sbci	r25, 0x27	; 39
     816:	10 f0       	brcs	.+4      	; 0x81c <dynamixel_readpacket+0x34>
			return DYNAMIXEL_RX_TIMEOUT;
     818:	83 e0       	ldi	r24, 0x03	; 3
     81a:	27 c0       	rjmp	.+78     	; 0x86a <dynamixel_readpacket+0x82>

uint8_t dynamixel_readpacket(volatile uint8_t* rxpacket, uint8_t packetlength)
{
	uint16_t ulcounter = 0;

	while(dynamixel_rxindex < packetlength)
     81c:	90 91 00 01 	lds	r25, 0x0100
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	98 17       	cp	r25, r24
     824:	78 f3       	brcs	.-34     	; 0x804 <dynamixel_readpacket+0x1c>
	{
		if(ulcounter++ > 10000)
			return DYNAMIXEL_RX_TIMEOUT;
	}

	if((rxpacket[0] != 255) || (rxpacket[1] != 255))
     826:	8b 81       	ldd	r24, Y+3	; 0x03
     828:	9c 81       	ldd	r25, Y+4	; 0x04
     82a:	fc 01       	movw	r30, r24
     82c:	80 81       	ld	r24, Z
     82e:	8f 3f       	cpi	r24, 0xFF	; 255
     830:	39 f4       	brne	.+14     	; 0x840 <dynamixel_readpacket+0x58>
     832:	8b 81       	ldd	r24, Y+3	; 0x03
     834:	9c 81       	ldd	r25, Y+4	; 0x04
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	fc 01       	movw	r30, r24
     83a:	80 81       	ld	r24, Z
     83c:	8f 3f       	cpi	r24, 0xFF	; 255
     83e:	11 f0       	breq	.+4      	; 0x844 <dynamixel_readpacket+0x5c>
		return DYNAMIXEL_RX_CORRUPT;
     840:	82 e0       	ldi	r24, 0x02	; 2
     842:	13 c0       	rjmp	.+38     	; 0x86a <dynamixel_readpacket+0x82>

	if(rxpacket[packetlength - 1] != dynamixel_calculatechecksum(rxpacket))
     844:	8d 81       	ldd	r24, Y+5	; 0x05
     846:	88 2f       	mov	r24, r24
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	2b 81       	ldd	r18, Y+3	; 0x03
     84e:	3c 81       	ldd	r19, Y+4	; 0x04
     850:	82 0f       	add	r24, r18
     852:	93 1f       	adc	r25, r19
     854:	fc 01       	movw	r30, r24
     856:	10 81       	ld	r17, Z
     858:	8b 81       	ldd	r24, Y+3	; 0x03
     85a:	9c 81       	ldd	r25, Y+4	; 0x04
     85c:	0e 94 95 03 	call	0x72a	; 0x72a <dynamixel_calculatechecksum>
     860:	18 17       	cp	r17, r24
     862:	11 f0       	breq	.+4      	; 0x868 <dynamixel_readpacket+0x80>
		return DYNAMIXEL_RX_CORRUPT;
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	01 c0       	rjmp	.+2      	; 0x86a <dynamixel_readpacket+0x82>

	return DYNAMIXEL_SUCCESS;
     868:	81 e0       	ldi	r24, 0x01	; 1
}
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	08 95       	ret

0000087c <dynamixel_txrx>:

uint8_t dynamixel_txrx(volatile uint8_t* txpacket, volatile uint8_t* rxpacket)
{
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	00 d0       	rcall	.+0      	; 0x886 <dynamixel_txrx+0xa>
     886:	00 d0       	rcall	.+0      	; 0x888 <dynamixel_txrx+0xc>
     888:	00 d0       	rcall	.+0      	; 0x88a <dynamixel_txrx+0xe>
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	9c 83       	std	Y+4, r25	; 0x04
     890:	8b 83       	std	Y+3, r24	; 0x03
     892:	7e 83       	std	Y+6, r23	; 0x06
     894:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t rxlength = 0;
     896:	19 82       	std	Y+1, r1	; 0x01
	uint8_t txlength = dynamixel_txpacket[DYNAMIXEL_LENGTH] + 4;
     898:	80 91 8a 01 	lds	r24, 0x018A
     89c:	8c 5f       	subi	r24, 0xFC	; 252
     89e:	8a 83       	std	Y+2, r24	; 0x02

	txpacket[0] = (uint8_t) 0xff;
     8a0:	8b 81       	ldd	r24, Y+3	; 0x03
     8a2:	9c 81       	ldd	r25, Y+4	; 0x04
     8a4:	2f ef       	ldi	r18, 0xFF	; 255
     8a6:	fc 01       	movw	r30, r24
     8a8:	20 83       	st	Z, r18
	txpacket[1] = (uint8_t) 0xff;
     8aa:	8b 81       	ldd	r24, Y+3	; 0x03
     8ac:	9c 81       	ldd	r25, Y+4	; 0x04
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	2f ef       	ldi	r18, 0xFF	; 255
     8b2:	fc 01       	movw	r30, r24
     8b4:	20 83       	st	Z, r18
	txpacket[txlength - 1] = (uint8_t) dynamixel_calculatechecksum(txpacket);
     8b6:	8a 81       	ldd	r24, Y+2	; 0x02
     8b8:	88 2f       	mov	r24, r24
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	2b 81       	ldd	r18, Y+3	; 0x03
     8c0:	3c 81       	ldd	r19, Y+4	; 0x04
     8c2:	89 01       	movw	r16, r18
     8c4:	08 0f       	add	r16, r24
     8c6:	19 1f       	adc	r17, r25
     8c8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ca:	9c 81       	ldd	r25, Y+4	; 0x04
     8cc:	0e 94 95 03 	call	0x72a	; 0x72a <dynamixel_calculatechecksum>
     8d0:	f8 01       	movw	r30, r16
     8d2:	80 83       	st	Z, r24

	dynamixel_settx();
     8d4:	0e 94 41 02 	call	0x482	; 0x482 <dynamixel_settx>
	dynamixel_writepacket(txpacket, txlength);
     8d8:	8b 81       	ldd	r24, Y+3	; 0x03
     8da:	9c 81       	ldd	r25, Y+4	; 0x04
     8dc:	6a 81       	ldd	r22, Y+2	; 0x02
     8de:	0e 94 cf 03 	call	0x79e	; 0x79e <dynamixel_writepacket>
	dynamixel_setrx();
     8e2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <dynamixel_setrx>

	if(txpacket[DYNAMIXEL_ID] != DYNAMIXEL_BROADCAST_ID)
     8e6:	8b 81       	ldd	r24, Y+3	; 0x03
     8e8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ea:	02 96       	adiw	r24, 0x02	; 2
     8ec:	fc 01       	movw	r30, r24
     8ee:	80 81       	ld	r24, Z
     8f0:	8e 3f       	cpi	r24, 0xFE	; 254
     8f2:	b9 f0       	breq	.+46     	; 0x922 <dynamixel_txrx+0xa6>
	{
		if(txpacket[DYNAMIXEL_INSTRUCTION] == DYNAMIXEL_READ)
     8f4:	8b 81       	ldd	r24, Y+3	; 0x03
     8f6:	9c 81       	ldd	r25, Y+4	; 0x04
     8f8:	04 96       	adiw	r24, 0x04	; 4
     8fa:	fc 01       	movw	r30, r24
     8fc:	80 81       	ld	r24, Z
     8fe:	82 30       	cpi	r24, 0x02	; 2
     900:	41 f4       	brne	.+16     	; 0x912 <dynamixel_txrx+0x96>
			rxlength = txpacket[DYNAMIXEL_PARAMETER + 1] + 6;
     902:	8b 81       	ldd	r24, Y+3	; 0x03
     904:	9c 81       	ldd	r25, Y+4	; 0x04
     906:	06 96       	adiw	r24, 0x06	; 6
     908:	fc 01       	movw	r30, r24
     90a:	80 81       	ld	r24, Z
     90c:	8a 5f       	subi	r24, 0xFA	; 250
     90e:	89 83       	std	Y+1, r24	; 0x01
     910:	02 c0       	rjmp	.+4      	; 0x916 <dynamixel_txrx+0x9a>
		else
			rxlength = 6;
     912:	86 e0       	ldi	r24, 0x06	; 6
     914:	89 83       	std	Y+1, r24	; 0x01

		return dynamixel_readpacket(rxpacket, rxlength);
     916:	8d 81       	ldd	r24, Y+5	; 0x05
     918:	9e 81       	ldd	r25, Y+6	; 0x06
     91a:	69 81       	ldd	r22, Y+1	; 0x01
     91c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <dynamixel_readpacket>
     920:	03 c0       	rjmp	.+6      	; 0x928 <dynamixel_txrx+0xac>
	}

	dynamixel_settx();
     922:	0e 94 41 02 	call	0x482	; 0x482 <dynamixel_settx>

	return DYNAMIXEL_SUCCESS;
     926:	81 e0       	ldi	r24, 0x01	; 1
}
     928:	26 96       	adiw	r28, 0x06	; 6
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	de bf       	out	0x3e, r29	; 62
     930:	0f be       	out	0x3f, r0	; 63
     932:	cd bf       	out	0x3d, r28	; 61
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	08 95       	ret

0000093e <dynamixel_ping>:

uint8_t dynamixel_ping(uint8_t id)
{
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	1f 92       	push	r1
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
     948:	89 83       	std	Y+1, r24	; 0x01
	dynamixel_txpacket[DYNAMIXEL_ID]          = (uint8_t) id;
     94a:	89 81       	ldd	r24, Y+1	; 0x01
     94c:	80 93 89 01 	sts	0x0189, r24
	dynamixel_txpacket[DYNAMIXEL_LENGTH]      = (uint8_t) 2;
     950:	82 e0       	ldi	r24, 0x02	; 2
     952:	80 93 8a 01 	sts	0x018A, r24
	dynamixel_txpacket[DYNAMIXEL_INSTRUCTION] = (uint8_t) DYNAMIXEL_PING;
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	80 93 8b 01 	sts	0x018B, r24

	return dynamixel_txrx(dynamixel_txpacket, dynamixel_rxpacket);
     95c:	67 e0       	ldi	r22, 0x07	; 7
     95e:	72 e0       	ldi	r23, 0x02	; 2
     960:	87 e8       	ldi	r24, 0x87	; 135
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	0e 94 3e 04 	call	0x87c	; 0x87c <dynamixel_txrx>
}
     968:	0f 90       	pop	r0
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	08 95       	ret

00000970 <dynamixel_readbyte>:

uint8_t dynamixel_readbyte(uint8_t id, uint8_t address, uint8_t* value)
{
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	00 d0       	rcall	.+0      	; 0x976 <dynamixel_readbyte+0x6>
     976:	00 d0       	rcall	.+0      	; 0x978 <dynamixel_readbyte+0x8>
     978:	1f 92       	push	r1
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	8a 83       	std	Y+2, r24	; 0x02
     980:	6b 83       	std	Y+3, r22	; 0x03
     982:	5d 83       	std	Y+5, r21	; 0x05
     984:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t result;

	dynamixel_txpacket[DYNAMIXEL_ID]          = (uint8_t) id;
     986:	8a 81       	ldd	r24, Y+2	; 0x02
     988:	80 93 89 01 	sts	0x0189, r24
	dynamixel_txpacket[DYNAMIXEL_LENGTH]      = (uint8_t) 4;
     98c:	84 e0       	ldi	r24, 0x04	; 4
     98e:	80 93 8a 01 	sts	0x018A, r24
	dynamixel_txpacket[DYNAMIXEL_INSTRUCTION] = (uint8_t) DYNAMIXEL_READ;
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	80 93 8b 01 	sts	0x018B, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER]   = (uint8_t) address;
     998:	8b 81       	ldd	r24, Y+3	; 0x03
     99a:	80 93 8c 01 	sts	0x018C, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER+1] = (uint8_t) 1;
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	80 93 8d 01 	sts	0x018D, r24

	result = dynamixel_txrx(dynamixel_txpacket, dynamixel_rxpacket);
     9a4:	67 e0       	ldi	r22, 0x07	; 7
     9a6:	72 e0       	ldi	r23, 0x02	; 2
     9a8:	87 e8       	ldi	r24, 0x87	; 135
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 3e 04 	call	0x87c	; 0x87c <dynamixel_txrx>
     9b0:	89 83       	std	Y+1, r24	; 0x01

	if(result == DYNAMIXEL_SUCCESS)
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	81 30       	cpi	r24, 0x01	; 1
     9b6:	31 f4       	brne	.+12     	; 0x9c4 <dynamixel_readbyte+0x54>
		*value = dynamixel_rxpacket[DYNAMIXEL_PARAMETER];
     9b8:	20 91 0c 02 	lds	r18, 0x020C
     9bc:	8c 81       	ldd	r24, Y+4	; 0x04
     9be:	9d 81       	ldd	r25, Y+5	; 0x05
     9c0:	fc 01       	movw	r30, r24
     9c2:	20 83       	st	Z, r18

	return result;
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
}
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	08 95       	ret

000009d6 <dynamixel_readword>:

uint8_t dynamixel_readword(uint8_t id, uint8_t address, uint16_t* value)
{
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	00 d0       	rcall	.+0      	; 0x9dc <dynamixel_readword+0x6>
     9dc:	00 d0       	rcall	.+0      	; 0x9de <dynamixel_readword+0x8>
     9de:	1f 92       	push	r1
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	8a 83       	std	Y+2, r24	; 0x02
     9e6:	6b 83       	std	Y+3, r22	; 0x03
     9e8:	5d 83       	std	Y+5, r21	; 0x05
     9ea:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t result;

	dynamixel_txpacket[DYNAMIXEL_ID]          = (uint8_t) id;
     9ec:	8a 81       	ldd	r24, Y+2	; 0x02
     9ee:	80 93 89 01 	sts	0x0189, r24
	dynamixel_txpacket[DYNAMIXEL_LENGTH]      = (uint8_t) 4;
     9f2:	84 e0       	ldi	r24, 0x04	; 4
     9f4:	80 93 8a 01 	sts	0x018A, r24
	dynamixel_txpacket[DYNAMIXEL_INSTRUCTION] = (uint8_t) DYNAMIXEL_READ;
     9f8:	82 e0       	ldi	r24, 0x02	; 2
     9fa:	80 93 8b 01 	sts	0x018B, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER]   = (uint8_t) address;
     9fe:	8b 81       	ldd	r24, Y+3	; 0x03
     a00:	80 93 8c 01 	sts	0x018C, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER+1] = (uint8_t) 2;
     a04:	82 e0       	ldi	r24, 0x02	; 2
     a06:	80 93 8d 01 	sts	0x018D, r24

	result = dynamixel_txrx(dynamixel_txpacket, dynamixel_rxpacket);
     a0a:	67 e0       	ldi	r22, 0x07	; 7
     a0c:	72 e0       	ldi	r23, 0x02	; 2
     a0e:	87 e8       	ldi	r24, 0x87	; 135
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	0e 94 3e 04 	call	0x87c	; 0x87c <dynamixel_txrx>
     a16:	89 83       	std	Y+1, r24	; 0x01

	if(result == DYNAMIXEL_SUCCESS)
     a18:	89 81       	ldd	r24, Y+1	; 0x01
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	69 f4       	brne	.+26     	; 0xa38 <dynamixel_readword+0x62>
		*value = (uint16_t) dynamixel_makeword(dynamixel_rxpacket[DYNAMIXEL_PARAMETER], dynamixel_rxpacket[DYNAMIXEL_PARAMETER+1]);
     a1e:	90 91 0d 02 	lds	r25, 0x020D
     a22:	80 91 0c 02 	lds	r24, 0x020C
     a26:	69 2f       	mov	r22, r25
     a28:	0e 94 4a 06 	call	0xc94	; 0xc94 <dynamixel_makeword>
     a2c:	9c 01       	movw	r18, r24
     a2e:	8c 81       	ldd	r24, Y+4	; 0x04
     a30:	9d 81       	ldd	r25, Y+5	; 0x05
     a32:	fc 01       	movw	r30, r24
     a34:	31 83       	std	Z+1, r19	; 0x01
     a36:	20 83       	st	Z, r18

	return result;
     a38:	89 81       	ldd	r24, Y+1	; 0x01
}
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <dynamixel_readtable>:

uint8_t dynamixel_readtable(uint8_t id, uint8_t start_address, uint8_t end_address, uint8_t* table)
{
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	28 97       	sbiw	r28, 0x08	; 8
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
     a5e:	8c 83       	std	Y+4, r24	; 0x04
     a60:	6d 83       	std	Y+5, r22	; 0x05
     a62:	4e 83       	std	Y+6, r20	; 0x06
     a64:	38 87       	std	Y+8, r19	; 0x08
     a66:	2f 83       	std	Y+7, r18	; 0x07
	uint8_t result;
	uint8_t length = end_address - start_address + 1;
     a68:	9e 81       	ldd	r25, Y+6	; 0x06
     a6a:	8d 81       	ldd	r24, Y+5	; 0x05
     a6c:	29 2f       	mov	r18, r25
     a6e:	28 1b       	sub	r18, r24
     a70:	82 2f       	mov	r24, r18
     a72:	8f 5f       	subi	r24, 0xFF	; 255
     a74:	8a 83       	std	Y+2, r24	; 0x02

	dynamixel_txpacket[DYNAMIXEL_ID]          = (uint8_t) id;
     a76:	8c 81       	ldd	r24, Y+4	; 0x04
     a78:	80 93 89 01 	sts	0x0189, r24
	dynamixel_txpacket[DYNAMIXEL_LENGTH]      = (uint8_t) 4;
     a7c:	84 e0       	ldi	r24, 0x04	; 4
     a7e:	80 93 8a 01 	sts	0x018A, r24
	dynamixel_txpacket[DYNAMIXEL_INSTRUCTION] = (uint8_t) DYNAMIXEL_READ;
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	80 93 8b 01 	sts	0x018B, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER]   = (uint8_t) start_address;
     a88:	8d 81       	ldd	r24, Y+5	; 0x05
     a8a:	80 93 8c 01 	sts	0x018C, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER+1] = (uint8_t) length;
     a8e:	8a 81       	ldd	r24, Y+2	; 0x02
     a90:	80 93 8d 01 	sts	0x018D, r24

	result = dynamixel_txrx(dynamixel_txpacket, dynamixel_rxpacket);
     a94:	67 e0       	ldi	r22, 0x07	; 7
     a96:	72 e0       	ldi	r23, 0x02	; 2
     a98:	87 e8       	ldi	r24, 0x87	; 135
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	0e 94 3e 04 	call	0x87c	; 0x87c <dynamixel_txrx>
     aa0:	8b 83       	std	Y+3, r24	; 0x03

	if(result == DYNAMIXEL_SUCCESS)
     aa2:	8b 81       	ldd	r24, Y+3	; 0x03
     aa4:	81 30       	cpi	r24, 0x01	; 1
     aa6:	09 f5       	brne	.+66     	; 0xaea <dynamixel_readtable+0xa0>
	{
		for(uint8_t i = 0; i < length; i++)
     aa8:	19 82       	std	Y+1, r1	; 0x01
     aaa:	1b c0       	rjmp	.+54     	; 0xae2 <dynamixel_readtable+0x98>
			table[start_address + i] = dynamixel_rxpacket[DYNAMIXEL_PARAMETER + i];
     aac:	8d 81       	ldd	r24, Y+5	; 0x05
     aae:	28 2f       	mov	r18, r24
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	88 2f       	mov	r24, r24
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	82 0f       	add	r24, r18
     aba:	93 1f       	adc	r25, r19
     abc:	9c 01       	movw	r18, r24
     abe:	8f 81       	ldd	r24, Y+7	; 0x07
     ac0:	98 85       	ldd	r25, Y+8	; 0x08
     ac2:	82 0f       	add	r24, r18
     ac4:	93 1f       	adc	r25, r19
     ac6:	29 81       	ldd	r18, Y+1	; 0x01
     ac8:	22 2f       	mov	r18, r18
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	2b 5f       	subi	r18, 0xFB	; 251
     ace:	3f 4f       	sbci	r19, 0xFF	; 255
     ad0:	29 5f       	subi	r18, 0xF9	; 249
     ad2:	3d 4f       	sbci	r19, 0xFD	; 253
     ad4:	f9 01       	movw	r30, r18
     ad6:	20 81       	ld	r18, Z
     ad8:	fc 01       	movw	r30, r24
     ada:	20 83       	st	Z, r18

	result = dynamixel_txrx(dynamixel_txpacket, dynamixel_rxpacket);

	if(result == DYNAMIXEL_SUCCESS)
	{
		for(uint8_t i = 0; i < length; i++)
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	8f 5f       	subi	r24, 0xFF	; 255
     ae0:	89 83       	std	Y+1, r24	; 0x01
     ae2:	99 81       	ldd	r25, Y+1	; 0x01
     ae4:	8a 81       	ldd	r24, Y+2	; 0x02
     ae6:	98 17       	cp	r25, r24
     ae8:	08 f3       	brcs	.-62     	; 0xaac <dynamixel_readtable+0x62>
			table[start_address + i] = dynamixel_rxpacket[DYNAMIXEL_PARAMETER + i];
	}

	return result;
     aea:	8b 81       	ldd	r24, Y+3	; 0x03
}
     aec:	28 96       	adiw	r28, 0x08	; 8
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	08 95       	ret

00000afe <dynamixel_writebyte>:

uint8_t dynamixel_writebyte(uint8_t id, uint8_t address, uint8_t value)
{
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	00 d0       	rcall	.+0      	; 0xb04 <dynamixel_writebyte+0x6>
     b04:	1f 92       	push	r1
     b06:	cd b7       	in	r28, 0x3d	; 61
     b08:	de b7       	in	r29, 0x3e	; 62
     b0a:	89 83       	std	Y+1, r24	; 0x01
     b0c:	6a 83       	std	Y+2, r22	; 0x02
     b0e:	4b 83       	std	Y+3, r20	; 0x03
	dynamixel_txpacket[DYNAMIXEL_ID]          = (uint8_t) id;
     b10:	89 81       	ldd	r24, Y+1	; 0x01
     b12:	80 93 89 01 	sts	0x0189, r24
	dynamixel_txpacket[DYNAMIXEL_LENGTH]      = (uint8_t) 4;
     b16:	84 e0       	ldi	r24, 0x04	; 4
     b18:	80 93 8a 01 	sts	0x018A, r24
	dynamixel_txpacket[DYNAMIXEL_INSTRUCTION] = (uint8_t) DYNAMIXEL_WRITE;
     b1c:	83 e0       	ldi	r24, 0x03	; 3
     b1e:	80 93 8b 01 	sts	0x018B, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER]   = (uint8_t) address;
     b22:	8a 81       	ldd	r24, Y+2	; 0x02
     b24:	80 93 8c 01 	sts	0x018C, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER+1] = (uint8_t) value;
     b28:	8b 81       	ldd	r24, Y+3	; 0x03
     b2a:	80 93 8d 01 	sts	0x018D, r24

	return dynamixel_txrx(dynamixel_txpacket, dynamixel_rxpacket);
     b2e:	67 e0       	ldi	r22, 0x07	; 7
     b30:	72 e0       	ldi	r23, 0x02	; 2
     b32:	87 e8       	ldi	r24, 0x87	; 135
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	0e 94 3e 04 	call	0x87c	; 0x87c <dynamixel_txrx>
}
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	08 95       	ret

00000b46 <dynamixel_writeword>:

uint8_t dynamixel_writeword(uint8_t id, uint8_t address, uint16_t value)
{
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <dynamixel_writeword+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <dynamixel_writeword+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	6a 83       	std	Y+2, r22	; 0x02
     b56:	5c 83       	std	Y+4, r21	; 0x04
     b58:	4b 83       	std	Y+3, r20	; 0x03
	dynamixel_txpacket[DYNAMIXEL_ID]          = (uint8_t) id;
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	80 93 89 01 	sts	0x0189, r24
	dynamixel_txpacket[DYNAMIXEL_LENGTH]      = (uint8_t) 5;
     b60:	85 e0       	ldi	r24, 0x05	; 5
     b62:	80 93 8a 01 	sts	0x018A, r24
	dynamixel_txpacket[DYNAMIXEL_INSTRUCTION] = (uint8_t) DYNAMIXEL_WRITE;
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	80 93 8b 01 	sts	0x018B, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER]   = (uint8_t) address;
     b6c:	8a 81       	ldd	r24, Y+2	; 0x02
     b6e:	80 93 8c 01 	sts	0x018C, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER+1] = (uint8_t) dynamixel_getlowbyte(value);
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	9c 81       	ldd	r25, Y+4	; 0x04
     b76:	0e 94 60 06 	call	0xcc0	; 0xcc0 <dynamixel_getlowbyte>
     b7a:	80 93 8d 01 	sts	0x018D, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER+2] = (uint8_t) dynamixel_gethighbyte(value);
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	9c 81       	ldd	r25, Y+4	; 0x04
     b82:	0e 94 6d 06 	call	0xcda	; 0xcda <dynamixel_gethighbyte>
     b86:	80 93 8e 01 	sts	0x018E, r24

	return dynamixel_txrx(dynamixel_txpacket, dynamixel_rxpacket);
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	72 e0       	ldi	r23, 0x02	; 2
     b8e:	87 e8       	ldi	r24, 0x87	; 135
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 3e 04 	call	0x87c	; 0x87c <dynamixel_txrx>
}
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	08 95       	ret

00000ba4 <dynamixel_syncwrite>:

uint8_t dynamixel_syncwrite(uint8_t address, uint8_t length, uint8_t number, uint8_t* param)
{
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <dynamixel_syncwrite+0x6>
     baa:	00 d0       	rcall	.+0      	; 0xbac <dynamixel_syncwrite+0x8>
     bac:	00 d0       	rcall	.+0      	; 0xbae <dynamixel_syncwrite+0xa>
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	8a 83       	std	Y+2, r24	; 0x02
     bb4:	6b 83       	std	Y+3, r22	; 0x03
     bb6:	4c 83       	std	Y+4, r20	; 0x04
     bb8:	3e 83       	std	Y+6, r19	; 0x06
     bba:	2d 83       	std	Y+5, r18	; 0x05
	dynamixel_txpacket[DYNAMIXEL_ID]          = (uint8_t) DYNAMIXEL_BROADCAST_ID;
     bbc:	8e ef       	ldi	r24, 0xFE	; 254
     bbe:	80 93 89 01 	sts	0x0189, r24
	dynamixel_txpacket[DYNAMIXEL_INSTRUCTION] = (uint8_t) DYNAMIXEL_SYNC_WRITE;
     bc2:	83 e8       	ldi	r24, 0x83	; 131
     bc4:	80 93 8b 01 	sts	0x018B, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER]   = (uint8_t) address;
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	80 93 8c 01 	sts	0x018C, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER+1] = (uint8_t) length;
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	80 93 8d 01 	sts	0x018D, r24
	dynamixel_txpacket[DYNAMIXEL_LENGTH]      = (uint8_t) ((length + 1) * number + 4);
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	98 2f       	mov	r25, r24
     bde:	8c 81       	ldd	r24, Y+4	; 0x04
     be0:	98 9f       	mul	r25, r24
     be2:	80 2d       	mov	r24, r0
     be4:	11 24       	eor	r1, r1
     be6:	8c 5f       	subi	r24, 0xFC	; 252
     be8:	80 93 8a 01 	sts	0x018A, r24

	for(uint8_t i = 0; i < ((length + 1) * number); i++)
     bec:	19 82       	std	Y+1, r1	; 0x01
     bee:	14 c0       	rjmp	.+40     	; 0xc18 <dynamixel_syncwrite+0x74>
		dynamixel_txpacket[DYNAMIXEL_PARAMETER + 2 + i] = (uint8_t) param[i];
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	07 96       	adiw	r24, 0x07	; 7
     bf8:	29 81       	ldd	r18, Y+1	; 0x01
     bfa:	22 2f       	mov	r18, r18
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	4d 81       	ldd	r20, Y+5	; 0x05
     c00:	5e 81       	ldd	r21, Y+6	; 0x06
     c02:	24 0f       	add	r18, r20
     c04:	35 1f       	adc	r19, r21
     c06:	f9 01       	movw	r30, r18
     c08:	20 81       	ld	r18, Z
     c0a:	89 57       	subi	r24, 0x79	; 121
     c0c:	9e 4f       	sbci	r25, 0xFE	; 254
     c0e:	fc 01       	movw	r30, r24
     c10:	20 83       	st	Z, r18
	dynamixel_txpacket[DYNAMIXEL_INSTRUCTION] = (uint8_t) DYNAMIXEL_SYNC_WRITE;
	dynamixel_txpacket[DYNAMIXEL_PARAMETER]   = (uint8_t) address;
	dynamixel_txpacket[DYNAMIXEL_PARAMETER+1] = (uint8_t) length;
	dynamixel_txpacket[DYNAMIXEL_LENGTH]      = (uint8_t) ((length + 1) * number + 4);

	for(uint8_t i = 0; i < ((length + 1) * number); i++)
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	8f 5f       	subi	r24, 0xFF	; 255
     c16:	89 83       	std	Y+1, r24	; 0x01
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	88 2f       	mov	r24, r24
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	bc 01       	movw	r22, r24
     c26:	6f 5f       	subi	r22, 0xFF	; 255
     c28:	7f 4f       	sbci	r23, 0xFF	; 255
     c2a:	8c 81       	ldd	r24, Y+4	; 0x04
     c2c:	48 2f       	mov	r20, r24
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	64 9f       	mul	r22, r20
     c32:	c0 01       	movw	r24, r0
     c34:	65 9f       	mul	r22, r21
     c36:	90 0d       	add	r25, r0
     c38:	74 9f       	mul	r23, r20
     c3a:	90 0d       	add	r25, r0
     c3c:	11 24       	eor	r1, r1
     c3e:	28 17       	cp	r18, r24
     c40:	39 07       	cpc	r19, r25
     c42:	b4 f2       	brlt	.-84     	; 0xbf0 <dynamixel_syncwrite+0x4c>
		dynamixel_txpacket[DYNAMIXEL_PARAMETER + 2 + i] = (uint8_t) param[i];

	return dynamixel_txrx(dynamixel_txpacket, dynamixel_rxpacket);
     c44:	67 e0       	ldi	r22, 0x07	; 7
     c46:	72 e0       	ldi	r23, 0x02	; 2
     c48:	87 e8       	ldi	r24, 0x87	; 135
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	0e 94 3e 04 	call	0x87c	; 0x87c <dynamixel_txrx>
}
     c50:	26 96       	adiw	r28, 0x06	; 6
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	08 95       	ret

00000c62 <dynamixel_reset>:

uint8_t dynamixel_reset(uint8_t id)
{
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	1f 92       	push	r1
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	89 83       	std	Y+1, r24	; 0x01
	dynamixel_txpacket[DYNAMIXEL_ID]          = (uint8_t) id;
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	80 93 89 01 	sts	0x0189, r24
	dynamixel_txpacket[DYNAMIXEL_LENGTH]      = (uint8_t) 2;
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	80 93 8a 01 	sts	0x018A, r24
	dynamixel_txpacket[DYNAMIXEL_INSTRUCTION] = (uint8_t) DYNAMIXEL_RESET;
     c7a:	86 e0       	ldi	r24, 0x06	; 6
     c7c:	80 93 8b 01 	sts	0x018B, r24

	return dynamixel_txrx(dynamixel_txpacket, dynamixel_rxpacket);
     c80:	67 e0       	ldi	r22, 0x07	; 7
     c82:	72 e0       	ldi	r23, 0x02	; 2
     c84:	87 e8       	ldi	r24, 0x87	; 135
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	0e 94 3e 04 	call	0x87c	; 0x87c <dynamixel_txrx>
}
     c8c:	0f 90       	pop	r0
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <dynamixel_makeword>:

uint16_t dynamixel_makeword(uint8_t lowbyte, uint8_t highbyte)
{
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	00 d0       	rcall	.+0      	; 0xc9a <dynamixel_makeword+0x6>
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	6a 83       	std	Y+2, r22	; 0x02
	return ((highbyte << 8) + lowbyte);
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	88 2f       	mov	r24, r24
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	38 2f       	mov	r19, r24
     caa:	22 27       	eor	r18, r18
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	88 2f       	mov	r24, r24
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	82 0f       	add	r24, r18
     cb4:	93 1f       	adc	r25, r19
}
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <dynamixel_getlowbyte>:

uint8_t dynamixel_getlowbyte(uint16_t word)
{
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <dynamixel_getlowbyte+0x6>
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	9a 83       	std	Y+2, r25	; 0x02
     ccc:	89 83       	std	Y+1, r24	; 0x01
	return (word & 0xff);
     cce:	89 81       	ldd	r24, Y+1	; 0x01
}
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	08 95       	ret

00000cda <dynamixel_gethighbyte>:

uint8_t dynamixel_gethighbyte(uint16_t word)
{
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	00 d0       	rcall	.+0      	; 0xce0 <dynamixel_gethighbyte+0x6>
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	9a 83       	std	Y+2, r25	; 0x02
     ce6:	89 83       	std	Y+1, r24	; 0x01
	return ((word & 0xff00) >> 8);
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	9a 81       	ldd	r25, Y+2	; 0x02
     cec:	89 2f       	mov	r24, r25
     cee:	99 27       	eor	r25, r25
}
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	08 95       	ret

00000cfa <main>:
#include <util/delay.h>
#include "dynamixel.h"
#include "ax.h"
#include "usart.h"

int main() {
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62

	dynamixel_init(DYNAMIXEL_BAUDRATE);				// init dynamixel with 250kbps
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	74 e2       	ldi	r23, 0x24	; 36
     d06:	84 e7       	ldi	r24, 0x74	; 116
     d08:	98 e4       	ldi	r25, 0x48	; 72
     d0a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <dynamixel_init>
	UART1_Init(UART1_BAUD, UART_ISR_ON);			// init uart with 9600 baud
     d0e:	41 e0       	ldi	r20, 0x01	; 1
     d10:	60 e8       	ldi	r22, 0x80	; 128
     d12:	75 e2       	ldi	r23, 0x25	; 37
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 93 06 	call	0xd26	; 0xd26 <UART1_Init>





	return 0;
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
}
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <UART1_Init>:
-bez paritet
-9600baud
-asynchron
****************************************************************************************************************************************/
void UART1_Init(unsigned long baud, char isrOnOff)
{
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	27 97       	sbiw	r28, 0x07	; 7
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	6b 83       	std	Y+3, r22	; 0x03
     d3c:	7c 83       	std	Y+4, r23	; 0x04
     d3e:	8d 83       	std	Y+5, r24	; 0x05
     d40:	9e 83       	std	Y+6, r25	; 0x06
     d42:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR1A = 0;
     d44:	88 ec       	ldi	r24, 0xC8	; 200
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	fc 01       	movw	r30, r24
     d4a:	10 82       	st	Z, r1
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
     d4c:	89 ec       	ldi	r24, 0xC9	; 201
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	28 e1       	ldi	r18, 0x18	; 24
     d52:	fc 01       	movw	r30, r24
     d54:	20 83       	st	Z, r18


	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); //sa 1stop bit
     d56:	8a ec       	ldi	r24, 0xCA	; 202
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	26 e0       	ldi	r18, 0x06	; 6
     d5c:	fc 01       	movw	r30, r24
     d5e:	20 83       	st	Z, r18


	if(isrOnOff == UART_ISR_ON)
     d60:	8f 81       	ldd	r24, Y+7	; 0x07
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	91 f4       	brne	.+36     	; 0xd8a <UART1_Init+0x64>
	{
		UCSR1B |= ((1 << RXCIE1) | (1 << TXCIE1));
     d66:	89 ec       	ldi	r24, 0xC9	; 201
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	29 ec       	ldi	r18, 0xC9	; 201
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	f9 01       	movw	r30, r18
     d70:	20 81       	ld	r18, Z
     d72:	20 6c       	ori	r18, 0xC0	; 192
     d74:	fc 01       	movw	r30, r24
     d76:	20 83       	st	Z, r18
		SREG |= 0x80;
     d78:	8f e5       	ldi	r24, 0x5F	; 95
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	2f e5       	ldi	r18, 0x5F	; 95
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	f9 01       	movw	r30, r18
     d82:	20 81       	ld	r18, Z
     d84:	20 68       	ori	r18, 0x80	; 128
     d86:	fc 01       	movw	r30, r24
     d88:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
     d8a:	6b 81       	ldd	r22, Y+3	; 0x03
     d8c:	7c 81       	ldd	r23, Y+4	; 0x04
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	0e 94 b4 09 	call	0x1368	; 0x1368 <__floatunsisf>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e8       	ldi	r20, 0x80	; 128
     da0:	51 e4       	ldi	r21, 0x41	; 65
     da2:	bc 01       	movw	r22, r24
     da4:	cd 01       	movw	r24, r26
     da6:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__mulsf3>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	9c 01       	movw	r18, r24
     db0:	ad 01       	movw	r20, r26
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	70 ec       	ldi	r23, 0xC0	; 192
     db6:	88 e2       	ldi	r24, 0x28	; 40
     db8:	9b e4       	ldi	r25, 0x4B	; 75
     dba:	0e 94 13 09 	call	0x1226	; 0x1226 <__divsf3>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e8       	ldi	r20, 0x80	; 128
     dc8:	5f e3       	ldi	r21, 0x3F	; 63
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	0e 94 a1 08 	call	0x1142	; 0x1142 <__subsf3>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	40 e0       	ldi	r20, 0x00	; 0
     ddc:	5f e3       	ldi	r21, 0x3F	; 63
     dde:	bc 01       	movw	r22, r24
     de0:	cd 01       	movw	r24, r26
     de2:	0e 94 a2 08 	call	0x1144	; 0x1144 <__addsf3>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	bc 01       	movw	r22, r24
     dec:	cd 01       	movw	r24, r26
     dee:	0e 94 85 09 	call	0x130a	; 0x130a <__fixunssfsi>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	9a 83       	std	Y+2, r25	; 0x02
     df8:	89 83       	std	Y+1, r24	; 0x01

	UBRR1H = temp >> 8;
     dfa:	8d ec       	ldi	r24, 0xCD	; 205
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	29 81       	ldd	r18, Y+1	; 0x01
     e00:	3a 81       	ldd	r19, Y+2	; 0x02
     e02:	23 2f       	mov	r18, r19
     e04:	33 27       	eor	r19, r19
     e06:	fc 01       	movw	r30, r24
     e08:	20 83       	st	Z, r18
	UBRR1L = temp;
     e0a:	8c ec       	ldi	r24, 0xCC	; 204
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	29 81       	ldd	r18, Y+1	; 0x01
     e10:	fc 01       	movw	r30, r24
     e12:	20 83       	st	Z, r18
}
     e14:	27 96       	adiw	r28, 0x07	; 7
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	08 95       	ret

00000e26 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
     e26:	1f 92       	push	r1
     e28:	0f 92       	push	r0
     e2a:	00 90 5f 00 	lds	r0, 0x005F
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	00 90 5b 00 	lds	r0, 0x005B
     e36:	0f 92       	push	r0
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	8f 93       	push	r24
     e3e:	9f 93       	push	r25
     e40:	ef 93       	push	r30
     e42:	ff 93       	push	r31
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
     e4c:	80 91 42 01 	lds	r24, 0x0142
     e50:	88 23       	and	r24, r24
     e52:	d1 f0       	breq	.+52     	; 0xe88 <__vector_34+0x62>
	{
		tx1_counter--;
     e54:	80 91 42 01 	lds	r24, 0x0142
     e58:	81 50       	subi	r24, 0x01	; 1
     e5a:	80 93 42 01 	sts	0x0142, r24
		UDR1=tx1_buffer[tx1_rd_index];
     e5e:	8e ec       	ldi	r24, 0xCE	; 206
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	20 91 43 01 	lds	r18, 0x0143
     e66:	22 2f       	mov	r18, r18
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	2f 5f       	subi	r18, 0xFF	; 255
     e6c:	3e 4f       	sbci	r19, 0xFE	; 254
     e6e:	f9 01       	movw	r30, r18
     e70:	20 81       	ld	r18, Z
     e72:	fc 01       	movw	r30, r24
     e74:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
     e76:	80 91 43 01 	lds	r24, 0x0143
     e7a:	8f 5f       	subi	r24, 0xFF	; 255
     e7c:	80 93 43 01 	sts	0x0143, r24
     e80:	80 34       	cpi	r24, 0x40	; 64
     e82:	11 f4       	brne	.+4      	; 0xe88 <__vector_34+0x62>
			tx1_rd_index = 0;
     e84:	10 92 43 01 	sts	0x0143, r1
	}
}
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	9f 91       	pop	r25
     e92:	8f 91       	pop	r24
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	0f 90       	pop	r0
     e9a:	00 92 5b 00 	sts	0x005B, r0
     e9e:	0f 90       	pop	r0
     ea0:	00 92 5f 00 	sts	0x005F, r0
     ea4:	0f 90       	pop	r0
     ea6:	1f 90       	pop	r1
     ea8:	18 95       	reti

00000eaa <__vector_32>:

ISR(USART1_RX_vect)
{
     eaa:	1f 92       	push	r1
     eac:	0f 92       	push	r0
     eae:	00 90 5f 00 	lds	r0, 0x005F
     eb2:	0f 92       	push	r0
     eb4:	11 24       	eor	r1, r1
     eb6:	00 90 5b 00 	lds	r0, 0x005B
     eba:	0f 92       	push	r0
     ebc:	2f 93       	push	r18
     ebe:	3f 93       	push	r19
     ec0:	8f 93       	push	r24
     ec2:	9f 93       	push	r25
     ec4:	ef 93       	push	r30
     ec6:	ff 93       	push	r31
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	1f 92       	push	r1
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
     ed2:	88 ec       	ldi	r24, 0xC8	; 200
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	fc 01       	movw	r30, r24
     ed8:	80 81       	ld	r24, Z
     eda:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	88 2f       	mov	r24, r24
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	8c 71       	andi	r24, 0x1C	; 28
     ee4:	99 27       	eor	r25, r25
     ee6:	89 2b       	or	r24, r25
     ee8:	d1 f4       	brne	.+52     	; 0xf1e <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
     eea:	80 91 84 01 	lds	r24, 0x0184
     eee:	88 2f       	mov	r24, r24
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	2e ec       	ldi	r18, 0xCE	; 206
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	f9 01       	movw	r30, r18
     ef8:	20 81       	ld	r18, Z
     efa:	8c 5b       	subi	r24, 0xBC	; 188
     efc:	9e 4f       	sbci	r25, 0xFE	; 254
     efe:	fc 01       	movw	r30, r24
     f00:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
     f02:	80 91 84 01 	lds	r24, 0x0184
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	80 93 84 01 	sts	0x0184, r24
     f0c:	80 34       	cpi	r24, 0x40	; 64
     f0e:	11 f4       	brne	.+4      	; 0xf14 <__vector_32+0x6a>
		rx1_wr_index = 0;
     f10:	10 92 84 01 	sts	0x0184, r1

		rx1_counter++;
     f14:	80 91 85 01 	lds	r24, 0x0185
     f18:	8f 5f       	subi	r24, 0xFF	; 255
     f1a:	80 93 85 01 	sts	0x0185, r24
	}
}
     f1e:	0f 90       	pop	r0
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	ff 91       	pop	r31
     f26:	ef 91       	pop	r30
     f28:	9f 91       	pop	r25
     f2a:	8f 91       	pop	r24
     f2c:	3f 91       	pop	r19
     f2e:	2f 91       	pop	r18
     f30:	0f 90       	pop	r0
     f32:	00 92 5b 00 	sts	0x005B, r0
     f36:	0f 90       	pop	r0
     f38:	00 92 5f 00 	sts	0x005F, r0
     f3c:	0f 90       	pop	r0
     f3e:	1f 90       	pop	r1
     f40:	18 95       	reti

00000f42 <altUart0Write>:

void altUart0Write(unsigned char data)
{
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	1f 92       	push	r1
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & (1 << UDRE0)));
     f4e:	00 00       	nop
     f50:	80 ec       	ldi	r24, 0xC0	; 192
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	fc 01       	movw	r30, r24
     f56:	80 81       	ld	r24, Z
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	80 72       	andi	r24, 0x20	; 32
     f5e:	99 27       	eor	r25, r25
     f60:	89 2b       	or	r24, r25
     f62:	b1 f3       	breq	.-20     	; 0xf50 <altUart0Write+0xe>

	UDR0 = data;
     f64:	86 ec       	ldi	r24, 0xC6	; 198
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	29 81       	ldd	r18, Y+1	; 0x01
     f6a:	fc 01       	movw	r30, r24
     f6c:	20 83       	st	Z, r18
}
     f6e:	0f 90       	pop	r0
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <altUart1Write>:

void altUart1Write(unsigned char data)
{
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	1f 92       	push	r1
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1 << UDRE1)) );
     f82:	00 00       	nop
     f84:	88 ec       	ldi	r24, 0xC8	; 200
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	fc 01       	movw	r30, r24
     f8a:	80 81       	ld	r24, Z
     f8c:	88 2f       	mov	r24, r24
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	80 72       	andi	r24, 0x20	; 32
     f92:	99 27       	eor	r25, r25
     f94:	89 2b       	or	r24, r25
     f96:	b1 f3       	breq	.-20     	; 0xf84 <altUart1Write+0xe>
	UDR1 = data;
     f98:	8e ec       	ldi	r24, 0xCE	; 206
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	29 81       	ldd	r18, Y+1	; 0x01
     f9e:	fc 01       	movw	r30, r24
     fa0:	20 83       	st	Z, r18
}
     fa2:	0f 90       	pop	r0
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <UART1_Write>:
Slanje podataka USART1 modulom
**
**************************************************************************************************************************************/

void UART1_Write(unsigned char data)
{
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	1f 92       	push	r1
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR1B >> TXCIE1) & 0x01)
     fb6:	89 ec       	ldi	r24, 0xC9	; 201
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	fc 01       	movw	r30, r24
     fbc:	80 81       	ld	r24, Z
     fbe:	82 95       	swap	r24
     fc0:	86 95       	lsr	r24
     fc2:	86 95       	lsr	r24
     fc4:	83 70       	andi	r24, 0x03	; 3
     fc6:	88 2f       	mov	r24, r24
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	81 70       	andi	r24, 0x01	; 1
     fcc:	99 27       	eor	r25, r25
     fce:	89 2b       	or	r24, r25
     fd0:	99 f1       	breq	.+102    	; 0x1038 <UART1_Write+0x8e>
	{
		while(tx1_counter == TX1_BUFFER_SIZE);
     fd2:	00 00       	nop
     fd4:	80 91 42 01 	lds	r24, 0x0142
     fd8:	80 34       	cpi	r24, 0x40	; 64
     fda:	e1 f3       	breq	.-8      	; 0xfd4 <UART1_Write+0x2a>

		cli();
     fdc:	f8 94       	cli

		if(tx1_counter || (UCSR1A & 0x20) == 0)
     fde:	80 91 42 01 	lds	r24, 0x0142
     fe2:	88 23       	and	r24, r24
     fe4:	51 f4       	brne	.+20     	; 0xffa <UART1_Write+0x50>
     fe6:	88 ec       	ldi	r24, 0xC8	; 200
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	fc 01       	movw	r30, r24
     fec:	80 81       	ld	r24, Z
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	80 72       	andi	r24, 0x20	; 32
     ff4:	99 27       	eor	r25, r25
     ff6:	89 2b       	or	r24, r25
     ff8:	c1 f4       	brne	.+48     	; 0x102a <UART1_Write+0x80>
		{
			tx1_buffer[tx1_wr_index] = data;
     ffa:	80 91 41 01 	lds	r24, 0x0141
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	8f 5f       	subi	r24, 0xFF	; 255
    1004:	9e 4f       	sbci	r25, 0xFE	; 254
    1006:	29 81       	ldd	r18, Y+1	; 0x01
    1008:	fc 01       	movw	r30, r24
    100a:	20 83       	st	Z, r18

			if(++tx1_wr_index == TX1_BUFFER_SIZE)
    100c:	80 91 41 01 	lds	r24, 0x0141
    1010:	8f 5f       	subi	r24, 0xFF	; 255
    1012:	80 93 41 01 	sts	0x0141, r24
    1016:	80 34       	cpi	r24, 0x40	; 64
    1018:	11 f4       	brne	.+4      	; 0x101e <UART1_Write+0x74>
				tx1_wr_index = 0;
    101a:	10 92 41 01 	sts	0x0141, r1

			tx1_counter++;
    101e:	80 91 42 01 	lds	r24, 0x0142
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	80 93 42 01 	sts	0x0142, r24
    1028:	05 c0       	rjmp	.+10     	; 0x1034 <UART1_Write+0x8a>
		}
		else
			UDR1 = data;
    102a:	8e ec       	ldi	r24, 0xCE	; 206
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	29 81       	ldd	r18, Y+1	; 0x01
    1030:	fc 01       	movw	r30, r24
    1032:	20 83       	st	Z, r18

		sei();
    1034:	78 94       	sei
    1036:	03 c0       	rjmp	.+6      	; 0x103e <UART1_Write+0x94>
	}
	else
		altUart1Write(data);
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	0e 94 bb 07 	call	0xf76	; 0xf76 <altUart1Write>
}
    103e:	0f 90       	pop	r0
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	08 95       	ret

00001046 <UART1_Read>:

unsigned char UART1_Read(void)
{
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	1f 92       	push	r1
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR1B >> RXCIE1) & 0x01)
    1050:	89 ec       	ldi	r24, 0xC9	; 201
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	fc 01       	movw	r30, r24
    1056:	80 81       	ld	r24, Z
    1058:	88 1f       	adc	r24, r24
    105a:	88 27       	eor	r24, r24
    105c:	88 1f       	adc	r24, r24
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	81 70       	andi	r24, 0x01	; 1
    1064:	99 27       	eor	r25, r25
    1066:	89 2b       	or	r24, r25
    1068:	e9 f0       	breq	.+58     	; 0x10a4 <UART1_Read+0x5e>
	{
		while(rx1_counter == 0);
    106a:	00 00       	nop
    106c:	80 91 85 01 	lds	r24, 0x0185
    1070:	88 23       	and	r24, r24
    1072:	e1 f3       	breq	.-8      	; 0x106c <UART1_Read+0x26>

		data = rx1_buffer[rx1_rd_index];
    1074:	80 91 86 01 	lds	r24, 0x0186
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	8c 5b       	subi	r24, 0xBC	; 188
    107e:	9e 4f       	sbci	r25, 0xFE	; 254
    1080:	fc 01       	movw	r30, r24
    1082:	80 81       	ld	r24, Z
    1084:	89 83       	std	Y+1, r24	; 0x01

		if(++rx1_rd_index == RX1_BUFFER_SIZE)
    1086:	80 91 86 01 	lds	r24, 0x0186
    108a:	8f 5f       	subi	r24, 0xFF	; 255
    108c:	80 93 86 01 	sts	0x0186, r24
    1090:	80 34       	cpi	r24, 0x40	; 64
    1092:	11 f4       	brne	.+4      	; 0x1098 <UART1_Read+0x52>
			rx1_rd_index = 0;
    1094:	10 92 86 01 	sts	0x0186, r1

		rx1_counter--;
    1098:	80 91 85 01 	lds	r24, 0x0185
    109c:	81 50       	subi	r24, 0x01	; 1
    109e:	80 93 85 01 	sts	0x0185, r24
    10a2:	13 c0       	rjmp	.+38     	; 0x10ca <UART1_Read+0x84>
	}
	else
	{
		while( !((UCSR1A >> RXC1) & 0x01));
    10a4:	00 00       	nop
    10a6:	88 ec       	ldi	r24, 0xC8	; 200
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	fc 01       	movw	r30, r24
    10ac:	80 81       	ld	r24, Z
    10ae:	88 1f       	adc	r24, r24
    10b0:	88 27       	eor	r24, r24
    10b2:	88 1f       	adc	r24, r24
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	81 70       	andi	r24, 0x01	; 1
    10ba:	99 27       	eor	r25, r25
    10bc:	89 2b       	or	r24, r25
    10be:	99 f3       	breq	.-26     	; 0x10a6 <UART1_Read+0x60>
		data = UDR1;
    10c0:	8e ec       	ldi	r24, 0xCE	; 206
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	fc 01       	movw	r30, r24
    10c6:	80 81       	ld	r24, Z
    10c8:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    10cc:	0f 90       	pop	r0
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret

000010d4 <__divmodhi4>:
    10d4:	97 fb       	bst	r25, 7
    10d6:	07 2e       	mov	r0, r23
    10d8:	16 f4       	brtc	.+4      	; 0x10de <__divmodhi4+0xa>
    10da:	00 94       	com	r0
    10dc:	07 d0       	rcall	.+14     	; 0x10ec <__divmodhi4_neg1>
    10de:	77 fd       	sbrc	r23, 7
    10e0:	09 d0       	rcall	.+18     	; 0x10f4 <__divmodhi4_neg2>
    10e2:	0e 94 8d 08 	call	0x111a	; 0x111a <__udivmodhi4>
    10e6:	07 fc       	sbrc	r0, 7
    10e8:	05 d0       	rcall	.+10     	; 0x10f4 <__divmodhi4_neg2>
    10ea:	3e f4       	brtc	.+14     	; 0x10fa <__divmodhi4_exit>

000010ec <__divmodhi4_neg1>:
    10ec:	90 95       	com	r25
    10ee:	81 95       	neg	r24
    10f0:	9f 4f       	sbci	r25, 0xFF	; 255
    10f2:	08 95       	ret

000010f4 <__divmodhi4_neg2>:
    10f4:	70 95       	com	r23
    10f6:	61 95       	neg	r22
    10f8:	7f 4f       	sbci	r23, 0xFF	; 255

000010fa <__divmodhi4_exit>:
    10fa:	08 95       	ret

000010fc <__umulhisi3>:
    10fc:	a2 9f       	mul	r26, r18
    10fe:	b0 01       	movw	r22, r0
    1100:	b3 9f       	mul	r27, r19
    1102:	c0 01       	movw	r24, r0
    1104:	a3 9f       	mul	r26, r19
    1106:	70 0d       	add	r23, r0
    1108:	81 1d       	adc	r24, r1
    110a:	11 24       	eor	r1, r1
    110c:	91 1d       	adc	r25, r1
    110e:	b2 9f       	mul	r27, r18
    1110:	70 0d       	add	r23, r0
    1112:	81 1d       	adc	r24, r1
    1114:	11 24       	eor	r1, r1
    1116:	91 1d       	adc	r25, r1
    1118:	08 95       	ret

0000111a <__udivmodhi4>:
    111a:	aa 1b       	sub	r26, r26
    111c:	bb 1b       	sub	r27, r27
    111e:	51 e1       	ldi	r21, 0x11	; 17
    1120:	07 c0       	rjmp	.+14     	; 0x1130 <__udivmodhi4_ep>

00001122 <__udivmodhi4_loop>:
    1122:	aa 1f       	adc	r26, r26
    1124:	bb 1f       	adc	r27, r27
    1126:	a6 17       	cp	r26, r22
    1128:	b7 07       	cpc	r27, r23
    112a:	10 f0       	brcs	.+4      	; 0x1130 <__udivmodhi4_ep>
    112c:	a6 1b       	sub	r26, r22
    112e:	b7 0b       	sbc	r27, r23

00001130 <__udivmodhi4_ep>:
    1130:	88 1f       	adc	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	5a 95       	dec	r21
    1136:	a9 f7       	brne	.-22     	; 0x1122 <__udivmodhi4_loop>
    1138:	80 95       	com	r24
    113a:	90 95       	com	r25
    113c:	bc 01       	movw	r22, r24
    113e:	cd 01       	movw	r24, r26
    1140:	08 95       	ret

00001142 <__subsf3>:
    1142:	50 58       	subi	r21, 0x80	; 128

00001144 <__addsf3>:
    1144:	bb 27       	eor	r27, r27
    1146:	aa 27       	eor	r26, r26
    1148:	0e 94 b9 08 	call	0x1172	; 0x1172 <__addsf3x>
    114c:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__fp_round>
    1150:	0e 94 1e 0a 	call	0x143c	; 0x143c <__fp_pscA>
    1154:	38 f0       	brcs	.+14     	; 0x1164 <__addsf3+0x20>
    1156:	0e 94 25 0a 	call	0x144a	; 0x144a <__fp_pscB>
    115a:	20 f0       	brcs	.+8      	; 0x1164 <__addsf3+0x20>
    115c:	39 f4       	brne	.+14     	; 0x116c <__addsf3+0x28>
    115e:	9f 3f       	cpi	r25, 0xFF	; 255
    1160:	19 f4       	brne	.+6      	; 0x1168 <__addsf3+0x24>
    1162:	26 f4       	brtc	.+8      	; 0x116c <__addsf3+0x28>
    1164:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__fp_nan>
    1168:	0e f4       	brtc	.+2      	; 0x116c <__addsf3+0x28>
    116a:	e0 95       	com	r30
    116c:	e7 fb       	bst	r30, 7
    116e:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__fp_inf>

00001172 <__addsf3x>:
    1172:	e9 2f       	mov	r30, r25
    1174:	0e 94 3d 0a 	call	0x147a	; 0x147a <__fp_split3>
    1178:	58 f3       	brcs	.-42     	; 0x1150 <__addsf3+0xc>
    117a:	ba 17       	cp	r27, r26
    117c:	62 07       	cpc	r22, r18
    117e:	73 07       	cpc	r23, r19
    1180:	84 07       	cpc	r24, r20
    1182:	95 07       	cpc	r25, r21
    1184:	20 f0       	brcs	.+8      	; 0x118e <__addsf3x+0x1c>
    1186:	79 f4       	brne	.+30     	; 0x11a6 <__addsf3x+0x34>
    1188:	a6 f5       	brtc	.+104    	; 0x11f2 <__addsf3x+0x80>
    118a:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__fp_zero>
    118e:	0e f4       	brtc	.+2      	; 0x1192 <__addsf3x+0x20>
    1190:	e0 95       	com	r30
    1192:	0b 2e       	mov	r0, r27
    1194:	ba 2f       	mov	r27, r26
    1196:	a0 2d       	mov	r26, r0
    1198:	0b 01       	movw	r0, r22
    119a:	b9 01       	movw	r22, r18
    119c:	90 01       	movw	r18, r0
    119e:	0c 01       	movw	r0, r24
    11a0:	ca 01       	movw	r24, r20
    11a2:	a0 01       	movw	r20, r0
    11a4:	11 24       	eor	r1, r1
    11a6:	ff 27       	eor	r31, r31
    11a8:	59 1b       	sub	r21, r25
    11aa:	99 f0       	breq	.+38     	; 0x11d2 <__addsf3x+0x60>
    11ac:	59 3f       	cpi	r21, 0xF9	; 249
    11ae:	50 f4       	brcc	.+20     	; 0x11c4 <__addsf3x+0x52>
    11b0:	50 3e       	cpi	r21, 0xE0	; 224
    11b2:	68 f1       	brcs	.+90     	; 0x120e <__addsf3x+0x9c>
    11b4:	1a 16       	cp	r1, r26
    11b6:	f0 40       	sbci	r31, 0x00	; 0
    11b8:	a2 2f       	mov	r26, r18
    11ba:	23 2f       	mov	r18, r19
    11bc:	34 2f       	mov	r19, r20
    11be:	44 27       	eor	r20, r20
    11c0:	58 5f       	subi	r21, 0xF8	; 248
    11c2:	f3 cf       	rjmp	.-26     	; 0x11aa <__addsf3x+0x38>
    11c4:	46 95       	lsr	r20
    11c6:	37 95       	ror	r19
    11c8:	27 95       	ror	r18
    11ca:	a7 95       	ror	r26
    11cc:	f0 40       	sbci	r31, 0x00	; 0
    11ce:	53 95       	inc	r21
    11d0:	c9 f7       	brne	.-14     	; 0x11c4 <__addsf3x+0x52>
    11d2:	7e f4       	brtc	.+30     	; 0x11f2 <__addsf3x+0x80>
    11d4:	1f 16       	cp	r1, r31
    11d6:	ba 0b       	sbc	r27, r26
    11d8:	62 0b       	sbc	r22, r18
    11da:	73 0b       	sbc	r23, r19
    11dc:	84 0b       	sbc	r24, r20
    11de:	ba f0       	brmi	.+46     	; 0x120e <__addsf3x+0x9c>
    11e0:	91 50       	subi	r25, 0x01	; 1
    11e2:	a1 f0       	breq	.+40     	; 0x120c <__addsf3x+0x9a>
    11e4:	ff 0f       	add	r31, r31
    11e6:	bb 1f       	adc	r27, r27
    11e8:	66 1f       	adc	r22, r22
    11ea:	77 1f       	adc	r23, r23
    11ec:	88 1f       	adc	r24, r24
    11ee:	c2 f7       	brpl	.-16     	; 0x11e0 <__addsf3x+0x6e>
    11f0:	0e c0       	rjmp	.+28     	; 0x120e <__addsf3x+0x9c>
    11f2:	ba 0f       	add	r27, r26
    11f4:	62 1f       	adc	r22, r18
    11f6:	73 1f       	adc	r23, r19
    11f8:	84 1f       	adc	r24, r20
    11fa:	48 f4       	brcc	.+18     	; 0x120e <__addsf3x+0x9c>
    11fc:	87 95       	ror	r24
    11fe:	77 95       	ror	r23
    1200:	67 95       	ror	r22
    1202:	b7 95       	ror	r27
    1204:	f7 95       	ror	r31
    1206:	9e 3f       	cpi	r25, 0xFE	; 254
    1208:	08 f0       	brcs	.+2      	; 0x120c <__addsf3x+0x9a>
    120a:	b0 cf       	rjmp	.-160    	; 0x116c <__addsf3+0x28>
    120c:	93 95       	inc	r25
    120e:	88 0f       	add	r24, r24
    1210:	08 f0       	brcs	.+2      	; 0x1214 <__addsf3x+0xa2>
    1212:	99 27       	eor	r25, r25
    1214:	ee 0f       	add	r30, r30
    1216:	97 95       	ror	r25
    1218:	87 95       	ror	r24
    121a:	08 95       	ret

0000121c <__cmpsf2>:
    121c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_cmp>
    1220:	08 f4       	brcc	.+2      	; 0x1224 <__cmpsf2+0x8>
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	08 95       	ret

00001226 <__divsf3>:
    1226:	0e 94 27 09 	call	0x124e	; 0x124e <__divsf3x>
    122a:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__fp_round>
    122e:	0e 94 25 0a 	call	0x144a	; 0x144a <__fp_pscB>
    1232:	58 f0       	brcs	.+22     	; 0x124a <__divsf3+0x24>
    1234:	0e 94 1e 0a 	call	0x143c	; 0x143c <__fp_pscA>
    1238:	40 f0       	brcs	.+16     	; 0x124a <__divsf3+0x24>
    123a:	29 f4       	brne	.+10     	; 0x1246 <__divsf3+0x20>
    123c:	5f 3f       	cpi	r21, 0xFF	; 255
    123e:	29 f0       	breq	.+10     	; 0x124a <__divsf3+0x24>
    1240:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__fp_inf>
    1244:	51 11       	cpse	r21, r1
    1246:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__fp_szero>
    124a:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__fp_nan>

0000124e <__divsf3x>:
    124e:	0e 94 3d 0a 	call	0x147a	; 0x147a <__fp_split3>
    1252:	68 f3       	brcs	.-38     	; 0x122e <__divsf3+0x8>

00001254 <__divsf3_pse>:
    1254:	99 23       	and	r25, r25
    1256:	b1 f3       	breq	.-20     	; 0x1244 <__divsf3+0x1e>
    1258:	55 23       	and	r21, r21
    125a:	91 f3       	breq	.-28     	; 0x1240 <__divsf3+0x1a>
    125c:	95 1b       	sub	r25, r21
    125e:	55 0b       	sbc	r21, r21
    1260:	bb 27       	eor	r27, r27
    1262:	aa 27       	eor	r26, r26
    1264:	62 17       	cp	r22, r18
    1266:	73 07       	cpc	r23, r19
    1268:	84 07       	cpc	r24, r20
    126a:	38 f0       	brcs	.+14     	; 0x127a <__divsf3_pse+0x26>
    126c:	9f 5f       	subi	r25, 0xFF	; 255
    126e:	5f 4f       	sbci	r21, 0xFF	; 255
    1270:	22 0f       	add	r18, r18
    1272:	33 1f       	adc	r19, r19
    1274:	44 1f       	adc	r20, r20
    1276:	aa 1f       	adc	r26, r26
    1278:	a9 f3       	breq	.-22     	; 0x1264 <__divsf3_pse+0x10>
    127a:	35 d0       	rcall	.+106    	; 0x12e6 <__divsf3_pse+0x92>
    127c:	0e 2e       	mov	r0, r30
    127e:	3a f0       	brmi	.+14     	; 0x128e <__divsf3_pse+0x3a>
    1280:	e0 e8       	ldi	r30, 0x80	; 128
    1282:	32 d0       	rcall	.+100    	; 0x12e8 <__divsf3_pse+0x94>
    1284:	91 50       	subi	r25, 0x01	; 1
    1286:	50 40       	sbci	r21, 0x00	; 0
    1288:	e6 95       	lsr	r30
    128a:	00 1c       	adc	r0, r0
    128c:	ca f7       	brpl	.-14     	; 0x1280 <__divsf3_pse+0x2c>
    128e:	2b d0       	rcall	.+86     	; 0x12e6 <__divsf3_pse+0x92>
    1290:	fe 2f       	mov	r31, r30
    1292:	29 d0       	rcall	.+82     	; 0x12e6 <__divsf3_pse+0x92>
    1294:	66 0f       	add	r22, r22
    1296:	77 1f       	adc	r23, r23
    1298:	88 1f       	adc	r24, r24
    129a:	bb 1f       	adc	r27, r27
    129c:	26 17       	cp	r18, r22
    129e:	37 07       	cpc	r19, r23
    12a0:	48 07       	cpc	r20, r24
    12a2:	ab 07       	cpc	r26, r27
    12a4:	b0 e8       	ldi	r27, 0x80	; 128
    12a6:	09 f0       	breq	.+2      	; 0x12aa <__divsf3_pse+0x56>
    12a8:	bb 0b       	sbc	r27, r27
    12aa:	80 2d       	mov	r24, r0
    12ac:	bf 01       	movw	r22, r30
    12ae:	ff 27       	eor	r31, r31
    12b0:	93 58       	subi	r25, 0x83	; 131
    12b2:	5f 4f       	sbci	r21, 0xFF	; 255
    12b4:	3a f0       	brmi	.+14     	; 0x12c4 <__divsf3_pse+0x70>
    12b6:	9e 3f       	cpi	r25, 0xFE	; 254
    12b8:	51 05       	cpc	r21, r1
    12ba:	78 f0       	brcs	.+30     	; 0x12da <__divsf3_pse+0x86>
    12bc:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__fp_inf>
    12c0:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__fp_szero>
    12c4:	5f 3f       	cpi	r21, 0xFF	; 255
    12c6:	e4 f3       	brlt	.-8      	; 0x12c0 <__divsf3_pse+0x6c>
    12c8:	98 3e       	cpi	r25, 0xE8	; 232
    12ca:	d4 f3       	brlt	.-12     	; 0x12c0 <__divsf3_pse+0x6c>
    12cc:	86 95       	lsr	r24
    12ce:	77 95       	ror	r23
    12d0:	67 95       	ror	r22
    12d2:	b7 95       	ror	r27
    12d4:	f7 95       	ror	r31
    12d6:	9f 5f       	subi	r25, 0xFF	; 255
    12d8:	c9 f7       	brne	.-14     	; 0x12cc <__divsf3_pse+0x78>
    12da:	88 0f       	add	r24, r24
    12dc:	91 1d       	adc	r25, r1
    12de:	96 95       	lsr	r25
    12e0:	87 95       	ror	r24
    12e2:	97 f9       	bld	r25, 7
    12e4:	08 95       	ret
    12e6:	e1 e0       	ldi	r30, 0x01	; 1
    12e8:	66 0f       	add	r22, r22
    12ea:	77 1f       	adc	r23, r23
    12ec:	88 1f       	adc	r24, r24
    12ee:	bb 1f       	adc	r27, r27
    12f0:	62 17       	cp	r22, r18
    12f2:	73 07       	cpc	r23, r19
    12f4:	84 07       	cpc	r24, r20
    12f6:	ba 07       	cpc	r27, r26
    12f8:	20 f0       	brcs	.+8      	; 0x1302 <__divsf3_pse+0xae>
    12fa:	62 1b       	sub	r22, r18
    12fc:	73 0b       	sbc	r23, r19
    12fe:	84 0b       	sbc	r24, r20
    1300:	ba 0b       	sbc	r27, r26
    1302:	ee 1f       	adc	r30, r30
    1304:	88 f7       	brcc	.-30     	; 0x12e8 <__divsf3_pse+0x94>
    1306:	e0 95       	com	r30
    1308:	08 95       	ret

0000130a <__fixunssfsi>:
    130a:	0e 94 45 0a 	call	0x148a	; 0x148a <__fp_splitA>
    130e:	88 f0       	brcs	.+34     	; 0x1332 <__fixunssfsi+0x28>
    1310:	9f 57       	subi	r25, 0x7F	; 127
    1312:	98 f0       	brcs	.+38     	; 0x133a <__fixunssfsi+0x30>
    1314:	b9 2f       	mov	r27, r25
    1316:	99 27       	eor	r25, r25
    1318:	b7 51       	subi	r27, 0x17	; 23
    131a:	b0 f0       	brcs	.+44     	; 0x1348 <__fixunssfsi+0x3e>
    131c:	e1 f0       	breq	.+56     	; 0x1356 <__fixunssfsi+0x4c>
    131e:	66 0f       	add	r22, r22
    1320:	77 1f       	adc	r23, r23
    1322:	88 1f       	adc	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	1a f0       	brmi	.+6      	; 0x132e <__fixunssfsi+0x24>
    1328:	ba 95       	dec	r27
    132a:	c9 f7       	brne	.-14     	; 0x131e <__fixunssfsi+0x14>
    132c:	14 c0       	rjmp	.+40     	; 0x1356 <__fixunssfsi+0x4c>
    132e:	b1 30       	cpi	r27, 0x01	; 1
    1330:	91 f0       	breq	.+36     	; 0x1356 <__fixunssfsi+0x4c>
    1332:	0e 94 5f 0a 	call	0x14be	; 0x14be <__fp_zero>
    1336:	b1 e0       	ldi	r27, 0x01	; 1
    1338:	08 95       	ret
    133a:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__fp_zero>
    133e:	67 2f       	mov	r22, r23
    1340:	78 2f       	mov	r23, r24
    1342:	88 27       	eor	r24, r24
    1344:	b8 5f       	subi	r27, 0xF8	; 248
    1346:	39 f0       	breq	.+14     	; 0x1356 <__fixunssfsi+0x4c>
    1348:	b9 3f       	cpi	r27, 0xF9	; 249
    134a:	cc f3       	brlt	.-14     	; 0x133e <__fixunssfsi+0x34>
    134c:	86 95       	lsr	r24
    134e:	77 95       	ror	r23
    1350:	67 95       	ror	r22
    1352:	b3 95       	inc	r27
    1354:	d9 f7       	brne	.-10     	; 0x134c <__fixunssfsi+0x42>
    1356:	3e f4       	brtc	.+14     	; 0x1366 <__fixunssfsi+0x5c>
    1358:	90 95       	com	r25
    135a:	80 95       	com	r24
    135c:	70 95       	com	r23
    135e:	61 95       	neg	r22
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	8f 4f       	sbci	r24, 0xFF	; 255
    1364:	9f 4f       	sbci	r25, 0xFF	; 255
    1366:	08 95       	ret

00001368 <__floatunsisf>:
    1368:	e8 94       	clt
    136a:	09 c0       	rjmp	.+18     	; 0x137e <__floatsisf+0x12>

0000136c <__floatsisf>:
    136c:	97 fb       	bst	r25, 7
    136e:	3e f4       	brtc	.+14     	; 0x137e <__floatsisf+0x12>
    1370:	90 95       	com	r25
    1372:	80 95       	com	r24
    1374:	70 95       	com	r23
    1376:	61 95       	neg	r22
    1378:	7f 4f       	sbci	r23, 0xFF	; 255
    137a:	8f 4f       	sbci	r24, 0xFF	; 255
    137c:	9f 4f       	sbci	r25, 0xFF	; 255
    137e:	99 23       	and	r25, r25
    1380:	a9 f0       	breq	.+42     	; 0x13ac <__floatsisf+0x40>
    1382:	f9 2f       	mov	r31, r25
    1384:	96 e9       	ldi	r25, 0x96	; 150
    1386:	bb 27       	eor	r27, r27
    1388:	93 95       	inc	r25
    138a:	f6 95       	lsr	r31
    138c:	87 95       	ror	r24
    138e:	77 95       	ror	r23
    1390:	67 95       	ror	r22
    1392:	b7 95       	ror	r27
    1394:	f1 11       	cpse	r31, r1
    1396:	f8 cf       	rjmp	.-16     	; 0x1388 <__floatsisf+0x1c>
    1398:	fa f4       	brpl	.+62     	; 0x13d8 <__floatsisf+0x6c>
    139a:	bb 0f       	add	r27, r27
    139c:	11 f4       	brne	.+4      	; 0x13a2 <__floatsisf+0x36>
    139e:	60 ff       	sbrs	r22, 0
    13a0:	1b c0       	rjmp	.+54     	; 0x13d8 <__floatsisf+0x6c>
    13a2:	6f 5f       	subi	r22, 0xFF	; 255
    13a4:	7f 4f       	sbci	r23, 0xFF	; 255
    13a6:	8f 4f       	sbci	r24, 0xFF	; 255
    13a8:	9f 4f       	sbci	r25, 0xFF	; 255
    13aa:	16 c0       	rjmp	.+44     	; 0x13d8 <__floatsisf+0x6c>
    13ac:	88 23       	and	r24, r24
    13ae:	11 f0       	breq	.+4      	; 0x13b4 <__floatsisf+0x48>
    13b0:	96 e9       	ldi	r25, 0x96	; 150
    13b2:	11 c0       	rjmp	.+34     	; 0x13d6 <__floatsisf+0x6a>
    13b4:	77 23       	and	r23, r23
    13b6:	21 f0       	breq	.+8      	; 0x13c0 <__floatsisf+0x54>
    13b8:	9e e8       	ldi	r25, 0x8E	; 142
    13ba:	87 2f       	mov	r24, r23
    13bc:	76 2f       	mov	r23, r22
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <__floatsisf+0x5e>
    13c0:	66 23       	and	r22, r22
    13c2:	71 f0       	breq	.+28     	; 0x13e0 <__floatsisf+0x74>
    13c4:	96 e8       	ldi	r25, 0x86	; 134
    13c6:	86 2f       	mov	r24, r22
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	60 e0       	ldi	r22, 0x00	; 0
    13cc:	2a f0       	brmi	.+10     	; 0x13d8 <__floatsisf+0x6c>
    13ce:	9a 95       	dec	r25
    13d0:	66 0f       	add	r22, r22
    13d2:	77 1f       	adc	r23, r23
    13d4:	88 1f       	adc	r24, r24
    13d6:	da f7       	brpl	.-10     	; 0x13ce <__floatsisf+0x62>
    13d8:	88 0f       	add	r24, r24
    13da:	96 95       	lsr	r25
    13dc:	87 95       	ror	r24
    13de:	97 f9       	bld	r25, 7
    13e0:	08 95       	ret

000013e2 <__fp_cmp>:
    13e2:	99 0f       	add	r25, r25
    13e4:	00 08       	sbc	r0, r0
    13e6:	55 0f       	add	r21, r21
    13e8:	aa 0b       	sbc	r26, r26
    13ea:	e0 e8       	ldi	r30, 0x80	; 128
    13ec:	fe ef       	ldi	r31, 0xFE	; 254
    13ee:	16 16       	cp	r1, r22
    13f0:	17 06       	cpc	r1, r23
    13f2:	e8 07       	cpc	r30, r24
    13f4:	f9 07       	cpc	r31, r25
    13f6:	c0 f0       	brcs	.+48     	; 0x1428 <__fp_cmp+0x46>
    13f8:	12 16       	cp	r1, r18
    13fa:	13 06       	cpc	r1, r19
    13fc:	e4 07       	cpc	r30, r20
    13fe:	f5 07       	cpc	r31, r21
    1400:	98 f0       	brcs	.+38     	; 0x1428 <__fp_cmp+0x46>
    1402:	62 1b       	sub	r22, r18
    1404:	73 0b       	sbc	r23, r19
    1406:	84 0b       	sbc	r24, r20
    1408:	95 0b       	sbc	r25, r21
    140a:	39 f4       	brne	.+14     	; 0x141a <__fp_cmp+0x38>
    140c:	0a 26       	eor	r0, r26
    140e:	61 f0       	breq	.+24     	; 0x1428 <__fp_cmp+0x46>
    1410:	23 2b       	or	r18, r19
    1412:	24 2b       	or	r18, r20
    1414:	25 2b       	or	r18, r21
    1416:	21 f4       	brne	.+8      	; 0x1420 <__fp_cmp+0x3e>
    1418:	08 95       	ret
    141a:	0a 26       	eor	r0, r26
    141c:	09 f4       	brne	.+2      	; 0x1420 <__fp_cmp+0x3e>
    141e:	a1 40       	sbci	r26, 0x01	; 1
    1420:	a6 95       	lsr	r26
    1422:	8f ef       	ldi	r24, 0xFF	; 255
    1424:	81 1d       	adc	r24, r1
    1426:	81 1d       	adc	r24, r1
    1428:	08 95       	ret

0000142a <__fp_inf>:
    142a:	97 f9       	bld	r25, 7
    142c:	9f 67       	ori	r25, 0x7F	; 127
    142e:	80 e8       	ldi	r24, 0x80	; 128
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	08 95       	ret

00001436 <__fp_nan>:
    1436:	9f ef       	ldi	r25, 0xFF	; 255
    1438:	80 ec       	ldi	r24, 0xC0	; 192
    143a:	08 95       	ret

0000143c <__fp_pscA>:
    143c:	00 24       	eor	r0, r0
    143e:	0a 94       	dec	r0
    1440:	16 16       	cp	r1, r22
    1442:	17 06       	cpc	r1, r23
    1444:	18 06       	cpc	r1, r24
    1446:	09 06       	cpc	r0, r25
    1448:	08 95       	ret

0000144a <__fp_pscB>:
    144a:	00 24       	eor	r0, r0
    144c:	0a 94       	dec	r0
    144e:	12 16       	cp	r1, r18
    1450:	13 06       	cpc	r1, r19
    1452:	14 06       	cpc	r1, r20
    1454:	05 06       	cpc	r0, r21
    1456:	08 95       	ret

00001458 <__fp_round>:
    1458:	09 2e       	mov	r0, r25
    145a:	03 94       	inc	r0
    145c:	00 0c       	add	r0, r0
    145e:	11 f4       	brne	.+4      	; 0x1464 <__fp_round+0xc>
    1460:	88 23       	and	r24, r24
    1462:	52 f0       	brmi	.+20     	; 0x1478 <__fp_round+0x20>
    1464:	bb 0f       	add	r27, r27
    1466:	40 f4       	brcc	.+16     	; 0x1478 <__fp_round+0x20>
    1468:	bf 2b       	or	r27, r31
    146a:	11 f4       	brne	.+4      	; 0x1470 <__fp_round+0x18>
    146c:	60 ff       	sbrs	r22, 0
    146e:	04 c0       	rjmp	.+8      	; 0x1478 <__fp_round+0x20>
    1470:	6f 5f       	subi	r22, 0xFF	; 255
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	8f 4f       	sbci	r24, 0xFF	; 255
    1476:	9f 4f       	sbci	r25, 0xFF	; 255
    1478:	08 95       	ret

0000147a <__fp_split3>:
    147a:	57 fd       	sbrc	r21, 7
    147c:	90 58       	subi	r25, 0x80	; 128
    147e:	44 0f       	add	r20, r20
    1480:	55 1f       	adc	r21, r21
    1482:	59 f0       	breq	.+22     	; 0x149a <__fp_splitA+0x10>
    1484:	5f 3f       	cpi	r21, 0xFF	; 255
    1486:	71 f0       	breq	.+28     	; 0x14a4 <__fp_splitA+0x1a>
    1488:	47 95       	ror	r20

0000148a <__fp_splitA>:
    148a:	88 0f       	add	r24, r24
    148c:	97 fb       	bst	r25, 7
    148e:	99 1f       	adc	r25, r25
    1490:	61 f0       	breq	.+24     	; 0x14aa <__fp_splitA+0x20>
    1492:	9f 3f       	cpi	r25, 0xFF	; 255
    1494:	79 f0       	breq	.+30     	; 0x14b4 <__fp_splitA+0x2a>
    1496:	87 95       	ror	r24
    1498:	08 95       	ret
    149a:	12 16       	cp	r1, r18
    149c:	13 06       	cpc	r1, r19
    149e:	14 06       	cpc	r1, r20
    14a0:	55 1f       	adc	r21, r21
    14a2:	f2 cf       	rjmp	.-28     	; 0x1488 <__fp_split3+0xe>
    14a4:	46 95       	lsr	r20
    14a6:	f1 df       	rcall	.-30     	; 0x148a <__fp_splitA>
    14a8:	08 c0       	rjmp	.+16     	; 0x14ba <__fp_splitA+0x30>
    14aa:	16 16       	cp	r1, r22
    14ac:	17 06       	cpc	r1, r23
    14ae:	18 06       	cpc	r1, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	f1 cf       	rjmp	.-30     	; 0x1496 <__fp_splitA+0xc>
    14b4:	86 95       	lsr	r24
    14b6:	71 05       	cpc	r23, r1
    14b8:	61 05       	cpc	r22, r1
    14ba:	08 94       	sec
    14bc:	08 95       	ret

000014be <__fp_zero>:
    14be:	e8 94       	clt

000014c0 <__fp_szero>:
    14c0:	bb 27       	eor	r27, r27
    14c2:	66 27       	eor	r22, r22
    14c4:	77 27       	eor	r23, r23
    14c6:	cb 01       	movw	r24, r22
    14c8:	97 f9       	bld	r25, 7
    14ca:	08 95       	ret

000014cc <__gesf2>:
    14cc:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_cmp>
    14d0:	08 f4       	brcc	.+2      	; 0x14d4 <__gesf2+0x8>
    14d2:	8f ef       	ldi	r24, 0xFF	; 255
    14d4:	08 95       	ret

000014d6 <__mulsf3>:
    14d6:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__mulsf3x>
    14da:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__fp_round>
    14de:	0e 94 1e 0a 	call	0x143c	; 0x143c <__fp_pscA>
    14e2:	38 f0       	brcs	.+14     	; 0x14f2 <__mulsf3+0x1c>
    14e4:	0e 94 25 0a 	call	0x144a	; 0x144a <__fp_pscB>
    14e8:	20 f0       	brcs	.+8      	; 0x14f2 <__mulsf3+0x1c>
    14ea:	95 23       	and	r25, r21
    14ec:	11 f0       	breq	.+4      	; 0x14f2 <__mulsf3+0x1c>
    14ee:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__fp_inf>
    14f2:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__fp_nan>
    14f6:	11 24       	eor	r1, r1
    14f8:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__fp_szero>

000014fc <__mulsf3x>:
    14fc:	0e 94 3d 0a 	call	0x147a	; 0x147a <__fp_split3>
    1500:	70 f3       	brcs	.-36     	; 0x14de <__mulsf3+0x8>

00001502 <__mulsf3_pse>:
    1502:	95 9f       	mul	r25, r21
    1504:	c1 f3       	breq	.-16     	; 0x14f6 <__mulsf3+0x20>
    1506:	95 0f       	add	r25, r21
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	55 1f       	adc	r21, r21
    150c:	62 9f       	mul	r22, r18
    150e:	f0 01       	movw	r30, r0
    1510:	72 9f       	mul	r23, r18
    1512:	bb 27       	eor	r27, r27
    1514:	f0 0d       	add	r31, r0
    1516:	b1 1d       	adc	r27, r1
    1518:	63 9f       	mul	r22, r19
    151a:	aa 27       	eor	r26, r26
    151c:	f0 0d       	add	r31, r0
    151e:	b1 1d       	adc	r27, r1
    1520:	aa 1f       	adc	r26, r26
    1522:	64 9f       	mul	r22, r20
    1524:	66 27       	eor	r22, r22
    1526:	b0 0d       	add	r27, r0
    1528:	a1 1d       	adc	r26, r1
    152a:	66 1f       	adc	r22, r22
    152c:	82 9f       	mul	r24, r18
    152e:	22 27       	eor	r18, r18
    1530:	b0 0d       	add	r27, r0
    1532:	a1 1d       	adc	r26, r1
    1534:	62 1f       	adc	r22, r18
    1536:	73 9f       	mul	r23, r19
    1538:	b0 0d       	add	r27, r0
    153a:	a1 1d       	adc	r26, r1
    153c:	62 1f       	adc	r22, r18
    153e:	83 9f       	mul	r24, r19
    1540:	a0 0d       	add	r26, r0
    1542:	61 1d       	adc	r22, r1
    1544:	22 1f       	adc	r18, r18
    1546:	74 9f       	mul	r23, r20
    1548:	33 27       	eor	r19, r19
    154a:	a0 0d       	add	r26, r0
    154c:	61 1d       	adc	r22, r1
    154e:	23 1f       	adc	r18, r19
    1550:	84 9f       	mul	r24, r20
    1552:	60 0d       	add	r22, r0
    1554:	21 1d       	adc	r18, r1
    1556:	82 2f       	mov	r24, r18
    1558:	76 2f       	mov	r23, r22
    155a:	6a 2f       	mov	r22, r26
    155c:	11 24       	eor	r1, r1
    155e:	9f 57       	subi	r25, 0x7F	; 127
    1560:	50 40       	sbci	r21, 0x00	; 0
    1562:	9a f0       	brmi	.+38     	; 0x158a <__mulsf3_pse+0x88>
    1564:	f1 f0       	breq	.+60     	; 0x15a2 <__mulsf3_pse+0xa0>
    1566:	88 23       	and	r24, r24
    1568:	4a f0       	brmi	.+18     	; 0x157c <__mulsf3_pse+0x7a>
    156a:	ee 0f       	add	r30, r30
    156c:	ff 1f       	adc	r31, r31
    156e:	bb 1f       	adc	r27, r27
    1570:	66 1f       	adc	r22, r22
    1572:	77 1f       	adc	r23, r23
    1574:	88 1f       	adc	r24, r24
    1576:	91 50       	subi	r25, 0x01	; 1
    1578:	50 40       	sbci	r21, 0x00	; 0
    157a:	a9 f7       	brne	.-22     	; 0x1566 <__mulsf3_pse+0x64>
    157c:	9e 3f       	cpi	r25, 0xFE	; 254
    157e:	51 05       	cpc	r21, r1
    1580:	80 f0       	brcs	.+32     	; 0x15a2 <__mulsf3_pse+0xa0>
    1582:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__fp_inf>
    1586:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__fp_szero>
    158a:	5f 3f       	cpi	r21, 0xFF	; 255
    158c:	e4 f3       	brlt	.-8      	; 0x1586 <__mulsf3_pse+0x84>
    158e:	98 3e       	cpi	r25, 0xE8	; 232
    1590:	d4 f3       	brlt	.-12     	; 0x1586 <__mulsf3_pse+0x84>
    1592:	86 95       	lsr	r24
    1594:	77 95       	ror	r23
    1596:	67 95       	ror	r22
    1598:	b7 95       	ror	r27
    159a:	f7 95       	ror	r31
    159c:	e7 95       	ror	r30
    159e:	9f 5f       	subi	r25, 0xFF	; 255
    15a0:	c1 f7       	brne	.-16     	; 0x1592 <__mulsf3_pse+0x90>
    15a2:	fe 2b       	or	r31, r30
    15a4:	88 0f       	add	r24, r24
    15a6:	91 1d       	adc	r25, r1
    15a8:	96 95       	lsr	r25
    15aa:	87 95       	ror	r24
    15ac:	97 f9       	bld	r25, 7
    15ae:	08 95       	ret

000015b0 <_exit>:
    15b0:	f8 94       	cli

000015b2 <__stop_program>:
    15b2:	ff cf       	rjmp	.-2      	; 0x15b2 <__stop_program>
