
Actuator_2k18.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000014ea  0000157e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000187  00800100  00800100  0000157e  2**0
                  ALLOC
  3 .stab         00002184  00000000  00000000  00001580  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000142d  00000000  00000000  00003704  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004b31  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004b44  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      54:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_21>
      58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      70:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      74:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      7c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      80:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__vector_32>
      84:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      88:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__vector_34>
      8c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      90:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
      a0:	22 e0       	ldi	r18, 0x02	; 2
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	a7 38       	cpi	r26, 0x87	; 135
      ac:	b2 07       	cpc	r27, r18
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
      b0:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <main>
      b4:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <_exit>

000000b8 <__bad_interrupt>:
      b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <ax_convert_to16>:

#include <stdio.h>
#include "ax.h"
#include "dynamixel.h"

static uint16_t ax_convert_to16(int angle)   		   { return (65535 * angle) / 300;     }
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
      c0:	00 d0       	rcall	.+0      	; 0xc2 <ax_convert_to16+0x6>
      c2:	00 d0       	rcall	.+0      	; 0xc4 <ax_convert_to16+0x8>
      c4:	00 d0       	rcall	.+0      	; 0xc6 <ax_convert_to16+0xa>
      c6:	cd b7       	in	r28, 0x3d	; 61
      c8:	de b7       	in	r29, 0x3e	; 62
      ca:	9a 83       	std	Y+2, r25	; 0x02
      cc:	89 83       	std	Y+1, r24	; 0x01
      ce:	89 81       	ldd	r24, Y+1	; 0x01
      d0:	9a 81       	ldd	r25, Y+2	; 0x02
      d2:	9c 01       	movw	r18, r24
      d4:	99 0f       	add	r25, r25
      d6:	44 0b       	sbc	r20, r20
      d8:	55 0b       	sbc	r21, r21
      da:	8f ef       	ldi	r24, 0xFF	; 255
      dc:	9f ef       	ldi	r25, 0xFF	; 255
      de:	dc 01       	movw	r26, r24
      e0:	0e 94 00 08 	call	0x1000	; 0x1000 <__muluhisi3>
      e4:	dc 01       	movw	r26, r24
      e6:	cb 01       	movw	r24, r22
      e8:	2c e2       	ldi	r18, 0x2C	; 44
      ea:	31 e0       	ldi	r19, 0x01	; 1
      ec:	40 e0       	ldi	r20, 0x00	; 0
      ee:	50 e0       	ldi	r21, 0x00	; 0
      f0:	bc 01       	movw	r22, r24
      f2:	cd 01       	movw	r24, r26
      f4:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__divmodsi4>
      f8:	da 01       	movw	r26, r20
      fa:	c9 01       	movw	r24, r18
      fc:	26 96       	adiw	r28, 0x06	; 6
      fe:	0f b6       	in	r0, 0x3f	; 63
     100:	f8 94       	cli
     102:	de bf       	out	0x3e, r29	; 62
     104:	0f be       	out	0x3f, r0	; 63
     106:	cd bf       	out	0x3d, r28	; 61
     108:	df 91       	pop	r29
     10a:	cf 91       	pop	r28
     10c:	08 95       	ret

0000010e <ax_convert_toangle>:
static int 		ax_convert_toangle(uint16_t angle_bit) { return (angle_bit * 300) / 65535; }
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	00 d0       	rcall	.+0      	; 0x114 <ax_convert_toangle+0x6>
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	9a 83       	std	Y+2, r25	; 0x02
     11a:	89 83       	std	Y+1, r24	; 0x01
     11c:	49 81       	ldd	r20, Y+1	; 0x01
     11e:	5a 81       	ldd	r21, Y+2	; 0x02
     120:	2c e2       	ldi	r18, 0x2C	; 44
     122:	31 e0       	ldi	r19, 0x01	; 1
     124:	42 9f       	mul	r20, r18
     126:	c0 01       	movw	r24, r0
     128:	43 9f       	mul	r20, r19
     12a:	90 0d       	add	r25, r0
     12c:	52 9f       	mul	r21, r18
     12e:	90 0d       	add	r25, r0
     130:	11 24       	eor	r1, r1
     132:	21 e0       	ldi	r18, 0x01	; 1
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	8f 3f       	cpi	r24, 0xFF	; 255
     138:	9f 4f       	sbci	r25, 0xFF	; 255
     13a:	10 f4       	brcc	.+4      	; 0x140 <ax_convert_toangle+0x32>
     13c:	20 e0       	ldi	r18, 0x00	; 0
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	c9 01       	movw	r24, r18
     142:	0f 90       	pop	r0
     144:	0f 90       	pop	r0
     146:	df 91       	pop	r29
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <ax_set_angle>:

uint8_t ax_set_angle(uint8_t id, int angle, uint16_t speed) {
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
     154:	27 97       	sbiw	r28, 0x07	; 7
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	cd bf       	out	0x3d, r28	; 61
     160:	8b 83       	std	Y+3, r24	; 0x03
     162:	7d 83       	std	Y+5, r23	; 0x05
     164:	6c 83       	std	Y+4, r22	; 0x04
     166:	5f 83       	std	Y+7, r21	; 0x07
     168:	4e 83       	std	Y+6, r20	; 0x06
	uint16_t ax_speed = ax_convert_to16(angle);
     16a:	8c 81       	ldd	r24, Y+4	; 0x04
     16c:	9d 81       	ldd	r25, Y+5	; 0x05
     16e:	0e 94 5e 00 	call	0xbc	; 0xbc <ax_convert_to16>
     172:	9a 83       	std	Y+2, r25	; 0x02
     174:	89 83       	std	Y+1, r24	; 0x01
	if(dynamixel_writeword(id, AX_GOAL_SPEED_L, ax_speed) == DYNAMIXEL_SUCCESS && dynamixel_writeword(id, AX_GOAL_POSITION_L, angle) == DYNAMIXEL_SUCCESS)
     176:	89 81       	ldd	r24, Y+1	; 0x01
     178:	9a 81       	ldd	r25, Y+2	; 0x02
     17a:	ac 01       	movw	r20, r24
     17c:	60 e2       	ldi	r22, 0x20	; 32
     17e:	8b 81       	ldd	r24, Y+3	; 0x03
     180:	0e 94 1a 05 	call	0xa34	; 0xa34 <dynamixel_writeword>
     184:	81 30       	cpi	r24, 0x01	; 1
     186:	59 f4       	brne	.+22     	; 0x19e <ax_set_angle+0x52>
     188:	8c 81       	ldd	r24, Y+4	; 0x04
     18a:	9d 81       	ldd	r25, Y+5	; 0x05
     18c:	ac 01       	movw	r20, r24
     18e:	6e e1       	ldi	r22, 0x1E	; 30
     190:	8b 81       	ldd	r24, Y+3	; 0x03
     192:	0e 94 1a 05 	call	0xa34	; 0xa34 <dynamixel_writeword>
     196:	81 30       	cpi	r24, 0x01	; 1
     198:	11 f4       	brne	.+4      	; 0x19e <ax_set_angle+0x52>
		return 1;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	01 c0       	rjmp	.+2      	; 0x1a0 <ax_set_angle+0x54>
	else
		return 0;
     19e:	80 e0       	ldi	r24, 0x00	; 0
}
     1a0:	27 96       	adiw	r28, 0x07	; 7
     1a2:	0f b6       	in	r0, 0x3f	; 63
     1a4:	f8 94       	cli
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	0f be       	out	0x3f, r0	; 63
     1aa:	cd bf       	out	0x3d, r28	; 61
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <ax_get_angle>:

int ax_get_angle(uint8_t id) {
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <ax_get_angle+0x6>
     1b8:	1f 92       	push	r1
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t present_angle;
	if(dynamixel_readword(id, AX_PRESENT_POSITION_L, &present_angle) == DYNAMIXEL_SUCCESS)
     1c0:	ce 01       	movw	r24, r28
     1c2:	01 96       	adiw	r24, 0x01	; 1
     1c4:	ac 01       	movw	r20, r24
     1c6:	64 e2       	ldi	r22, 0x24	; 36
     1c8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ca:	0e 94 62 04 	call	0x8c4	; 0x8c4 <dynamixel_readword>
     1ce:	81 30       	cpi	r24, 0x01	; 1
     1d0:	29 f4       	brne	.+10     	; 0x1dc <ax_get_angle+0x2a>
		return ax_convert_toangle(present_angle);
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	9a 81       	ldd	r25, Y+2	; 0x02
     1d6:	0e 94 87 00 	call	0x10e	; 0x10e <ax_convert_toangle>
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <ax_get_angle+0x2e>
	else
		return 0;
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e0       	ldi	r25, 0x00	; 0
}
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	08 95       	ret

000001ec <ax_check_moving>:

uint8_t ax_check_moving(uint8_t id) {
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	00 d0       	rcall	.+0      	; 0x1f2 <ax_check_moving+0x6>
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
     1f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t moving_status;
	if(dynamixel_readbyte(id, AX_MOVING, &moving_status) == DYNAMIXEL_SUCCESS)
     1f8:	ce 01       	movw	r24, r28
     1fa:	01 96       	adiw	r24, 0x01	; 1
     1fc:	ac 01       	movw	r20, r24
     1fe:	6e e2       	ldi	r22, 0x2E	; 46
     200:	8a 81       	ldd	r24, Y+2	; 0x02
     202:	0e 94 2f 04 	call	0x85e	; 0x85e <dynamixel_readbyte>
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	11 f4       	brne	.+4      	; 0x20e <ax_check_moving+0x22>
		return moving_status;
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	01 c0       	rjmp	.+2      	; 0x210 <ax_check_moving+0x24>
	else
		return 0;
     20e:	80 e0       	ldi	r24, 0x00	; 0
}
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	08 95       	ret

0000021a <ax_check_temperature>:

uint8_t ax_check_temperature(uint8_t id) {
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	00 d0       	rcall	.+0      	; 0x220 <ax_check_temperature+0x6>
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
     224:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t temperature_status;
	if(dynamixel_readbyte(id, AX_PRESENT_VOLTAGE, &temperature_status) == DYNAMIXEL_SUCCESS)
     226:	ce 01       	movw	r24, r28
     228:	01 96       	adiw	r24, 0x01	; 1
     22a:	ac 01       	movw	r20, r24
     22c:	6a e2       	ldi	r22, 0x2A	; 42
     22e:	8a 81       	ldd	r24, Y+2	; 0x02
     230:	0e 94 2f 04 	call	0x85e	; 0x85e <dynamixel_readbyte>
     234:	81 30       	cpi	r24, 0x01	; 1
     236:	11 f4       	brne	.+4      	; 0x23c <ax_check_temperature+0x22>
		return temperature_status;
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	01 c0       	rjmp	.+2      	; 0x23e <ax_check_temperature+0x24>
	else
		return 0;
     23c:	80 e0       	ldi	r24, 0x00	; 0
}
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	df 91       	pop	r29
     244:	cf 91       	pop	r28
     246:	08 95       	ret

00000248 <ax_check_voltage>:

uint8_t ax_check_voltage(uint8_t id) {
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	00 d0       	rcall	.+0      	; 0x24e <ax_check_voltage+0x6>
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
     252:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t voltage_status;
	if(dynamixel_readbyte(id, AX_PRESENT_VOLTAGE, &voltage_status) == DYNAMIXEL_SUCCESS)
     254:	ce 01       	movw	r24, r28
     256:	01 96       	adiw	r24, 0x01	; 1
     258:	ac 01       	movw	r20, r24
     25a:	6a e2       	ldi	r22, 0x2A	; 42
     25c:	8a 81       	ldd	r24, Y+2	; 0x02
     25e:	0e 94 2f 04 	call	0x85e	; 0x85e <dynamixel_readbyte>
     262:	81 30       	cpi	r24, 0x01	; 1
     264:	11 f4       	brne	.+4      	; 0x26a <ax_check_voltage+0x22>
		return voltage_status;
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	01 c0       	rjmp	.+2      	; 0x26c <ax_check_voltage+0x24>
	else
		return 0;
     26a:	80 e0       	ldi	r24, 0x00	; 0
}
     26c:	0f 90       	pop	r0
     26e:	0f 90       	pop	r0
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	08 95       	ret

00000276 <__vector_21>:
volatile uint8_t dynamixel_txpacket[DYNAMIXEL_PACKET_SIZE];
volatile uint8_t dynamixel_rxpacket[DYNAMIXEL_PACKET_SIZE];
volatile uint8_t dynamixel_rxindex = 0;

ISR(USART0_RX_vect)
{
     276:	1f 92       	push	r1
     278:	0f 92       	push	r0
     27a:	00 90 5f 00 	lds	r0, 0x005F
     27e:	0f 92       	push	r0
     280:	11 24       	eor	r1, r1
     282:	00 90 5b 00 	lds	r0, 0x005B
     286:	0f 92       	push	r0
     288:	2f 93       	push	r18
     28a:	3f 93       	push	r19
     28c:	8f 93       	push	r24
     28e:	9f 93       	push	r25
     290:	ef 93       	push	r30
     292:	ff 93       	push	r31
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
	dynamixel_rxpacket[dynamixel_rxindex++] = UDR0;
     29c:	80 91 00 01 	lds	r24, 0x0100
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	98 0f       	add	r25, r24
     2a4:	90 93 00 01 	sts	0x0100, r25
     2a8:	88 2f       	mov	r24, r24
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	26 ec       	ldi	r18, 0xC6	; 198
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	f9 01       	movw	r30, r18
     2b2:	20 81       	ld	r18, Z
     2b4:	89 5f       	subi	r24, 0xF9	; 249
     2b6:	9d 4f       	sbci	r25, 0xFD	; 253
     2b8:	fc 01       	movw	r30, r24
     2ba:	20 83       	st	Z, r18
}
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	ff 91       	pop	r31
     2c2:	ef 91       	pop	r30
     2c4:	9f 91       	pop	r25
     2c6:	8f 91       	pop	r24
     2c8:	3f 91       	pop	r19
     2ca:	2f 91       	pop	r18
     2cc:	0f 90       	pop	r0
     2ce:	00 92 5b 00 	sts	0x005B, r0
     2d2:	0f 90       	pop	r0
     2d4:	00 92 5f 00 	sts	0x005F, r0
     2d8:	0f 90       	pop	r0
     2da:	1f 90       	pop	r1
     2dc:	18 95       	reti

000002de <dynamixel_init>:

void dynamixel_init(double baud)
{
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <dynamixel_init+0x6>
     2e4:	00 d0       	rcall	.+0      	; 0x2e6 <dynamixel_init+0x8>
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	69 83       	std	Y+1, r22	; 0x01
     2ec:	7a 83       	std	Y+2, r23	; 0x02
     2ee:	8b 83       	std	Y+3, r24	; 0x03
     2f0:	9c 83       	std	Y+4, r25	; 0x04
	// Set UART baudrate
	UBRR0H = ((F_CPU / 8 + DYNAMIXEL_BAUDRATE / 2) / DYNAMIXEL_BAUDRATE - 1) >> 8;
     2f2:	85 ec       	ldi	r24, 0xC5	; 197
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	fc 01       	movw	r30, r24
     2f8:	10 82       	st	Z, r1
	UBRR0L = ((F_CPU / 8 + DYNAMIXEL_BAUDRATE / 2) / DYNAMIXEL_BAUDRATE - 1);
     2fa:	84 ec       	ldi	r24, 0xC4	; 196
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	25 e0       	ldi	r18, 0x05	; 5
     300:	fc 01       	movw	r30, r24
     302:	20 83       	st	Z, r18

	// Enable UART TX, RX, and RX interrupt
	UCSR0B |= (1 << TXEN0);
     304:	81 ec       	ldi	r24, 0xC1	; 193
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	21 ec       	ldi	r18, 0xC1	; 193
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	f9 01       	movw	r30, r18
     30e:	20 81       	ld	r18, Z
     310:	28 60       	ori	r18, 0x08	; 8
     312:	fc 01       	movw	r30, r24
     314:	20 83       	st	Z, r18
	UCSR0B |= (1 << RXEN0);
     316:	81 ec       	ldi	r24, 0xC1	; 193
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	21 ec       	ldi	r18, 0xC1	; 193
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	f9 01       	movw	r30, r18
     320:	20 81       	ld	r18, Z
     322:	20 61       	ori	r18, 0x10	; 16
     324:	fc 01       	movw	r30, r24
     326:	20 83       	st	Z, r18
	UCSR0B |= (1 << RXCIE0);
     328:	81 ec       	ldi	r24, 0xC1	; 193
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	21 ec       	ldi	r18, 0xC1	; 193
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	f9 01       	movw	r30, r18
     332:	20 81       	ld	r18, Z
     334:	20 68       	ori	r18, 0x80	; 128
     336:	fc 01       	movw	r30, r24
     338:	20 83       	st	Z, r18

	// Set UART direction pins as outputs
	DDRD |= (1 << PD2);
     33a:	8a e2       	ldi	r24, 0x2A	; 42
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	2a e2       	ldi	r18, 0x2A	; 42
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	f9 01       	movw	r30, r18
     344:	20 81       	ld	r18, Z
     346:	24 60       	ori	r18, 0x04	; 4
     348:	fc 01       	movw	r30, r24
     34a:	20 83       	st	Z, r18
	DDRD |= (1 << PD3);
     34c:	8a e2       	ldi	r24, 0x2A	; 42
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	2a e2       	ldi	r18, 0x2A	; 42
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	f9 01       	movw	r30, r18
     356:	20 81       	ld	r18, Z
     358:	28 60       	ori	r18, 0x08	; 8
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18

	// Reset rx index
	dynamixel_rxindex = 0;
     35e:	10 92 00 01 	sts	0x0100, r1
}
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <dynamixel_settx>:

void dynamixel_settx(void)
{
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
	// Set UART direction pins
	PORTD |= (1 << PD2);
     378:	8b e2       	ldi	r24, 0x2B	; 43
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	2b e2       	ldi	r18, 0x2B	; 43
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	f9 01       	movw	r30, r18
     382:	20 81       	ld	r18, Z
     384:	24 60       	ori	r18, 0x04	; 4
     386:	fc 01       	movw	r30, r24
     388:	20 83       	st	Z, r18
	PORTD &= ~(1 << PD3);
     38a:	8b e2       	ldi	r24, 0x2B	; 43
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	2b e2       	ldi	r18, 0x2B	; 43
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	f9 01       	movw	r30, r18
     394:	20 81       	ld	r18, Z
     396:	27 7f       	andi	r18, 0xF7	; 247
     398:	fc 01       	movw	r30, r24
     39a:	20 83       	st	Z, r18

	//UCSR0B |= (1 << TXEN0);
	//UCSR0B &= ~(1 << RXEN0);
	//UCSR0B &= ~(1 << RXCIE0);
}
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	08 95       	ret

000003a2 <dynamixel_setrx>:

void dynamixel_setrx(void)
{
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
     3aa:	a0 97       	sbiw	r28, 0x20	; 32
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	f8 94       	cli
     3b0:	de bf       	out	0x3e, r29	; 62
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	cd bf       	out	0x3d, r28	; 61
	// Wait for TX complete flag before turning the bus around
	while(bit_is_clear(UCSR0A, TXC0));
     3b6:	00 00       	nop
     3b8:	80 ec       	ldi	r24, 0xC0	; 192
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	fc 01       	movw	r30, r24
     3be:	80 81       	ld	r24, Z
     3c0:	88 2f       	mov	r24, r24
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	80 74       	andi	r24, 0x40	; 64
     3c6:	99 27       	eor	r25, r25
     3c8:	89 2b       	or	r24, r25
     3ca:	b1 f3       	breq	.-20     	; 0x3b8 <dynamixel_setrx+0x16>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	a0 e8       	ldi	r26, 0x80	; 128
     3d2:	bf e3       	ldi	r27, 0x3F	; 63
     3d4:	89 83       	std	Y+1, r24	; 0x01
     3d6:	9a 83       	std	Y+2, r25	; 0x02
     3d8:	ab 83       	std	Y+3, r26	; 0x03
     3da:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     3dc:	2a ef       	ldi	r18, 0xFA	; 250
     3de:	3d ee       	ldi	r19, 0xED	; 237
     3e0:	4b e6       	ldi	r20, 0x6B	; 107
     3e2:	50 e4       	ldi	r21, 0x40	; 64
     3e4:	69 81       	ldd	r22, Y+1	; 0x01
     3e6:	7a 81       	ldd	r23, Y+2	; 0x02
     3e8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ea:	9c 81       	ldd	r25, Y+4	; 0x04
     3ec:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     3f0:	dc 01       	movw	r26, r24
     3f2:	cb 01       	movw	r24, r22
     3f4:	8d 83       	std	Y+5, r24	; 0x05
     3f6:	9e 83       	std	Y+6, r25	; 0x06
     3f8:	af 83       	std	Y+7, r26	; 0x07
     3fa:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     3fc:	2c e7       	ldi	r18, 0x7C	; 124
     3fe:	32 ef       	ldi	r19, 0xF2	; 242
     400:	40 e3       	ldi	r20, 0x30	; 48
     402:	50 e4       	ldi	r21, 0x40	; 64
     404:	69 81       	ldd	r22, Y+1	; 0x01
     406:	7a 81       	ldd	r23, Y+2	; 0x02
     408:	8b 81       	ldd	r24, Y+3	; 0x03
     40a:	9c 81       	ldd	r25, Y+4	; 0x04
     40c:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     410:	dc 01       	movw	r26, r24
     412:	cb 01       	movw	r24, r22
     414:	89 87       	std	Y+9, r24	; 0x09
     416:	9a 87       	std	Y+10, r25	; 0x0a
     418:	ab 87       	std	Y+11, r26	; 0x0b
     41a:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	40 e8       	ldi	r20, 0x80	; 128
     422:	5f e3       	ldi	r21, 0x3F	; 63
     424:	6d 81       	ldd	r22, Y+5	; 0x05
     426:	7e 81       	ldd	r23, Y+6	; 0x06
     428:	8f 81       	ldd	r24, Y+7	; 0x07
     42a:	98 85       	ldd	r25, Y+8	; 0x08
     42c:	0e 94 a9 08 	call	0x1152	; 0x1152 <__cmpsf2>
     430:	88 23       	and	r24, r24
     432:	1c f4       	brge	.+6      	; 0x43a <dynamixel_setrx+0x98>
		__ticks = 1;
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	8d 87       	std	Y+13, r24	; 0x0d
     438:	b2 c0       	rjmp	.+356    	; 0x59e <dynamixel_setrx+0x1fc>
	else if (__tmp2 > 65535)
     43a:	20 e0       	ldi	r18, 0x00	; 0
     43c:	3f ef       	ldi	r19, 0xFF	; 255
     43e:	4f e7       	ldi	r20, 0x7F	; 127
     440:	57 e4       	ldi	r21, 0x47	; 71
     442:	69 85       	ldd	r22, Y+9	; 0x09
     444:	7a 85       	ldd	r23, Y+10	; 0x0a
     446:	8b 85       	ldd	r24, Y+11	; 0x0b
     448:	9c 85       	ldd	r25, Y+12	; 0x0c
     44a:	0e 94 01 0a 	call	0x1402	; 0x1402 <__gesf2>
     44e:	18 16       	cp	r1, r24
     450:	0c f0       	brlt	.+2      	; 0x454 <dynamixel_setrx+0xb2>
     452:	7b c0       	rjmp	.+246    	; 0x54a <dynamixel_setrx+0x1a8>
	{
		_delay_ms(__us / 1000.0);
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	4a e7       	ldi	r20, 0x7A	; 122
     45a:	54 e4       	ldi	r21, 0x44	; 68
     45c:	69 81       	ldd	r22, Y+1	; 0x01
     45e:	7a 81       	ldd	r23, Y+2	; 0x02
     460:	8b 81       	ldd	r24, Y+3	; 0x03
     462:	9c 81       	ldd	r25, Y+4	; 0x04
     464:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3>
     468:	dc 01       	movw	r26, r24
     46a:	cb 01       	movw	r24, r22
     46c:	8e 87       	std	Y+14, r24	; 0x0e
     46e:	9f 87       	std	Y+15, r25	; 0x0f
     470:	a8 8b       	std	Y+16, r26	; 0x10
     472:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     474:	2d ec       	ldi	r18, 0xCD	; 205
     476:	3c ec       	ldi	r19, 0xCC	; 204
     478:	4c e2       	ldi	r20, 0x2C	; 44
     47a:	55 e4       	ldi	r21, 0x45	; 69
     47c:	6e 85       	ldd	r22, Y+14	; 0x0e
     47e:	7f 85       	ldd	r23, Y+15	; 0x0f
     480:	88 89       	ldd	r24, Y+16	; 0x10
     482:	99 89       	ldd	r25, Y+17	; 0x11
     484:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     488:	dc 01       	movw	r26, r24
     48a:	cb 01       	movw	r24, r22
     48c:	8a 8b       	std	Y+18, r24	; 0x12
     48e:	9b 8b       	std	Y+19, r25	; 0x13
     490:	ac 8b       	std	Y+20, r26	; 0x14
     492:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e8       	ldi	r20, 0x80	; 128
     49a:	5f e3       	ldi	r21, 0x3F	; 63
     49c:	6a 89       	ldd	r22, Y+18	; 0x12
     49e:	7b 89       	ldd	r23, Y+19	; 0x13
     4a0:	8c 89       	ldd	r24, Y+20	; 0x14
     4a2:	9d 89       	ldd	r25, Y+21	; 0x15
     4a4:	0e 94 a9 08 	call	0x1152	; 0x1152 <__cmpsf2>
     4a8:	88 23       	and	r24, r24
     4aa:	2c f4       	brge	.+10     	; 0x4b6 <dynamixel_setrx+0x114>
		__ticks = 1;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	9f 8b       	std	Y+23, r25	; 0x17
     4b2:	8e 8b       	std	Y+22, r24	; 0x16
     4b4:	3f c0       	rjmp	.+126    	; 0x534 <dynamixel_setrx+0x192>
	else if (__tmp > 65535)
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	3f ef       	ldi	r19, 0xFF	; 255
     4ba:	4f e7       	ldi	r20, 0x7F	; 127
     4bc:	57 e4       	ldi	r21, 0x47	; 71
     4be:	6a 89       	ldd	r22, Y+18	; 0x12
     4c0:	7b 89       	ldd	r23, Y+19	; 0x13
     4c2:	8c 89       	ldd	r24, Y+20	; 0x14
     4c4:	9d 89       	ldd	r25, Y+21	; 0x15
     4c6:	0e 94 01 0a 	call	0x1402	; 0x1402 <__gesf2>
     4ca:	18 16       	cp	r1, r24
     4cc:	4c f5       	brge	.+82     	; 0x520 <dynamixel_setrx+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	40 e2       	ldi	r20, 0x20	; 32
     4d4:	51 e4       	ldi	r21, 0x41	; 65
     4d6:	6e 85       	ldd	r22, Y+14	; 0x0e
     4d8:	7f 85       	ldd	r23, Y+15	; 0x0f
     4da:	88 89       	ldd	r24, Y+16	; 0x10
     4dc:	99 89       	ldd	r25, Y+17	; 0x11
     4de:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     4e2:	dc 01       	movw	r26, r24
     4e4:	cb 01       	movw	r24, r22
     4e6:	bc 01       	movw	r22, r24
     4e8:	cd 01       	movw	r24, r26
     4ea:	0e 94 20 09 	call	0x1240	; 0x1240 <__fixunssfsi>
     4ee:	dc 01       	movw	r26, r24
     4f0:	cb 01       	movw	r24, r22
     4f2:	9f 8b       	std	Y+23, r25	; 0x17
     4f4:	8e 8b       	std	Y+22, r24	; 0x16
     4f6:	0f c0       	rjmp	.+30     	; 0x516 <dynamixel_setrx+0x174>
     4f8:	84 e1       	ldi	r24, 0x14	; 20
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	99 8f       	std	Y+25, r25	; 0x19
     4fe:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     500:	88 8d       	ldd	r24, Y+24	; 0x18
     502:	99 8d       	ldd	r25, Y+25	; 0x19
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	f1 f7       	brne	.-4      	; 0x504 <dynamixel_setrx+0x162>
     508:	99 8f       	std	Y+25, r25	; 0x19
     50a:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     50c:	8e 89       	ldd	r24, Y+22	; 0x16
     50e:	9f 89       	ldd	r25, Y+23	; 0x17
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	9f 8b       	std	Y+23, r25	; 0x17
     514:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     516:	8e 89       	ldd	r24, Y+22	; 0x16
     518:	9f 89       	ldd	r25, Y+23	; 0x17
     51a:	89 2b       	or	r24, r25
     51c:	69 f7       	brne	.-38     	; 0x4f8 <dynamixel_setrx+0x156>
     51e:	3f c0       	rjmp	.+126    	; 0x59e <dynamixel_setrx+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     520:	6a 89       	ldd	r22, Y+18	; 0x12
     522:	7b 89       	ldd	r23, Y+19	; 0x13
     524:	8c 89       	ldd	r24, Y+20	; 0x14
     526:	9d 89       	ldd	r25, Y+21	; 0x15
     528:	0e 94 20 09 	call	0x1240	; 0x1240 <__fixunssfsi>
     52c:	dc 01       	movw	r26, r24
     52e:	cb 01       	movw	r24, r22
     530:	9f 8b       	std	Y+23, r25	; 0x17
     532:	8e 8b       	std	Y+22, r24	; 0x16
     534:	8e 89       	ldd	r24, Y+22	; 0x16
     536:	9f 89       	ldd	r25, Y+23	; 0x17
     538:	9b 8f       	std	Y+27, r25	; 0x1b
     53a:	8a 8f       	std	Y+26, r24	; 0x1a
     53c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     53e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <dynamixel_setrx+0x19e>
     544:	9b 8f       	std	Y+27, r25	; 0x1b
     546:	8a 8f       	std	Y+26, r24	; 0x1a
     548:	2a c0       	rjmp	.+84     	; 0x59e <dynamixel_setrx+0x1fc>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	4f e7       	ldi	r20, 0x7F	; 127
     550:	53 e4       	ldi	r21, 0x43	; 67
     552:	6d 81       	ldd	r22, Y+5	; 0x05
     554:	7e 81       	ldd	r23, Y+6	; 0x06
     556:	8f 81       	ldd	r24, Y+7	; 0x07
     558:	98 85       	ldd	r25, Y+8	; 0x08
     55a:	0e 94 01 0a 	call	0x1402	; 0x1402 <__gesf2>
     55e:	18 16       	cp	r1, r24
     560:	ac f4       	brge	.+42     	; 0x58c <dynamixel_setrx+0x1ea>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     562:	69 85       	ldd	r22, Y+9	; 0x09
     564:	7a 85       	ldd	r23, Y+10	; 0x0a
     566:	8b 85       	ldd	r24, Y+11	; 0x0b
     568:	9c 85       	ldd	r25, Y+12	; 0x0c
     56a:	0e 94 20 09 	call	0x1240	; 0x1240 <__fixunssfsi>
     56e:	dc 01       	movw	r26, r24
     570:	cb 01       	movw	r24, r22
     572:	9d 8f       	std	Y+29, r25	; 0x1d
     574:	8c 8f       	std	Y+28, r24	; 0x1c
     576:	8c 8d       	ldd	r24, Y+28	; 0x1c
     578:	9d 8d       	ldd	r25, Y+29	; 0x1d
     57a:	9f 8f       	std	Y+31, r25	; 0x1f
     57c:	8e 8f       	std	Y+30, r24	; 0x1e
     57e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     580:	9f 8d       	ldd	r25, Y+31	; 0x1f
     582:	01 97       	sbiw	r24, 0x01	; 1
     584:	f1 f7       	brne	.-4      	; 0x582 <dynamixel_setrx+0x1e0>
     586:	9f 8f       	std	Y+31, r25	; 0x1f
     588:	8e 8f       	std	Y+30, r24	; 0x1e
     58a:	0f c0       	rjmp	.+30     	; 0x5aa <dynamixel_setrx+0x208>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     58c:	6d 81       	ldd	r22, Y+5	; 0x05
     58e:	7e 81       	ldd	r23, Y+6	; 0x06
     590:	8f 81       	ldd	r24, Y+7	; 0x07
     592:	98 85       	ldd	r25, Y+8	; 0x08
     594:	0e 94 20 09 	call	0x1240	; 0x1240 <__fixunssfsi>
     598:	dc 01       	movw	r26, r24
     59a:	cb 01       	movw	r24, r22
     59c:	8d 87       	std	Y+13, r24	; 0x0d
     59e:	8d 85       	ldd	r24, Y+13	; 0x0d
     5a0:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5a2:	88 a1       	ldd	r24, Y+32	; 0x20
     5a4:	8a 95       	dec	r24
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <dynamixel_setrx+0x202>
     5a8:	88 a3       	std	Y+32, r24	; 0x20

	_delay_us(1);

	// Set UART direction pins
	PORTD &= ~(1 << PD2);
     5aa:	8b e2       	ldi	r24, 0x2B	; 43
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	2b e2       	ldi	r18, 0x2B	; 43
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	f9 01       	movw	r30, r18
     5b4:	20 81       	ld	r18, Z
     5b6:	2b 7f       	andi	r18, 0xFB	; 251
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 83       	st	Z, r18
	PORTD |= (1 << PD3);
     5bc:	8b e2       	ldi	r24, 0x2B	; 43
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	2b e2       	ldi	r18, 0x2B	; 43
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	f9 01       	movw	r30, r18
     5c6:	20 81       	ld	r18, Z
     5c8:	28 60       	ori	r18, 0x08	; 8
     5ca:	fc 01       	movw	r30, r24
     5cc:	20 83       	st	Z, r18
	//UCSR0B &= ~(1 << TXEN0);
	//UCSR0B |= (1 << RXEN0);
	//UCSR0B |= (1 << RXCIE0);

	// Reset rx index
	dynamixel_rxindex = 0;
     5ce:	10 92 00 01 	sts	0x0100, r1
}
     5d2:	a0 96       	adiw	r28, 0x20	; 32
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <dynamixel_write>:

void dynamixel_write(uint8_t c)
{
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	1f 92       	push	r1
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62
     5ee:	89 83       	std	Y+1, r24	; 0x01
	while(bit_is_clear(UCSR0A, UDRE0));
     5f0:	00 00       	nop
     5f2:	80 ec       	ldi	r24, 0xC0	; 192
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	fc 01       	movw	r30, r24
     5f8:	80 81       	ld	r24, Z
     5fa:	88 2f       	mov	r24, r24
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	80 72       	andi	r24, 0x20	; 32
     600:	99 27       	eor	r25, r25
     602:	89 2b       	or	r24, r25
     604:	b1 f3       	breq	.-20     	; 0x5f2 <dynamixel_write+0xe>
	UDR0 = c;
     606:	86 ec       	ldi	r24, 0xC6	; 198
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	29 81       	ldd	r18, Y+1	; 0x01
     60c:	fc 01       	movw	r30, r24
     60e:	20 83       	st	Z, r18
}
     610:	0f 90       	pop	r0
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <dynamixel_calculatechecksum>:

uint8_t dynamixel_calculatechecksum(volatile uint8_t* packet)
{
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	00 d0       	rcall	.+0      	; 0x61e <dynamixel_calculatechecksum+0x6>
     61e:	00 d0       	rcall	.+0      	; 0x620 <dynamixel_calculatechecksum+0x8>
     620:	1f 92       	push	r1
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	9d 83       	std	Y+5, r25	; 0x05
     628:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t checksum = 0;
     62a:	1a 82       	std	Y+2, r1	; 0x02
     62c:	19 82       	std	Y+1, r1	; 0x01

	for(uint8_t i = DYNAMIXEL_ID; i <= (packet[DYNAMIXEL_LENGTH] + 2); i++)
     62e:	82 e0       	ldi	r24, 0x02	; 2
     630:	8b 83       	std	Y+3, r24	; 0x03
     632:	14 c0       	rjmp	.+40     	; 0x65c <dynamixel_calculatechecksum+0x44>
		checksum += packet[i];
     634:	8b 81       	ldd	r24, Y+3	; 0x03
     636:	88 2f       	mov	r24, r24
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	2c 81       	ldd	r18, Y+4	; 0x04
     63c:	3d 81       	ldd	r19, Y+5	; 0x05
     63e:	82 0f       	add	r24, r18
     640:	93 1f       	adc	r25, r19
     642:	fc 01       	movw	r30, r24
     644:	80 81       	ld	r24, Z
     646:	88 2f       	mov	r24, r24
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	29 81       	ldd	r18, Y+1	; 0x01
     64c:	3a 81       	ldd	r19, Y+2	; 0x02
     64e:	82 0f       	add	r24, r18
     650:	93 1f       	adc	r25, r19
     652:	9a 83       	std	Y+2, r25	; 0x02
     654:	89 83       	std	Y+1, r24	; 0x01

uint8_t dynamixel_calculatechecksum(volatile uint8_t* packet)
{
	uint16_t checksum = 0;

	for(uint8_t i = DYNAMIXEL_ID; i <= (packet[DYNAMIXEL_LENGTH] + 2); i++)
     656:	8b 81       	ldd	r24, Y+3	; 0x03
     658:	8f 5f       	subi	r24, 0xFF	; 255
     65a:	8b 83       	std	Y+3, r24	; 0x03
     65c:	8b 81       	ldd	r24, Y+3	; 0x03
     65e:	28 2f       	mov	r18, r24
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	8c 81       	ldd	r24, Y+4	; 0x04
     664:	9d 81       	ldd	r25, Y+5	; 0x05
     666:	03 96       	adiw	r24, 0x03	; 3
     668:	fc 01       	movw	r30, r24
     66a:	80 81       	ld	r24, Z
     66c:	88 2f       	mov	r24, r24
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	02 96       	adiw	r24, 0x02	; 2
     672:	82 17       	cp	r24, r18
     674:	93 07       	cpc	r25, r19
     676:	f4 f6       	brge	.-68     	; 0x634 <dynamixel_calculatechecksum+0x1c>
		checksum += packet[i];

	return ~(checksum % 256);
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	80 95       	com	r24
}
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	08 95       	ret

0000068c <dynamixel_writepacket>:

uint8_t dynamixel_writepacket(volatile uint8_t* txpacket, uint8_t packetlength)
{
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	00 d0       	rcall	.+0      	; 0x692 <dynamixel_writepacket+0x6>
     692:	00 d0       	rcall	.+0      	; 0x694 <dynamixel_writepacket+0x8>
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	9b 83       	std	Y+3, r25	; 0x03
     69a:	8a 83       	std	Y+2, r24	; 0x02
     69c:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8_t i = 0; i < packetlength; i++)
     69e:	19 82       	std	Y+1, r1	; 0x01
     6a0:	0e c0       	rjmp	.+28     	; 0x6be <dynamixel_writepacket+0x32>
		dynamixel_write(txpacket[i]);
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	88 2f       	mov	r24, r24
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	2a 81       	ldd	r18, Y+2	; 0x02
     6aa:	3b 81       	ldd	r19, Y+3	; 0x03
     6ac:	82 0f       	add	r24, r18
     6ae:	93 1f       	adc	r25, r19
     6b0:	fc 01       	movw	r30, r24
     6b2:	80 81       	ld	r24, Z
     6b4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <dynamixel_write>
	return ~(checksum % 256);
}

uint8_t dynamixel_writepacket(volatile uint8_t* txpacket, uint8_t packetlength)
{
	for(uint8_t i = 0; i < packetlength; i++)
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	8f 5f       	subi	r24, 0xFF	; 255
     6bc:	89 83       	std	Y+1, r24	; 0x01
     6be:	99 81       	ldd	r25, Y+1	; 0x01
     6c0:	8c 81       	ldd	r24, Y+4	; 0x04
     6c2:	98 17       	cp	r25, r24
     6c4:	70 f3       	brcs	.-36     	; 0x6a2 <dynamixel_writepacket+0x16>
		dynamixel_write(txpacket[i]);

	return DYNAMIXEL_SUCCESS;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
}
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <dynamixel_readpacket>:

uint8_t dynamixel_readpacket(volatile uint8_t* rxpacket, uint8_t packetlength)
{
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	00 d0       	rcall	.+0      	; 0x6de <dynamixel_readpacket+0x8>
     6de:	00 d0       	rcall	.+0      	; 0x6e0 <dynamixel_readpacket+0xa>
     6e0:	1f 92       	push	r1
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	9c 83       	std	Y+4, r25	; 0x04
     6e8:	8b 83       	std	Y+3, r24	; 0x03
     6ea:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t ulcounter = 0;
     6ec:	1a 82       	std	Y+2, r1	; 0x02
     6ee:	19 82       	std	Y+1, r1	; 0x01

	while(dynamixel_rxindex < packetlength)
     6f0:	0c c0       	rjmp	.+24     	; 0x70a <dynamixel_readpacket+0x34>
	{
		if(ulcounter++ > 10000)
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	9a 81       	ldd	r25, Y+2	; 0x02
     6f6:	9c 01       	movw	r18, r24
     6f8:	2f 5f       	subi	r18, 0xFF	; 255
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	3a 83       	std	Y+2, r19	; 0x02
     6fe:	29 83       	std	Y+1, r18	; 0x01
     700:	81 31       	cpi	r24, 0x11	; 17
     702:	97 42       	sbci	r25, 0x27	; 39
     704:	10 f0       	brcs	.+4      	; 0x70a <dynamixel_readpacket+0x34>
			return DYNAMIXEL_RX_TIMEOUT;
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	27 c0       	rjmp	.+78     	; 0x758 <dynamixel_readpacket+0x82>

uint8_t dynamixel_readpacket(volatile uint8_t* rxpacket, uint8_t packetlength)
{
	uint16_t ulcounter = 0;

	while(dynamixel_rxindex < packetlength)
     70a:	90 91 00 01 	lds	r25, 0x0100
     70e:	8d 81       	ldd	r24, Y+5	; 0x05
     710:	98 17       	cp	r25, r24
     712:	78 f3       	brcs	.-34     	; 0x6f2 <dynamixel_readpacket+0x1c>
	{
		if(ulcounter++ > 10000)
			return DYNAMIXEL_RX_TIMEOUT;
	}

	if((rxpacket[0] != 255) || (rxpacket[1] != 255))
     714:	8b 81       	ldd	r24, Y+3	; 0x03
     716:	9c 81       	ldd	r25, Y+4	; 0x04
     718:	fc 01       	movw	r30, r24
     71a:	80 81       	ld	r24, Z
     71c:	8f 3f       	cpi	r24, 0xFF	; 255
     71e:	39 f4       	brne	.+14     	; 0x72e <dynamixel_readpacket+0x58>
     720:	8b 81       	ldd	r24, Y+3	; 0x03
     722:	9c 81       	ldd	r25, Y+4	; 0x04
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	fc 01       	movw	r30, r24
     728:	80 81       	ld	r24, Z
     72a:	8f 3f       	cpi	r24, 0xFF	; 255
     72c:	11 f0       	breq	.+4      	; 0x732 <dynamixel_readpacket+0x5c>
		return DYNAMIXEL_RX_CORRUPT;
     72e:	82 e0       	ldi	r24, 0x02	; 2
     730:	13 c0       	rjmp	.+38     	; 0x758 <dynamixel_readpacket+0x82>

	if(rxpacket[packetlength - 1] != dynamixel_calculatechecksum(rxpacket))
     732:	8d 81       	ldd	r24, Y+5	; 0x05
     734:	88 2f       	mov	r24, r24
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	2b 81       	ldd	r18, Y+3	; 0x03
     73c:	3c 81       	ldd	r19, Y+4	; 0x04
     73e:	82 0f       	add	r24, r18
     740:	93 1f       	adc	r25, r19
     742:	fc 01       	movw	r30, r24
     744:	10 81       	ld	r17, Z
     746:	8b 81       	ldd	r24, Y+3	; 0x03
     748:	9c 81       	ldd	r25, Y+4	; 0x04
     74a:	0e 94 0c 03 	call	0x618	; 0x618 <dynamixel_calculatechecksum>
     74e:	18 17       	cp	r17, r24
     750:	11 f0       	breq	.+4      	; 0x756 <dynamixel_readpacket+0x80>
		return DYNAMIXEL_RX_CORRUPT;
     752:	82 e0       	ldi	r24, 0x02	; 2
     754:	01 c0       	rjmp	.+2      	; 0x758 <dynamixel_readpacket+0x82>

	return DYNAMIXEL_SUCCESS;
     756:	81 e0       	ldi	r24, 0x01	; 1
}
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	08 95       	ret

0000076a <dynamixel_txrx>:

uint8_t dynamixel_txrx(volatile uint8_t* txpacket, volatile uint8_t* rxpacket)
{
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	00 d0       	rcall	.+0      	; 0x774 <dynamixel_txrx+0xa>
     774:	00 d0       	rcall	.+0      	; 0x776 <dynamixel_txrx+0xc>
     776:	00 d0       	rcall	.+0      	; 0x778 <dynamixel_txrx+0xe>
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
     77c:	9c 83       	std	Y+4, r25	; 0x04
     77e:	8b 83       	std	Y+3, r24	; 0x03
     780:	7e 83       	std	Y+6, r23	; 0x06
     782:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t rxlength = 0;
     784:	19 82       	std	Y+1, r1	; 0x01
	uint8_t txlength = dynamixel_txpacket[DYNAMIXEL_LENGTH] + 4;
     786:	80 91 8a 01 	lds	r24, 0x018A
     78a:	8c 5f       	subi	r24, 0xFC	; 252
     78c:	8a 83       	std	Y+2, r24	; 0x02

	txpacket[0] = (uint8_t) 0xff;
     78e:	8b 81       	ldd	r24, Y+3	; 0x03
     790:	9c 81       	ldd	r25, Y+4	; 0x04
     792:	2f ef       	ldi	r18, 0xFF	; 255
     794:	fc 01       	movw	r30, r24
     796:	20 83       	st	Z, r18
	txpacket[1] = (uint8_t) 0xff;
     798:	8b 81       	ldd	r24, Y+3	; 0x03
     79a:	9c 81       	ldd	r25, Y+4	; 0x04
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	2f ef       	ldi	r18, 0xFF	; 255
     7a0:	fc 01       	movw	r30, r24
     7a2:	20 83       	st	Z, r18
	txpacket[txlength - 1] = (uint8_t) dynamixel_calculatechecksum(txpacket);
     7a4:	8a 81       	ldd	r24, Y+2	; 0x02
     7a6:	88 2f       	mov	r24, r24
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	2b 81       	ldd	r18, Y+3	; 0x03
     7ae:	3c 81       	ldd	r19, Y+4	; 0x04
     7b0:	89 01       	movw	r16, r18
     7b2:	08 0f       	add	r16, r24
     7b4:	19 1f       	adc	r17, r25
     7b6:	8b 81       	ldd	r24, Y+3	; 0x03
     7b8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ba:	0e 94 0c 03 	call	0x618	; 0x618 <dynamixel_calculatechecksum>
     7be:	f8 01       	movw	r30, r16
     7c0:	80 83       	st	Z, r24

	dynamixel_settx();
     7c2:	0e 94 b8 01 	call	0x370	; 0x370 <dynamixel_settx>
	dynamixel_writepacket(txpacket, txlength);
     7c6:	8b 81       	ldd	r24, Y+3	; 0x03
     7c8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ca:	6a 81       	ldd	r22, Y+2	; 0x02
     7cc:	0e 94 46 03 	call	0x68c	; 0x68c <dynamixel_writepacket>
	dynamixel_setrx();
     7d0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <dynamixel_setrx>

	if(txpacket[DYNAMIXEL_ID] != DYNAMIXEL_BROADCAST_ID)
     7d4:	8b 81       	ldd	r24, Y+3	; 0x03
     7d6:	9c 81       	ldd	r25, Y+4	; 0x04
     7d8:	02 96       	adiw	r24, 0x02	; 2
     7da:	fc 01       	movw	r30, r24
     7dc:	80 81       	ld	r24, Z
     7de:	8e 3f       	cpi	r24, 0xFE	; 254
     7e0:	b9 f0       	breq	.+46     	; 0x810 <dynamixel_txrx+0xa6>
	{
		if(txpacket[DYNAMIXEL_INSTRUCTION] == DYNAMIXEL_READ)
     7e2:	8b 81       	ldd	r24, Y+3	; 0x03
     7e4:	9c 81       	ldd	r25, Y+4	; 0x04
     7e6:	04 96       	adiw	r24, 0x04	; 4
     7e8:	fc 01       	movw	r30, r24
     7ea:	80 81       	ld	r24, Z
     7ec:	82 30       	cpi	r24, 0x02	; 2
     7ee:	41 f4       	brne	.+16     	; 0x800 <dynamixel_txrx+0x96>
			rxlength = txpacket[DYNAMIXEL_PARAMETER + 1] + 6;
     7f0:	8b 81       	ldd	r24, Y+3	; 0x03
     7f2:	9c 81       	ldd	r25, Y+4	; 0x04
     7f4:	06 96       	adiw	r24, 0x06	; 6
     7f6:	fc 01       	movw	r30, r24
     7f8:	80 81       	ld	r24, Z
     7fa:	8a 5f       	subi	r24, 0xFA	; 250
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	02 c0       	rjmp	.+4      	; 0x804 <dynamixel_txrx+0x9a>
		else
			rxlength = 6;
     800:	86 e0       	ldi	r24, 0x06	; 6
     802:	89 83       	std	Y+1, r24	; 0x01

		return dynamixel_readpacket(rxpacket, rxlength);
     804:	8d 81       	ldd	r24, Y+5	; 0x05
     806:	9e 81       	ldd	r25, Y+6	; 0x06
     808:	69 81       	ldd	r22, Y+1	; 0x01
     80a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <dynamixel_readpacket>
     80e:	03 c0       	rjmp	.+6      	; 0x816 <dynamixel_txrx+0xac>
	}

	dynamixel_settx();
     810:	0e 94 b8 01 	call	0x370	; 0x370 <dynamixel_settx>

	return DYNAMIXEL_SUCCESS;
     814:	81 e0       	ldi	r24, 0x01	; 1
}
     816:	26 96       	adiw	r28, 0x06	; 6
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	08 95       	ret

0000082c <dynamixel_ping>:

uint8_t dynamixel_ping(uint8_t id)
{
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	1f 92       	push	r1
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
     836:	89 83       	std	Y+1, r24	; 0x01
	dynamixel_txpacket[DYNAMIXEL_ID]          = (uint8_t) id;
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	80 93 89 01 	sts	0x0189, r24
	dynamixel_txpacket[DYNAMIXEL_LENGTH]      = (uint8_t) 2;
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	80 93 8a 01 	sts	0x018A, r24
	dynamixel_txpacket[DYNAMIXEL_INSTRUCTION] = (uint8_t) DYNAMIXEL_PING;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	80 93 8b 01 	sts	0x018B, r24

	return dynamixel_txrx(dynamixel_txpacket, dynamixel_rxpacket);
     84a:	67 e0       	ldi	r22, 0x07	; 7
     84c:	72 e0       	ldi	r23, 0x02	; 2
     84e:	87 e8       	ldi	r24, 0x87	; 135
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 b5 03 	call	0x76a	; 0x76a <dynamixel_txrx>
}
     856:	0f 90       	pop	r0
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <dynamixel_readbyte>:

uint8_t dynamixel_readbyte(uint8_t id, uint8_t address, uint8_t* value)
{
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	00 d0       	rcall	.+0      	; 0x864 <dynamixel_readbyte+0x6>
     864:	00 d0       	rcall	.+0      	; 0x866 <dynamixel_readbyte+0x8>
     866:	1f 92       	push	r1
     868:	cd b7       	in	r28, 0x3d	; 61
     86a:	de b7       	in	r29, 0x3e	; 62
     86c:	8a 83       	std	Y+2, r24	; 0x02
     86e:	6b 83       	std	Y+3, r22	; 0x03
     870:	5d 83       	std	Y+5, r21	; 0x05
     872:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t result;

	dynamixel_txpacket[DYNAMIXEL_ID]          = (uint8_t) id;
     874:	8a 81       	ldd	r24, Y+2	; 0x02
     876:	80 93 89 01 	sts	0x0189, r24
	dynamixel_txpacket[DYNAMIXEL_LENGTH]      = (uint8_t) 4;
     87a:	84 e0       	ldi	r24, 0x04	; 4
     87c:	80 93 8a 01 	sts	0x018A, r24
	dynamixel_txpacket[DYNAMIXEL_INSTRUCTION] = (uint8_t) DYNAMIXEL_READ;
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	80 93 8b 01 	sts	0x018B, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER]   = (uint8_t) address;
     886:	8b 81       	ldd	r24, Y+3	; 0x03
     888:	80 93 8c 01 	sts	0x018C, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER+1] = (uint8_t) 1;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	80 93 8d 01 	sts	0x018D, r24

	result = dynamixel_txrx(dynamixel_txpacket, dynamixel_rxpacket);
     892:	67 e0       	ldi	r22, 0x07	; 7
     894:	72 e0       	ldi	r23, 0x02	; 2
     896:	87 e8       	ldi	r24, 0x87	; 135
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	0e 94 b5 03 	call	0x76a	; 0x76a <dynamixel_txrx>
     89e:	89 83       	std	Y+1, r24	; 0x01

	if(result == DYNAMIXEL_SUCCESS)
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	31 f4       	brne	.+12     	; 0x8b2 <dynamixel_readbyte+0x54>
		*value = dynamixel_rxpacket[DYNAMIXEL_PARAMETER];
     8a6:	20 91 0c 02 	lds	r18, 0x020C
     8aa:	8c 81       	ldd	r24, Y+4	; 0x04
     8ac:	9d 81       	ldd	r25, Y+5	; 0x05
     8ae:	fc 01       	movw	r30, r24
     8b0:	20 83       	st	Z, r18

	return result;
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
}
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	08 95       	ret

000008c4 <dynamixel_readword>:

uint8_t dynamixel_readword(uint8_t id, uint8_t address, uint16_t* value)
{
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	00 d0       	rcall	.+0      	; 0x8ca <dynamixel_readword+0x6>
     8ca:	00 d0       	rcall	.+0      	; 0x8cc <dynamixel_readword+0x8>
     8cc:	1f 92       	push	r1
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	8a 83       	std	Y+2, r24	; 0x02
     8d4:	6b 83       	std	Y+3, r22	; 0x03
     8d6:	5d 83       	std	Y+5, r21	; 0x05
     8d8:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t result;

	dynamixel_txpacket[DYNAMIXEL_ID]          = (uint8_t) id;
     8da:	8a 81       	ldd	r24, Y+2	; 0x02
     8dc:	80 93 89 01 	sts	0x0189, r24
	dynamixel_txpacket[DYNAMIXEL_LENGTH]      = (uint8_t) 4;
     8e0:	84 e0       	ldi	r24, 0x04	; 4
     8e2:	80 93 8a 01 	sts	0x018A, r24
	dynamixel_txpacket[DYNAMIXEL_INSTRUCTION] = (uint8_t) DYNAMIXEL_READ;
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	80 93 8b 01 	sts	0x018B, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER]   = (uint8_t) address;
     8ec:	8b 81       	ldd	r24, Y+3	; 0x03
     8ee:	80 93 8c 01 	sts	0x018C, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER+1] = (uint8_t) 2;
     8f2:	82 e0       	ldi	r24, 0x02	; 2
     8f4:	80 93 8d 01 	sts	0x018D, r24

	result = dynamixel_txrx(dynamixel_txpacket, dynamixel_rxpacket);
     8f8:	67 e0       	ldi	r22, 0x07	; 7
     8fa:	72 e0       	ldi	r23, 0x02	; 2
     8fc:	87 e8       	ldi	r24, 0x87	; 135
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	0e 94 b5 03 	call	0x76a	; 0x76a <dynamixel_txrx>
     904:	89 83       	std	Y+1, r24	; 0x01

	if(result == DYNAMIXEL_SUCCESS)
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	81 30       	cpi	r24, 0x01	; 1
     90a:	69 f4       	brne	.+26     	; 0x926 <dynamixel_readword+0x62>
		*value = (uint16_t) dynamixel_makeword(dynamixel_rxpacket[DYNAMIXEL_PARAMETER], dynamixel_rxpacket[DYNAMIXEL_PARAMETER+1]);
     90c:	90 91 0d 02 	lds	r25, 0x020D
     910:	80 91 0c 02 	lds	r24, 0x020C
     914:	69 2f       	mov	r22, r25
     916:	0e 94 c1 05 	call	0xb82	; 0xb82 <dynamixel_makeword>
     91a:	9c 01       	movw	r18, r24
     91c:	8c 81       	ldd	r24, Y+4	; 0x04
     91e:	9d 81       	ldd	r25, Y+5	; 0x05
     920:	fc 01       	movw	r30, r24
     922:	31 83       	std	Z+1, r19	; 0x01
     924:	20 83       	st	Z, r18

	return result;
     926:	89 81       	ldd	r24, Y+1	; 0x01
}
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <dynamixel_readtable>:

uint8_t dynamixel_readtable(uint8_t id, uint8_t start_address, uint8_t end_address, uint8_t* table)
{
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	cd b7       	in	r28, 0x3d	; 61
     93e:	de b7       	in	r29, 0x3e	; 62
     940:	28 97       	sbiw	r28, 0x08	; 8
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	f8 94       	cli
     946:	de bf       	out	0x3e, r29	; 62
     948:	0f be       	out	0x3f, r0	; 63
     94a:	cd bf       	out	0x3d, r28	; 61
     94c:	8c 83       	std	Y+4, r24	; 0x04
     94e:	6d 83       	std	Y+5, r22	; 0x05
     950:	4e 83       	std	Y+6, r20	; 0x06
     952:	38 87       	std	Y+8, r19	; 0x08
     954:	2f 83       	std	Y+7, r18	; 0x07
	uint8_t result;
	uint8_t length = end_address - start_address + 1;
     956:	9e 81       	ldd	r25, Y+6	; 0x06
     958:	8d 81       	ldd	r24, Y+5	; 0x05
     95a:	29 2f       	mov	r18, r25
     95c:	28 1b       	sub	r18, r24
     95e:	82 2f       	mov	r24, r18
     960:	8f 5f       	subi	r24, 0xFF	; 255
     962:	8a 83       	std	Y+2, r24	; 0x02

	dynamixel_txpacket[DYNAMIXEL_ID]          = (uint8_t) id;
     964:	8c 81       	ldd	r24, Y+4	; 0x04
     966:	80 93 89 01 	sts	0x0189, r24
	dynamixel_txpacket[DYNAMIXEL_LENGTH]      = (uint8_t) 4;
     96a:	84 e0       	ldi	r24, 0x04	; 4
     96c:	80 93 8a 01 	sts	0x018A, r24
	dynamixel_txpacket[DYNAMIXEL_INSTRUCTION] = (uint8_t) DYNAMIXEL_READ;
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	80 93 8b 01 	sts	0x018B, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER]   = (uint8_t) start_address;
     976:	8d 81       	ldd	r24, Y+5	; 0x05
     978:	80 93 8c 01 	sts	0x018C, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER+1] = (uint8_t) length;
     97c:	8a 81       	ldd	r24, Y+2	; 0x02
     97e:	80 93 8d 01 	sts	0x018D, r24

	result = dynamixel_txrx(dynamixel_txpacket, dynamixel_rxpacket);
     982:	67 e0       	ldi	r22, 0x07	; 7
     984:	72 e0       	ldi	r23, 0x02	; 2
     986:	87 e8       	ldi	r24, 0x87	; 135
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 b5 03 	call	0x76a	; 0x76a <dynamixel_txrx>
     98e:	8b 83       	std	Y+3, r24	; 0x03

	if(result == DYNAMIXEL_SUCCESS)
     990:	8b 81       	ldd	r24, Y+3	; 0x03
     992:	81 30       	cpi	r24, 0x01	; 1
     994:	09 f5       	brne	.+66     	; 0x9d8 <dynamixel_readtable+0xa0>
	{
		for(uint8_t i = 0; i < length; i++)
     996:	19 82       	std	Y+1, r1	; 0x01
     998:	1b c0       	rjmp	.+54     	; 0x9d0 <dynamixel_readtable+0x98>
			table[start_address + i] = dynamixel_rxpacket[DYNAMIXEL_PARAMETER + i];
     99a:	8d 81       	ldd	r24, Y+5	; 0x05
     99c:	28 2f       	mov	r18, r24
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	88 2f       	mov	r24, r24
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	82 0f       	add	r24, r18
     9a8:	93 1f       	adc	r25, r19
     9aa:	9c 01       	movw	r18, r24
     9ac:	8f 81       	ldd	r24, Y+7	; 0x07
     9ae:	98 85       	ldd	r25, Y+8	; 0x08
     9b0:	82 0f       	add	r24, r18
     9b2:	93 1f       	adc	r25, r19
     9b4:	29 81       	ldd	r18, Y+1	; 0x01
     9b6:	22 2f       	mov	r18, r18
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	2b 5f       	subi	r18, 0xFB	; 251
     9bc:	3f 4f       	sbci	r19, 0xFF	; 255
     9be:	29 5f       	subi	r18, 0xF9	; 249
     9c0:	3d 4f       	sbci	r19, 0xFD	; 253
     9c2:	f9 01       	movw	r30, r18
     9c4:	20 81       	ld	r18, Z
     9c6:	fc 01       	movw	r30, r24
     9c8:	20 83       	st	Z, r18

	result = dynamixel_txrx(dynamixel_txpacket, dynamixel_rxpacket);

	if(result == DYNAMIXEL_SUCCESS)
	{
		for(uint8_t i = 0; i < length; i++)
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	8f 5f       	subi	r24, 0xFF	; 255
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	99 81       	ldd	r25, Y+1	; 0x01
     9d2:	8a 81       	ldd	r24, Y+2	; 0x02
     9d4:	98 17       	cp	r25, r24
     9d6:	08 f3       	brcs	.-62     	; 0x99a <dynamixel_readtable+0x62>
			table[start_address + i] = dynamixel_rxpacket[DYNAMIXEL_PARAMETER + i];
	}

	return result;
     9d8:	8b 81       	ldd	r24, Y+3	; 0x03
}
     9da:	28 96       	adiw	r28, 0x08	; 8
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	f8 94       	cli
     9e0:	de bf       	out	0x3e, r29	; 62
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	cd bf       	out	0x3d, r28	; 61
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <dynamixel_writebyte>:

uint8_t dynamixel_writebyte(uint8_t id, uint8_t address, uint8_t value)
{
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	00 d0       	rcall	.+0      	; 0x9f2 <dynamixel_writebyte+0x6>
     9f2:	1f 92       	push	r1
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	89 83       	std	Y+1, r24	; 0x01
     9fa:	6a 83       	std	Y+2, r22	; 0x02
     9fc:	4b 83       	std	Y+3, r20	; 0x03
	dynamixel_txpacket[DYNAMIXEL_ID]          = (uint8_t) id;
     9fe:	89 81       	ldd	r24, Y+1	; 0x01
     a00:	80 93 89 01 	sts	0x0189, r24
	dynamixel_txpacket[DYNAMIXEL_LENGTH]      = (uint8_t) 4;
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	80 93 8a 01 	sts	0x018A, r24
	dynamixel_txpacket[DYNAMIXEL_INSTRUCTION] = (uint8_t) DYNAMIXEL_WRITE;
     a0a:	83 e0       	ldi	r24, 0x03	; 3
     a0c:	80 93 8b 01 	sts	0x018B, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER]   = (uint8_t) address;
     a10:	8a 81       	ldd	r24, Y+2	; 0x02
     a12:	80 93 8c 01 	sts	0x018C, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER+1] = (uint8_t) value;
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	80 93 8d 01 	sts	0x018D, r24

	return dynamixel_txrx(dynamixel_txpacket, dynamixel_rxpacket);
     a1c:	67 e0       	ldi	r22, 0x07	; 7
     a1e:	72 e0       	ldi	r23, 0x02	; 2
     a20:	87 e8       	ldi	r24, 0x87	; 135
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	0e 94 b5 03 	call	0x76a	; 0x76a <dynamixel_txrx>
}
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	08 95       	ret

00000a34 <dynamixel_writeword>:

uint8_t dynamixel_writeword(uint8_t id, uint8_t address, uint16_t value)
{
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	00 d0       	rcall	.+0      	; 0xa3a <dynamixel_writeword+0x6>
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <dynamixel_writeword+0x8>
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	89 83       	std	Y+1, r24	; 0x01
     a42:	6a 83       	std	Y+2, r22	; 0x02
     a44:	5c 83       	std	Y+4, r21	; 0x04
     a46:	4b 83       	std	Y+3, r20	; 0x03
	dynamixel_txpacket[DYNAMIXEL_ID]          = (uint8_t) id;
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	80 93 89 01 	sts	0x0189, r24
	dynamixel_txpacket[DYNAMIXEL_LENGTH]      = (uint8_t) 5;
     a4e:	85 e0       	ldi	r24, 0x05	; 5
     a50:	80 93 8a 01 	sts	0x018A, r24
	dynamixel_txpacket[DYNAMIXEL_INSTRUCTION] = (uint8_t) DYNAMIXEL_WRITE;
     a54:	83 e0       	ldi	r24, 0x03	; 3
     a56:	80 93 8b 01 	sts	0x018B, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER]   = (uint8_t) address;
     a5a:	8a 81       	ldd	r24, Y+2	; 0x02
     a5c:	80 93 8c 01 	sts	0x018C, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER+1] = (uint8_t) dynamixel_getlowbyte(value);
     a60:	8b 81       	ldd	r24, Y+3	; 0x03
     a62:	9c 81       	ldd	r25, Y+4	; 0x04
     a64:	0e 94 d7 05 	call	0xbae	; 0xbae <dynamixel_getlowbyte>
     a68:	80 93 8d 01 	sts	0x018D, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER+2] = (uint8_t) dynamixel_gethighbyte(value);
     a6c:	8b 81       	ldd	r24, Y+3	; 0x03
     a6e:	9c 81       	ldd	r25, Y+4	; 0x04
     a70:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <dynamixel_gethighbyte>
     a74:	80 93 8e 01 	sts	0x018E, r24

	return dynamixel_txrx(dynamixel_txpacket, dynamixel_rxpacket);
     a78:	67 e0       	ldi	r22, 0x07	; 7
     a7a:	72 e0       	ldi	r23, 0x02	; 2
     a7c:	87 e8       	ldi	r24, 0x87	; 135
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	0e 94 b5 03 	call	0x76a	; 0x76a <dynamixel_txrx>
}
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <dynamixel_syncwrite>:

uint8_t dynamixel_syncwrite(uint8_t address, uint8_t length, uint8_t number, uint8_t* param)
{
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	00 d0       	rcall	.+0      	; 0xa98 <dynamixel_syncwrite+0x6>
     a98:	00 d0       	rcall	.+0      	; 0xa9a <dynamixel_syncwrite+0x8>
     a9a:	00 d0       	rcall	.+0      	; 0xa9c <dynamixel_syncwrite+0xa>
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	8a 83       	std	Y+2, r24	; 0x02
     aa2:	6b 83       	std	Y+3, r22	; 0x03
     aa4:	4c 83       	std	Y+4, r20	; 0x04
     aa6:	3e 83       	std	Y+6, r19	; 0x06
     aa8:	2d 83       	std	Y+5, r18	; 0x05
	dynamixel_txpacket[DYNAMIXEL_ID]          = (uint8_t) DYNAMIXEL_BROADCAST_ID;
     aaa:	8e ef       	ldi	r24, 0xFE	; 254
     aac:	80 93 89 01 	sts	0x0189, r24
	dynamixel_txpacket[DYNAMIXEL_INSTRUCTION] = (uint8_t) DYNAMIXEL_SYNC_WRITE;
     ab0:	83 e8       	ldi	r24, 0x83	; 131
     ab2:	80 93 8b 01 	sts	0x018B, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER]   = (uint8_t) address;
     ab6:	8a 81       	ldd	r24, Y+2	; 0x02
     ab8:	80 93 8c 01 	sts	0x018C, r24
	dynamixel_txpacket[DYNAMIXEL_PARAMETER+1] = (uint8_t) length;
     abc:	8b 81       	ldd	r24, Y+3	; 0x03
     abe:	80 93 8d 01 	sts	0x018D, r24
	dynamixel_txpacket[DYNAMIXEL_LENGTH]      = (uint8_t) ((length + 1) * number + 4);
     ac2:	8b 81       	ldd	r24, Y+3	; 0x03
     ac4:	88 2f       	mov	r24, r24
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	01 96       	adiw	r24, 0x01	; 1
     aca:	98 2f       	mov	r25, r24
     acc:	8c 81       	ldd	r24, Y+4	; 0x04
     ace:	98 9f       	mul	r25, r24
     ad0:	80 2d       	mov	r24, r0
     ad2:	11 24       	eor	r1, r1
     ad4:	8c 5f       	subi	r24, 0xFC	; 252
     ad6:	80 93 8a 01 	sts	0x018A, r24

	for(uint8_t i = 0; i < ((length + 1) * number); i++)
     ada:	19 82       	std	Y+1, r1	; 0x01
     adc:	14 c0       	rjmp	.+40     	; 0xb06 <dynamixel_syncwrite+0x74>
		dynamixel_txpacket[DYNAMIXEL_PARAMETER + 2 + i] = (uint8_t) param[i];
     ade:	89 81       	ldd	r24, Y+1	; 0x01
     ae0:	88 2f       	mov	r24, r24
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	07 96       	adiw	r24, 0x07	; 7
     ae6:	29 81       	ldd	r18, Y+1	; 0x01
     ae8:	22 2f       	mov	r18, r18
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	4d 81       	ldd	r20, Y+5	; 0x05
     aee:	5e 81       	ldd	r21, Y+6	; 0x06
     af0:	24 0f       	add	r18, r20
     af2:	35 1f       	adc	r19, r21
     af4:	f9 01       	movw	r30, r18
     af6:	20 81       	ld	r18, Z
     af8:	89 57       	subi	r24, 0x79	; 121
     afa:	9e 4f       	sbci	r25, 0xFE	; 254
     afc:	fc 01       	movw	r30, r24
     afe:	20 83       	st	Z, r18
	dynamixel_txpacket[DYNAMIXEL_INSTRUCTION] = (uint8_t) DYNAMIXEL_SYNC_WRITE;
	dynamixel_txpacket[DYNAMIXEL_PARAMETER]   = (uint8_t) address;
	dynamixel_txpacket[DYNAMIXEL_PARAMETER+1] = (uint8_t) length;
	dynamixel_txpacket[DYNAMIXEL_LENGTH]      = (uint8_t) ((length + 1) * number + 4);

	for(uint8_t i = 0; i < ((length + 1) * number); i++)
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	8f 5f       	subi	r24, 0xFF	; 255
     b04:	89 83       	std	Y+1, r24	; 0x01
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	28 2f       	mov	r18, r24
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	8b 81       	ldd	r24, Y+3	; 0x03
     b0e:	88 2f       	mov	r24, r24
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	bc 01       	movw	r22, r24
     b14:	6f 5f       	subi	r22, 0xFF	; 255
     b16:	7f 4f       	sbci	r23, 0xFF	; 255
     b18:	8c 81       	ldd	r24, Y+4	; 0x04
     b1a:	48 2f       	mov	r20, r24
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	64 9f       	mul	r22, r20
     b20:	c0 01       	movw	r24, r0
     b22:	65 9f       	mul	r22, r21
     b24:	90 0d       	add	r25, r0
     b26:	74 9f       	mul	r23, r20
     b28:	90 0d       	add	r25, r0
     b2a:	11 24       	eor	r1, r1
     b2c:	28 17       	cp	r18, r24
     b2e:	39 07       	cpc	r19, r25
     b30:	b4 f2       	brlt	.-84     	; 0xade <dynamixel_syncwrite+0x4c>
		dynamixel_txpacket[DYNAMIXEL_PARAMETER + 2 + i] = (uint8_t) param[i];

	return dynamixel_txrx(dynamixel_txpacket, dynamixel_rxpacket);
     b32:	67 e0       	ldi	r22, 0x07	; 7
     b34:	72 e0       	ldi	r23, 0x02	; 2
     b36:	87 e8       	ldi	r24, 0x87	; 135
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	0e 94 b5 03 	call	0x76a	; 0x76a <dynamixel_txrx>
}
     b3e:	26 96       	adiw	r28, 0x06	; 6
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	08 95       	ret

00000b50 <dynamixel_reset>:

uint8_t dynamixel_reset(uint8_t id)
{
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	1f 92       	push	r1
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	89 83       	std	Y+1, r24	; 0x01
	dynamixel_txpacket[DYNAMIXEL_ID]          = (uint8_t) id;
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	80 93 89 01 	sts	0x0189, r24
	dynamixel_txpacket[DYNAMIXEL_LENGTH]      = (uint8_t) 2;
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	80 93 8a 01 	sts	0x018A, r24
	dynamixel_txpacket[DYNAMIXEL_INSTRUCTION] = (uint8_t) DYNAMIXEL_RESET;
     b68:	86 e0       	ldi	r24, 0x06	; 6
     b6a:	80 93 8b 01 	sts	0x018B, r24

	return dynamixel_txrx(dynamixel_txpacket, dynamixel_rxpacket);
     b6e:	67 e0       	ldi	r22, 0x07	; 7
     b70:	72 e0       	ldi	r23, 0x02	; 2
     b72:	87 e8       	ldi	r24, 0x87	; 135
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	0e 94 b5 03 	call	0x76a	; 0x76a <dynamixel_txrx>
}
     b7a:	0f 90       	pop	r0
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	08 95       	ret

00000b82 <dynamixel_makeword>:

uint16_t dynamixel_makeword(uint8_t lowbyte, uint8_t highbyte)
{
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	00 d0       	rcall	.+0      	; 0xb88 <dynamixel_makeword+0x6>
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	89 83       	std	Y+1, r24	; 0x01
     b8e:	6a 83       	std	Y+2, r22	; 0x02
	return ((highbyte << 8) + lowbyte);
     b90:	8a 81       	ldd	r24, Y+2	; 0x02
     b92:	88 2f       	mov	r24, r24
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	38 2f       	mov	r19, r24
     b98:	22 27       	eor	r18, r18
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	82 0f       	add	r24, r18
     ba2:	93 1f       	adc	r25, r19
}
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	08 95       	ret

00000bae <dynamixel_getlowbyte>:

uint8_t dynamixel_getlowbyte(uint16_t word)
{
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	00 d0       	rcall	.+0      	; 0xbb4 <dynamixel_getlowbyte+0x6>
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	9a 83       	std	Y+2, r25	; 0x02
     bba:	89 83       	std	Y+1, r24	; 0x01
	return (word & 0xff);
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
}
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <dynamixel_gethighbyte>:

uint8_t dynamixel_gethighbyte(uint16_t word)
{
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	00 d0       	rcall	.+0      	; 0xbce <dynamixel_gethighbyte+0x6>
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	9a 83       	std	Y+2, r25	; 0x02
     bd4:	89 83       	std	Y+1, r24	; 0x01
	return ((word & 0xff00) >> 8);
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	9a 81       	ldd	r25, Y+2	; 0x02
     bda:	89 2f       	mov	r24, r25
     bdc:	99 27       	eor	r25, r25
}
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	08 95       	ret

00000be8 <main>:
#include <util/delay.h>
#include "dynamixel.h"
#include "ax.h"
#include "usart.h"

int main() {
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62

	dynamixel_init(DYNAMIXEL_BAUDRATE);				// init dynamixel with 250kbps
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	74 e2       	ldi	r23, 0x24	; 36
     bf4:	84 e7       	ldi	r24, 0x74	; 116
     bf6:	98 e4       	ldi	r25, 0x48	; 72
     bf8:	0e 94 6f 01 	call	0x2de	; 0x2de <dynamixel_init>
	UART1_Init(UART1_BAUD, UART_ISR_ON);			// init uart with 9600 baud
     bfc:	41 e0       	ldi	r20, 0x01	; 1
     bfe:	60 e8       	ldi	r22, 0x80	; 128
     c00:	75 e2       	ldi	r23, 0x25	; 37
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 0a 06 	call	0xc14	; 0xc14 <UART1_Init>





	return 0;
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
}
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <UART1_Init>:
-bez paritet
-9600baud
-asynchron
****************************************************************************************************************************************/
void UART1_Init(unsigned long baud, char isrOnOff)
{
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	27 97       	sbiw	r28, 0x07	; 7
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	f8 94       	cli
     c22:	de bf       	out	0x3e, r29	; 62
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	cd bf       	out	0x3d, r28	; 61
     c28:	6b 83       	std	Y+3, r22	; 0x03
     c2a:	7c 83       	std	Y+4, r23	; 0x04
     c2c:	8d 83       	std	Y+5, r24	; 0x05
     c2e:	9e 83       	std	Y+6, r25	; 0x06
     c30:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR1A = 0;
     c32:	88 ec       	ldi	r24, 0xC8	; 200
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	fc 01       	movw	r30, r24
     c38:	10 82       	st	Z, r1
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
     c3a:	89 ec       	ldi	r24, 0xC9	; 201
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	28 e1       	ldi	r18, 0x18	; 24
     c40:	fc 01       	movw	r30, r24
     c42:	20 83       	st	Z, r18


	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); //sa 1stop bit
     c44:	8a ec       	ldi	r24, 0xCA	; 202
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	26 e0       	ldi	r18, 0x06	; 6
     c4a:	fc 01       	movw	r30, r24
     c4c:	20 83       	st	Z, r18


	if(isrOnOff == UART_ISR_ON)
     c4e:	8f 81       	ldd	r24, Y+7	; 0x07
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	91 f4       	brne	.+36     	; 0xc78 <UART1_Init+0x64>
	{
		UCSR1B |= ((1 << RXCIE1) | (1 << TXCIE1));
     c54:	89 ec       	ldi	r24, 0xC9	; 201
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	29 ec       	ldi	r18, 0xC9	; 201
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	f9 01       	movw	r30, r18
     c5e:	20 81       	ld	r18, Z
     c60:	20 6c       	ori	r18, 0xC0	; 192
     c62:	fc 01       	movw	r30, r24
     c64:	20 83       	st	Z, r18
		SREG |= 0x80;
     c66:	8f e5       	ldi	r24, 0x5F	; 95
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	2f e5       	ldi	r18, 0x5F	; 95
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	f9 01       	movw	r30, r18
     c70:	20 81       	ld	r18, Z
     c72:	20 68       	ori	r18, 0x80	; 128
     c74:	fc 01       	movw	r30, r24
     c76:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
     c78:	6b 81       	ldd	r22, Y+3	; 0x03
     c7a:	7c 81       	ldd	r23, Y+4	; 0x04
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	9e 81       	ldd	r25, Y+6	; 0x06
     c80:	0e 94 4f 09 	call	0x129e	; 0x129e <__floatunsisf>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	40 e8       	ldi	r20, 0x80	; 128
     c8e:	51 e4       	ldi	r21, 0x41	; 65
     c90:	bc 01       	movw	r22, r24
     c92:	cd 01       	movw	r24, r26
     c94:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3>
     c98:	dc 01       	movw	r26, r24
     c9a:	cb 01       	movw	r24, r22
     c9c:	9c 01       	movw	r18, r24
     c9e:	ad 01       	movw	r20, r26
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	70 ec       	ldi	r23, 0xC0	; 192
     ca4:	88 e2       	ldi	r24, 0x28	; 40
     ca6:	9b e4       	ldi	r25, 0x4B	; 75
     ca8:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3>
     cac:	dc 01       	movw	r26, r24
     cae:	cb 01       	movw	r24, r22
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e8       	ldi	r20, 0x80	; 128
     cb6:	5f e3       	ldi	r21, 0x3F	; 63
     cb8:	bc 01       	movw	r22, r24
     cba:	cd 01       	movw	r24, r26
     cbc:	0e 94 3c 08 	call	0x1078	; 0x1078 <__subsf3>
     cc0:	dc 01       	movw	r26, r24
     cc2:	cb 01       	movw	r24, r22
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	40 e0       	ldi	r20, 0x00	; 0
     cca:	5f e3       	ldi	r21, 0x3F	; 63
     ccc:	bc 01       	movw	r22, r24
     cce:	cd 01       	movw	r24, r26
     cd0:	0e 94 3d 08 	call	0x107a	; 0x107a <__addsf3>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	bc 01       	movw	r22, r24
     cda:	cd 01       	movw	r24, r26
     cdc:	0e 94 20 09 	call	0x1240	; 0x1240 <__fixunssfsi>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	9a 83       	std	Y+2, r25	; 0x02
     ce6:	89 83       	std	Y+1, r24	; 0x01

	UBRR1H = temp >> 8;
     ce8:	8d ec       	ldi	r24, 0xCD	; 205
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	29 81       	ldd	r18, Y+1	; 0x01
     cee:	3a 81       	ldd	r19, Y+2	; 0x02
     cf0:	23 2f       	mov	r18, r19
     cf2:	33 27       	eor	r19, r19
     cf4:	fc 01       	movw	r30, r24
     cf6:	20 83       	st	Z, r18
	UBRR1L = temp;
     cf8:	8c ec       	ldi	r24, 0xCC	; 204
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	29 81       	ldd	r18, Y+1	; 0x01
     cfe:	fc 01       	movw	r30, r24
     d00:	20 83       	st	Z, r18
}
     d02:	27 96       	adiw	r28, 0x07	; 7
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	08 95       	ret

00000d14 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
     d14:	1f 92       	push	r1
     d16:	0f 92       	push	r0
     d18:	00 90 5f 00 	lds	r0, 0x005F
     d1c:	0f 92       	push	r0
     d1e:	11 24       	eor	r1, r1
     d20:	00 90 5b 00 	lds	r0, 0x005B
     d24:	0f 92       	push	r0
     d26:	2f 93       	push	r18
     d28:	3f 93       	push	r19
     d2a:	8f 93       	push	r24
     d2c:	9f 93       	push	r25
     d2e:	ef 93       	push	r30
     d30:	ff 93       	push	r31
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
     d3a:	80 91 42 01 	lds	r24, 0x0142
     d3e:	88 23       	and	r24, r24
     d40:	d1 f0       	breq	.+52     	; 0xd76 <__vector_34+0x62>
	{
		tx1_counter--;
     d42:	80 91 42 01 	lds	r24, 0x0142
     d46:	81 50       	subi	r24, 0x01	; 1
     d48:	80 93 42 01 	sts	0x0142, r24
		UDR1=tx1_buffer[tx1_rd_index];
     d4c:	8e ec       	ldi	r24, 0xCE	; 206
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	20 91 43 01 	lds	r18, 0x0143
     d54:	22 2f       	mov	r18, r18
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	2f 5f       	subi	r18, 0xFF	; 255
     d5a:	3e 4f       	sbci	r19, 0xFE	; 254
     d5c:	f9 01       	movw	r30, r18
     d5e:	20 81       	ld	r18, Z
     d60:	fc 01       	movw	r30, r24
     d62:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
     d64:	80 91 43 01 	lds	r24, 0x0143
     d68:	8f 5f       	subi	r24, 0xFF	; 255
     d6a:	80 93 43 01 	sts	0x0143, r24
     d6e:	80 34       	cpi	r24, 0x40	; 64
     d70:	11 f4       	brne	.+4      	; 0xd76 <__vector_34+0x62>
			tx1_rd_index = 0;
     d72:	10 92 43 01 	sts	0x0143, r1
	}
}
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	ff 91       	pop	r31
     d7c:	ef 91       	pop	r30
     d7e:	9f 91       	pop	r25
     d80:	8f 91       	pop	r24
     d82:	3f 91       	pop	r19
     d84:	2f 91       	pop	r18
     d86:	0f 90       	pop	r0
     d88:	00 92 5b 00 	sts	0x005B, r0
     d8c:	0f 90       	pop	r0
     d8e:	00 92 5f 00 	sts	0x005F, r0
     d92:	0f 90       	pop	r0
     d94:	1f 90       	pop	r1
     d96:	18 95       	reti

00000d98 <__vector_32>:

ISR(USART1_RX_vect)
{
     d98:	1f 92       	push	r1
     d9a:	0f 92       	push	r0
     d9c:	00 90 5f 00 	lds	r0, 0x005F
     da0:	0f 92       	push	r0
     da2:	11 24       	eor	r1, r1
     da4:	00 90 5b 00 	lds	r0, 0x005B
     da8:	0f 92       	push	r0
     daa:	2f 93       	push	r18
     dac:	3f 93       	push	r19
     dae:	8f 93       	push	r24
     db0:	9f 93       	push	r25
     db2:	ef 93       	push	r30
     db4:	ff 93       	push	r31
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	1f 92       	push	r1
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
     dc0:	88 ec       	ldi	r24, 0xC8	; 200
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	fc 01       	movw	r30, r24
     dc6:	80 81       	ld	r24, Z
     dc8:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	88 2f       	mov	r24, r24
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	8c 71       	andi	r24, 0x1C	; 28
     dd2:	99 27       	eor	r25, r25
     dd4:	89 2b       	or	r24, r25
     dd6:	d1 f4       	brne	.+52     	; 0xe0c <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
     dd8:	80 91 84 01 	lds	r24, 0x0184
     ddc:	88 2f       	mov	r24, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	2e ec       	ldi	r18, 0xCE	; 206
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	f9 01       	movw	r30, r18
     de6:	20 81       	ld	r18, Z
     de8:	8c 5b       	subi	r24, 0xBC	; 188
     dea:	9e 4f       	sbci	r25, 0xFE	; 254
     dec:	fc 01       	movw	r30, r24
     dee:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
     df0:	80 91 84 01 	lds	r24, 0x0184
     df4:	8f 5f       	subi	r24, 0xFF	; 255
     df6:	80 93 84 01 	sts	0x0184, r24
     dfa:	80 34       	cpi	r24, 0x40	; 64
     dfc:	11 f4       	brne	.+4      	; 0xe02 <__vector_32+0x6a>
		rx1_wr_index = 0;
     dfe:	10 92 84 01 	sts	0x0184, r1

		rx1_counter++;
     e02:	80 91 85 01 	lds	r24, 0x0185
     e06:	8f 5f       	subi	r24, 0xFF	; 255
     e08:	80 93 85 01 	sts	0x0185, r24
	}
}
     e0c:	0f 90       	pop	r0
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	ff 91       	pop	r31
     e14:	ef 91       	pop	r30
     e16:	9f 91       	pop	r25
     e18:	8f 91       	pop	r24
     e1a:	3f 91       	pop	r19
     e1c:	2f 91       	pop	r18
     e1e:	0f 90       	pop	r0
     e20:	00 92 5b 00 	sts	0x005B, r0
     e24:	0f 90       	pop	r0
     e26:	00 92 5f 00 	sts	0x005F, r0
     e2a:	0f 90       	pop	r0
     e2c:	1f 90       	pop	r1
     e2e:	18 95       	reti

00000e30 <altUart0Write>:

void altUart0Write(unsigned char data)
{
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	1f 92       	push	r1
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & (1 << UDRE0)));
     e3c:	00 00       	nop
     e3e:	80 ec       	ldi	r24, 0xC0	; 192
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	fc 01       	movw	r30, r24
     e44:	80 81       	ld	r24, Z
     e46:	88 2f       	mov	r24, r24
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	80 72       	andi	r24, 0x20	; 32
     e4c:	99 27       	eor	r25, r25
     e4e:	89 2b       	or	r24, r25
     e50:	b1 f3       	breq	.-20     	; 0xe3e <altUart0Write+0xe>

	UDR0 = data;
     e52:	86 ec       	ldi	r24, 0xC6	; 198
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	29 81       	ldd	r18, Y+1	; 0x01
     e58:	fc 01       	movw	r30, r24
     e5a:	20 83       	st	Z, r18
}
     e5c:	0f 90       	pop	r0
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <altUart1Write>:

void altUart1Write(unsigned char data)
{
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	1f 92       	push	r1
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1 << UDRE1)) );
     e70:	00 00       	nop
     e72:	88 ec       	ldi	r24, 0xC8	; 200
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	fc 01       	movw	r30, r24
     e78:	80 81       	ld	r24, Z
     e7a:	88 2f       	mov	r24, r24
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	80 72       	andi	r24, 0x20	; 32
     e80:	99 27       	eor	r25, r25
     e82:	89 2b       	or	r24, r25
     e84:	b1 f3       	breq	.-20     	; 0xe72 <altUart1Write+0xe>
	UDR1 = data;
     e86:	8e ec       	ldi	r24, 0xCE	; 206
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	29 81       	ldd	r18, Y+1	; 0x01
     e8c:	fc 01       	movw	r30, r24
     e8e:	20 83       	st	Z, r18
}
     e90:	0f 90       	pop	r0
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	08 95       	ret

00000e98 <UART1_Write>:
Slanje podataka USART1 modulom
**
**************************************************************************************************************************************/

void UART1_Write(unsigned char data)
{
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	1f 92       	push	r1
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR1B >> TXCIE1) & 0x01)
     ea4:	89 ec       	ldi	r24, 0xC9	; 201
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	fc 01       	movw	r30, r24
     eaa:	80 81       	ld	r24, Z
     eac:	82 95       	swap	r24
     eae:	86 95       	lsr	r24
     eb0:	86 95       	lsr	r24
     eb2:	83 70       	andi	r24, 0x03	; 3
     eb4:	88 2f       	mov	r24, r24
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	81 70       	andi	r24, 0x01	; 1
     eba:	99 27       	eor	r25, r25
     ebc:	89 2b       	or	r24, r25
     ebe:	99 f1       	breq	.+102    	; 0xf26 <UART1_Write+0x8e>
	{
		while(tx1_counter == TX1_BUFFER_SIZE);
     ec0:	00 00       	nop
     ec2:	80 91 42 01 	lds	r24, 0x0142
     ec6:	80 34       	cpi	r24, 0x40	; 64
     ec8:	e1 f3       	breq	.-8      	; 0xec2 <UART1_Write+0x2a>

		cli();
     eca:	f8 94       	cli

		if(tx1_counter || (UCSR1A & 0x20) == 0)
     ecc:	80 91 42 01 	lds	r24, 0x0142
     ed0:	88 23       	and	r24, r24
     ed2:	51 f4       	brne	.+20     	; 0xee8 <UART1_Write+0x50>
     ed4:	88 ec       	ldi	r24, 0xC8	; 200
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	fc 01       	movw	r30, r24
     eda:	80 81       	ld	r24, Z
     edc:	88 2f       	mov	r24, r24
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	80 72       	andi	r24, 0x20	; 32
     ee2:	99 27       	eor	r25, r25
     ee4:	89 2b       	or	r24, r25
     ee6:	c1 f4       	brne	.+48     	; 0xf18 <UART1_Write+0x80>
		{
			tx1_buffer[tx1_wr_index] = data;
     ee8:	80 91 41 01 	lds	r24, 0x0141
     eec:	88 2f       	mov	r24, r24
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	8f 5f       	subi	r24, 0xFF	; 255
     ef2:	9e 4f       	sbci	r25, 0xFE	; 254
     ef4:	29 81       	ldd	r18, Y+1	; 0x01
     ef6:	fc 01       	movw	r30, r24
     ef8:	20 83       	st	Z, r18

			if(++tx1_wr_index == TX1_BUFFER_SIZE)
     efa:	80 91 41 01 	lds	r24, 0x0141
     efe:	8f 5f       	subi	r24, 0xFF	; 255
     f00:	80 93 41 01 	sts	0x0141, r24
     f04:	80 34       	cpi	r24, 0x40	; 64
     f06:	11 f4       	brne	.+4      	; 0xf0c <UART1_Write+0x74>
				tx1_wr_index = 0;
     f08:	10 92 41 01 	sts	0x0141, r1

			tx1_counter++;
     f0c:	80 91 42 01 	lds	r24, 0x0142
     f10:	8f 5f       	subi	r24, 0xFF	; 255
     f12:	80 93 42 01 	sts	0x0142, r24
     f16:	05 c0       	rjmp	.+10     	; 0xf22 <UART1_Write+0x8a>
		}
		else
			UDR1 = data;
     f18:	8e ec       	ldi	r24, 0xCE	; 206
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	29 81       	ldd	r18, Y+1	; 0x01
     f1e:	fc 01       	movw	r30, r24
     f20:	20 83       	st	Z, r18

		sei();
     f22:	78 94       	sei
     f24:	03 c0       	rjmp	.+6      	; 0xf2c <UART1_Write+0x94>
	}
	else
		altUart1Write(data);
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	0e 94 32 07 	call	0xe64	; 0xe64 <altUart1Write>
}
     f2c:	0f 90       	pop	r0
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	08 95       	ret

00000f34 <UART1_Read>:

unsigned char UART1_Read(void)
{
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	1f 92       	push	r1
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR1B >> RXCIE1) & 0x01)
     f3e:	89 ec       	ldi	r24, 0xC9	; 201
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	fc 01       	movw	r30, r24
     f44:	80 81       	ld	r24, Z
     f46:	88 1f       	adc	r24, r24
     f48:	88 27       	eor	r24, r24
     f4a:	88 1f       	adc	r24, r24
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	81 70       	andi	r24, 0x01	; 1
     f52:	99 27       	eor	r25, r25
     f54:	89 2b       	or	r24, r25
     f56:	e9 f0       	breq	.+58     	; 0xf92 <UART1_Read+0x5e>
	{
		while(rx1_counter == 0);
     f58:	00 00       	nop
     f5a:	80 91 85 01 	lds	r24, 0x0185
     f5e:	88 23       	and	r24, r24
     f60:	e1 f3       	breq	.-8      	; 0xf5a <UART1_Read+0x26>

		data = rx1_buffer[rx1_rd_index];
     f62:	80 91 86 01 	lds	r24, 0x0186
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	8c 5b       	subi	r24, 0xBC	; 188
     f6c:	9e 4f       	sbci	r25, 0xFE	; 254
     f6e:	fc 01       	movw	r30, r24
     f70:	80 81       	ld	r24, Z
     f72:	89 83       	std	Y+1, r24	; 0x01

		if(++rx1_rd_index == RX1_BUFFER_SIZE)
     f74:	80 91 86 01 	lds	r24, 0x0186
     f78:	8f 5f       	subi	r24, 0xFF	; 255
     f7a:	80 93 86 01 	sts	0x0186, r24
     f7e:	80 34       	cpi	r24, 0x40	; 64
     f80:	11 f4       	brne	.+4      	; 0xf86 <UART1_Read+0x52>
			rx1_rd_index = 0;
     f82:	10 92 86 01 	sts	0x0186, r1

		rx1_counter--;
     f86:	80 91 85 01 	lds	r24, 0x0185
     f8a:	81 50       	subi	r24, 0x01	; 1
     f8c:	80 93 85 01 	sts	0x0185, r24
     f90:	13 c0       	rjmp	.+38     	; 0xfb8 <UART1_Read+0x84>
	}
	else
	{
		while( !((UCSR1A >> RXC1) & 0x01));
     f92:	00 00       	nop
     f94:	88 ec       	ldi	r24, 0xC8	; 200
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	fc 01       	movw	r30, r24
     f9a:	80 81       	ld	r24, Z
     f9c:	88 1f       	adc	r24, r24
     f9e:	88 27       	eor	r24, r24
     fa0:	88 1f       	adc	r24, r24
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	99 27       	eor	r25, r25
     faa:	89 2b       	or	r24, r25
     fac:	99 f3       	breq	.-26     	; 0xf94 <UART1_Read+0x60>
		data = UDR1;
     fae:	8e ec       	ldi	r24, 0xCE	; 206
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	fc 01       	movw	r30, r24
     fb4:	80 81       	ld	r24, Z
     fb6:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
}
     fba:	0f 90       	pop	r0
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <__divmodsi4>:
     fc2:	05 2e       	mov	r0, r21
     fc4:	97 fb       	bst	r25, 7
     fc6:	1e f4       	brtc	.+6      	; 0xfce <__divmodsi4+0xc>
     fc8:	00 94       	com	r0
     fca:	0e 94 f8 07 	call	0xff0	; 0xff0 <__negsi2>
     fce:	57 fd       	sbrc	r21, 7
     fd0:	07 d0       	rcall	.+14     	; 0xfe0 <__divmodsi4_neg2>
     fd2:	0e 94 0b 08 	call	0x1016	; 0x1016 <__udivmodsi4>
     fd6:	07 fc       	sbrc	r0, 7
     fd8:	03 d0       	rcall	.+6      	; 0xfe0 <__divmodsi4_neg2>
     fda:	4e f4       	brtc	.+18     	; 0xfee <__divmodsi4_exit>
     fdc:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__negsi2>

00000fe0 <__divmodsi4_neg2>:
     fe0:	50 95       	com	r21
     fe2:	40 95       	com	r20
     fe4:	30 95       	com	r19
     fe6:	21 95       	neg	r18
     fe8:	3f 4f       	sbci	r19, 0xFF	; 255
     fea:	4f 4f       	sbci	r20, 0xFF	; 255
     fec:	5f 4f       	sbci	r21, 0xFF	; 255

00000fee <__divmodsi4_exit>:
     fee:	08 95       	ret

00000ff0 <__negsi2>:
     ff0:	90 95       	com	r25
     ff2:	80 95       	com	r24
     ff4:	70 95       	com	r23
     ff6:	61 95       	neg	r22
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	8f 4f       	sbci	r24, 0xFF	; 255
     ffc:	9f 4f       	sbci	r25, 0xFF	; 255
     ffe:	08 95       	ret

00001000 <__muluhisi3>:
    1000:	0e 94 2d 08 	call	0x105a	; 0x105a <__umulhisi3>
    1004:	a5 9f       	mul	r26, r21
    1006:	90 0d       	add	r25, r0
    1008:	b4 9f       	mul	r27, r20
    100a:	90 0d       	add	r25, r0
    100c:	a4 9f       	mul	r26, r20
    100e:	80 0d       	add	r24, r0
    1010:	91 1d       	adc	r25, r1
    1012:	11 24       	eor	r1, r1
    1014:	08 95       	ret

00001016 <__udivmodsi4>:
    1016:	a1 e2       	ldi	r26, 0x21	; 33
    1018:	1a 2e       	mov	r1, r26
    101a:	aa 1b       	sub	r26, r26
    101c:	bb 1b       	sub	r27, r27
    101e:	fd 01       	movw	r30, r26
    1020:	0d c0       	rjmp	.+26     	; 0x103c <__udivmodsi4_ep>

00001022 <__udivmodsi4_loop>:
    1022:	aa 1f       	adc	r26, r26
    1024:	bb 1f       	adc	r27, r27
    1026:	ee 1f       	adc	r30, r30
    1028:	ff 1f       	adc	r31, r31
    102a:	a2 17       	cp	r26, r18
    102c:	b3 07       	cpc	r27, r19
    102e:	e4 07       	cpc	r30, r20
    1030:	f5 07       	cpc	r31, r21
    1032:	20 f0       	brcs	.+8      	; 0x103c <__udivmodsi4_ep>
    1034:	a2 1b       	sub	r26, r18
    1036:	b3 0b       	sbc	r27, r19
    1038:	e4 0b       	sbc	r30, r20
    103a:	f5 0b       	sbc	r31, r21

0000103c <__udivmodsi4_ep>:
    103c:	66 1f       	adc	r22, r22
    103e:	77 1f       	adc	r23, r23
    1040:	88 1f       	adc	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	1a 94       	dec	r1
    1046:	69 f7       	brne	.-38     	; 0x1022 <__udivmodsi4_loop>
    1048:	60 95       	com	r22
    104a:	70 95       	com	r23
    104c:	80 95       	com	r24
    104e:	90 95       	com	r25
    1050:	9b 01       	movw	r18, r22
    1052:	ac 01       	movw	r20, r24
    1054:	bd 01       	movw	r22, r26
    1056:	cf 01       	movw	r24, r30
    1058:	08 95       	ret

0000105a <__umulhisi3>:
    105a:	a2 9f       	mul	r26, r18
    105c:	b0 01       	movw	r22, r0
    105e:	b3 9f       	mul	r27, r19
    1060:	c0 01       	movw	r24, r0
    1062:	a3 9f       	mul	r26, r19
    1064:	70 0d       	add	r23, r0
    1066:	81 1d       	adc	r24, r1
    1068:	11 24       	eor	r1, r1
    106a:	91 1d       	adc	r25, r1
    106c:	b2 9f       	mul	r27, r18
    106e:	70 0d       	add	r23, r0
    1070:	81 1d       	adc	r24, r1
    1072:	11 24       	eor	r1, r1
    1074:	91 1d       	adc	r25, r1
    1076:	08 95       	ret

00001078 <__subsf3>:
    1078:	50 58       	subi	r21, 0x80	; 128

0000107a <__addsf3>:
    107a:	bb 27       	eor	r27, r27
    107c:	aa 27       	eor	r26, r26
    107e:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__addsf3x>
    1082:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__fp_round>
    1086:	0e 94 b9 09 	call	0x1372	; 0x1372 <__fp_pscA>
    108a:	38 f0       	brcs	.+14     	; 0x109a <__addsf3+0x20>
    108c:	0e 94 c0 09 	call	0x1380	; 0x1380 <__fp_pscB>
    1090:	20 f0       	brcs	.+8      	; 0x109a <__addsf3+0x20>
    1092:	39 f4       	brne	.+14     	; 0x10a2 <__addsf3+0x28>
    1094:	9f 3f       	cpi	r25, 0xFF	; 255
    1096:	19 f4       	brne	.+6      	; 0x109e <__addsf3+0x24>
    1098:	26 f4       	brtc	.+8      	; 0x10a2 <__addsf3+0x28>
    109a:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_nan>
    109e:	0e f4       	brtc	.+2      	; 0x10a2 <__addsf3+0x28>
    10a0:	e0 95       	com	r30
    10a2:	e7 fb       	bst	r30, 7
    10a4:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__fp_inf>

000010a8 <__addsf3x>:
    10a8:	e9 2f       	mov	r30, r25
    10aa:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__fp_split3>
    10ae:	58 f3       	brcs	.-42     	; 0x1086 <__addsf3+0xc>
    10b0:	ba 17       	cp	r27, r26
    10b2:	62 07       	cpc	r22, r18
    10b4:	73 07       	cpc	r23, r19
    10b6:	84 07       	cpc	r24, r20
    10b8:	95 07       	cpc	r25, r21
    10ba:	20 f0       	brcs	.+8      	; 0x10c4 <__addsf3x+0x1c>
    10bc:	79 f4       	brne	.+30     	; 0x10dc <__addsf3x+0x34>
    10be:	a6 f5       	brtc	.+104    	; 0x1128 <__stack+0x29>
    10c0:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_zero>
    10c4:	0e f4       	brtc	.+2      	; 0x10c8 <__addsf3x+0x20>
    10c6:	e0 95       	com	r30
    10c8:	0b 2e       	mov	r0, r27
    10ca:	ba 2f       	mov	r27, r26
    10cc:	a0 2d       	mov	r26, r0
    10ce:	0b 01       	movw	r0, r22
    10d0:	b9 01       	movw	r22, r18
    10d2:	90 01       	movw	r18, r0
    10d4:	0c 01       	movw	r0, r24
    10d6:	ca 01       	movw	r24, r20
    10d8:	a0 01       	movw	r20, r0
    10da:	11 24       	eor	r1, r1
    10dc:	ff 27       	eor	r31, r31
    10de:	59 1b       	sub	r21, r25
    10e0:	99 f0       	breq	.+38     	; 0x1108 <__stack+0x9>
    10e2:	59 3f       	cpi	r21, 0xF9	; 249
    10e4:	50 f4       	brcc	.+20     	; 0x10fa <__addsf3x+0x52>
    10e6:	50 3e       	cpi	r21, 0xE0	; 224
    10e8:	68 f1       	brcs	.+90     	; 0x1144 <__stack+0x45>
    10ea:	1a 16       	cp	r1, r26
    10ec:	f0 40       	sbci	r31, 0x00	; 0
    10ee:	a2 2f       	mov	r26, r18
    10f0:	23 2f       	mov	r18, r19
    10f2:	34 2f       	mov	r19, r20
    10f4:	44 27       	eor	r20, r20
    10f6:	58 5f       	subi	r21, 0xF8	; 248
    10f8:	f3 cf       	rjmp	.-26     	; 0x10e0 <__addsf3x+0x38>
    10fa:	46 95       	lsr	r20
    10fc:	37 95       	ror	r19
    10fe:	27 95       	ror	r18
    1100:	a7 95       	ror	r26
    1102:	f0 40       	sbci	r31, 0x00	; 0
    1104:	53 95       	inc	r21
    1106:	c9 f7       	brne	.-14     	; 0x10fa <__addsf3x+0x52>
    1108:	7e f4       	brtc	.+30     	; 0x1128 <__stack+0x29>
    110a:	1f 16       	cp	r1, r31
    110c:	ba 0b       	sbc	r27, r26
    110e:	62 0b       	sbc	r22, r18
    1110:	73 0b       	sbc	r23, r19
    1112:	84 0b       	sbc	r24, r20
    1114:	ba f0       	brmi	.+46     	; 0x1144 <__stack+0x45>
    1116:	91 50       	subi	r25, 0x01	; 1
    1118:	a1 f0       	breq	.+40     	; 0x1142 <__stack+0x43>
    111a:	ff 0f       	add	r31, r31
    111c:	bb 1f       	adc	r27, r27
    111e:	66 1f       	adc	r22, r22
    1120:	77 1f       	adc	r23, r23
    1122:	88 1f       	adc	r24, r24
    1124:	c2 f7       	brpl	.-16     	; 0x1116 <__stack+0x17>
    1126:	0e c0       	rjmp	.+28     	; 0x1144 <__stack+0x45>
    1128:	ba 0f       	add	r27, r26
    112a:	62 1f       	adc	r22, r18
    112c:	73 1f       	adc	r23, r19
    112e:	84 1f       	adc	r24, r20
    1130:	48 f4       	brcc	.+18     	; 0x1144 <__stack+0x45>
    1132:	87 95       	ror	r24
    1134:	77 95       	ror	r23
    1136:	67 95       	ror	r22
    1138:	b7 95       	ror	r27
    113a:	f7 95       	ror	r31
    113c:	9e 3f       	cpi	r25, 0xFE	; 254
    113e:	08 f0       	brcs	.+2      	; 0x1142 <__stack+0x43>
    1140:	b0 cf       	rjmp	.-160    	; 0x10a2 <__addsf3+0x28>
    1142:	93 95       	inc	r25
    1144:	88 0f       	add	r24, r24
    1146:	08 f0       	brcs	.+2      	; 0x114a <__stack+0x4b>
    1148:	99 27       	eor	r25, r25
    114a:	ee 0f       	add	r30, r30
    114c:	97 95       	ror	r25
    114e:	87 95       	ror	r24
    1150:	08 95       	ret

00001152 <__cmpsf2>:
    1152:	0e 94 8c 09 	call	0x1318	; 0x1318 <__fp_cmp>
    1156:	08 f4       	brcc	.+2      	; 0x115a <__cmpsf2+0x8>
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	08 95       	ret

0000115c <__divsf3>:
    115c:	0e 94 c2 08 	call	0x1184	; 0x1184 <__divsf3x>
    1160:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__fp_round>
    1164:	0e 94 c0 09 	call	0x1380	; 0x1380 <__fp_pscB>
    1168:	58 f0       	brcs	.+22     	; 0x1180 <__divsf3+0x24>
    116a:	0e 94 b9 09 	call	0x1372	; 0x1372 <__fp_pscA>
    116e:	40 f0       	brcs	.+16     	; 0x1180 <__divsf3+0x24>
    1170:	29 f4       	brne	.+10     	; 0x117c <__divsf3+0x20>
    1172:	5f 3f       	cpi	r21, 0xFF	; 255
    1174:	29 f0       	breq	.+10     	; 0x1180 <__divsf3+0x24>
    1176:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__fp_inf>
    117a:	51 11       	cpse	r21, r1
    117c:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__fp_szero>
    1180:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_nan>

00001184 <__divsf3x>:
    1184:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__fp_split3>
    1188:	68 f3       	brcs	.-38     	; 0x1164 <__divsf3+0x8>

0000118a <__divsf3_pse>:
    118a:	99 23       	and	r25, r25
    118c:	b1 f3       	breq	.-20     	; 0x117a <__divsf3+0x1e>
    118e:	55 23       	and	r21, r21
    1190:	91 f3       	breq	.-28     	; 0x1176 <__divsf3+0x1a>
    1192:	95 1b       	sub	r25, r21
    1194:	55 0b       	sbc	r21, r21
    1196:	bb 27       	eor	r27, r27
    1198:	aa 27       	eor	r26, r26
    119a:	62 17       	cp	r22, r18
    119c:	73 07       	cpc	r23, r19
    119e:	84 07       	cpc	r24, r20
    11a0:	38 f0       	brcs	.+14     	; 0x11b0 <__divsf3_pse+0x26>
    11a2:	9f 5f       	subi	r25, 0xFF	; 255
    11a4:	5f 4f       	sbci	r21, 0xFF	; 255
    11a6:	22 0f       	add	r18, r18
    11a8:	33 1f       	adc	r19, r19
    11aa:	44 1f       	adc	r20, r20
    11ac:	aa 1f       	adc	r26, r26
    11ae:	a9 f3       	breq	.-22     	; 0x119a <__divsf3_pse+0x10>
    11b0:	35 d0       	rcall	.+106    	; 0x121c <__divsf3_pse+0x92>
    11b2:	0e 2e       	mov	r0, r30
    11b4:	3a f0       	brmi	.+14     	; 0x11c4 <__divsf3_pse+0x3a>
    11b6:	e0 e8       	ldi	r30, 0x80	; 128
    11b8:	32 d0       	rcall	.+100    	; 0x121e <__divsf3_pse+0x94>
    11ba:	91 50       	subi	r25, 0x01	; 1
    11bc:	50 40       	sbci	r21, 0x00	; 0
    11be:	e6 95       	lsr	r30
    11c0:	00 1c       	adc	r0, r0
    11c2:	ca f7       	brpl	.-14     	; 0x11b6 <__divsf3_pse+0x2c>
    11c4:	2b d0       	rcall	.+86     	; 0x121c <__divsf3_pse+0x92>
    11c6:	fe 2f       	mov	r31, r30
    11c8:	29 d0       	rcall	.+82     	; 0x121c <__divsf3_pse+0x92>
    11ca:	66 0f       	add	r22, r22
    11cc:	77 1f       	adc	r23, r23
    11ce:	88 1f       	adc	r24, r24
    11d0:	bb 1f       	adc	r27, r27
    11d2:	26 17       	cp	r18, r22
    11d4:	37 07       	cpc	r19, r23
    11d6:	48 07       	cpc	r20, r24
    11d8:	ab 07       	cpc	r26, r27
    11da:	b0 e8       	ldi	r27, 0x80	; 128
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <__divsf3_pse+0x56>
    11de:	bb 0b       	sbc	r27, r27
    11e0:	80 2d       	mov	r24, r0
    11e2:	bf 01       	movw	r22, r30
    11e4:	ff 27       	eor	r31, r31
    11e6:	93 58       	subi	r25, 0x83	; 131
    11e8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ea:	3a f0       	brmi	.+14     	; 0x11fa <__divsf3_pse+0x70>
    11ec:	9e 3f       	cpi	r25, 0xFE	; 254
    11ee:	51 05       	cpc	r21, r1
    11f0:	78 f0       	brcs	.+30     	; 0x1210 <__divsf3_pse+0x86>
    11f2:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__fp_inf>
    11f6:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__fp_szero>
    11fa:	5f 3f       	cpi	r21, 0xFF	; 255
    11fc:	e4 f3       	brlt	.-8      	; 0x11f6 <__divsf3_pse+0x6c>
    11fe:	98 3e       	cpi	r25, 0xE8	; 232
    1200:	d4 f3       	brlt	.-12     	; 0x11f6 <__divsf3_pse+0x6c>
    1202:	86 95       	lsr	r24
    1204:	77 95       	ror	r23
    1206:	67 95       	ror	r22
    1208:	b7 95       	ror	r27
    120a:	f7 95       	ror	r31
    120c:	9f 5f       	subi	r25, 0xFF	; 255
    120e:	c9 f7       	brne	.-14     	; 0x1202 <__divsf3_pse+0x78>
    1210:	88 0f       	add	r24, r24
    1212:	91 1d       	adc	r25, r1
    1214:	96 95       	lsr	r25
    1216:	87 95       	ror	r24
    1218:	97 f9       	bld	r25, 7
    121a:	08 95       	ret
    121c:	e1 e0       	ldi	r30, 0x01	; 1
    121e:	66 0f       	add	r22, r22
    1220:	77 1f       	adc	r23, r23
    1222:	88 1f       	adc	r24, r24
    1224:	bb 1f       	adc	r27, r27
    1226:	62 17       	cp	r22, r18
    1228:	73 07       	cpc	r23, r19
    122a:	84 07       	cpc	r24, r20
    122c:	ba 07       	cpc	r27, r26
    122e:	20 f0       	brcs	.+8      	; 0x1238 <__divsf3_pse+0xae>
    1230:	62 1b       	sub	r22, r18
    1232:	73 0b       	sbc	r23, r19
    1234:	84 0b       	sbc	r24, r20
    1236:	ba 0b       	sbc	r27, r26
    1238:	ee 1f       	adc	r30, r30
    123a:	88 f7       	brcc	.-30     	; 0x121e <__divsf3_pse+0x94>
    123c:	e0 95       	com	r30
    123e:	08 95       	ret

00001240 <__fixunssfsi>:
    1240:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__fp_splitA>
    1244:	88 f0       	brcs	.+34     	; 0x1268 <__fixunssfsi+0x28>
    1246:	9f 57       	subi	r25, 0x7F	; 127
    1248:	98 f0       	brcs	.+38     	; 0x1270 <__fixunssfsi+0x30>
    124a:	b9 2f       	mov	r27, r25
    124c:	99 27       	eor	r25, r25
    124e:	b7 51       	subi	r27, 0x17	; 23
    1250:	b0 f0       	brcs	.+44     	; 0x127e <__fixunssfsi+0x3e>
    1252:	e1 f0       	breq	.+56     	; 0x128c <__fixunssfsi+0x4c>
    1254:	66 0f       	add	r22, r22
    1256:	77 1f       	adc	r23, r23
    1258:	88 1f       	adc	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	1a f0       	brmi	.+6      	; 0x1264 <__fixunssfsi+0x24>
    125e:	ba 95       	dec	r27
    1260:	c9 f7       	brne	.-14     	; 0x1254 <__fixunssfsi+0x14>
    1262:	14 c0       	rjmp	.+40     	; 0x128c <__fixunssfsi+0x4c>
    1264:	b1 30       	cpi	r27, 0x01	; 1
    1266:	91 f0       	breq	.+36     	; 0x128c <__fixunssfsi+0x4c>
    1268:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__fp_zero>
    126c:	b1 e0       	ldi	r27, 0x01	; 1
    126e:	08 95       	ret
    1270:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_zero>
    1274:	67 2f       	mov	r22, r23
    1276:	78 2f       	mov	r23, r24
    1278:	88 27       	eor	r24, r24
    127a:	b8 5f       	subi	r27, 0xF8	; 248
    127c:	39 f0       	breq	.+14     	; 0x128c <__fixunssfsi+0x4c>
    127e:	b9 3f       	cpi	r27, 0xF9	; 249
    1280:	cc f3       	brlt	.-14     	; 0x1274 <__fixunssfsi+0x34>
    1282:	86 95       	lsr	r24
    1284:	77 95       	ror	r23
    1286:	67 95       	ror	r22
    1288:	b3 95       	inc	r27
    128a:	d9 f7       	brne	.-10     	; 0x1282 <__fixunssfsi+0x42>
    128c:	3e f4       	brtc	.+14     	; 0x129c <__fixunssfsi+0x5c>
    128e:	90 95       	com	r25
    1290:	80 95       	com	r24
    1292:	70 95       	com	r23
    1294:	61 95       	neg	r22
    1296:	7f 4f       	sbci	r23, 0xFF	; 255
    1298:	8f 4f       	sbci	r24, 0xFF	; 255
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	08 95       	ret

0000129e <__floatunsisf>:
    129e:	e8 94       	clt
    12a0:	09 c0       	rjmp	.+18     	; 0x12b4 <__floatsisf+0x12>

000012a2 <__floatsisf>:
    12a2:	97 fb       	bst	r25, 7
    12a4:	3e f4       	brtc	.+14     	; 0x12b4 <__floatsisf+0x12>
    12a6:	90 95       	com	r25
    12a8:	80 95       	com	r24
    12aa:	70 95       	com	r23
    12ac:	61 95       	neg	r22
    12ae:	7f 4f       	sbci	r23, 0xFF	; 255
    12b0:	8f 4f       	sbci	r24, 0xFF	; 255
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	99 23       	and	r25, r25
    12b6:	a9 f0       	breq	.+42     	; 0x12e2 <__floatsisf+0x40>
    12b8:	f9 2f       	mov	r31, r25
    12ba:	96 e9       	ldi	r25, 0x96	; 150
    12bc:	bb 27       	eor	r27, r27
    12be:	93 95       	inc	r25
    12c0:	f6 95       	lsr	r31
    12c2:	87 95       	ror	r24
    12c4:	77 95       	ror	r23
    12c6:	67 95       	ror	r22
    12c8:	b7 95       	ror	r27
    12ca:	f1 11       	cpse	r31, r1
    12cc:	f8 cf       	rjmp	.-16     	; 0x12be <__floatsisf+0x1c>
    12ce:	fa f4       	brpl	.+62     	; 0x130e <__floatsisf+0x6c>
    12d0:	bb 0f       	add	r27, r27
    12d2:	11 f4       	brne	.+4      	; 0x12d8 <__floatsisf+0x36>
    12d4:	60 ff       	sbrs	r22, 0
    12d6:	1b c0       	rjmp	.+54     	; 0x130e <__floatsisf+0x6c>
    12d8:	6f 5f       	subi	r22, 0xFF	; 255
    12da:	7f 4f       	sbci	r23, 0xFF	; 255
    12dc:	8f 4f       	sbci	r24, 0xFF	; 255
    12de:	9f 4f       	sbci	r25, 0xFF	; 255
    12e0:	16 c0       	rjmp	.+44     	; 0x130e <__floatsisf+0x6c>
    12e2:	88 23       	and	r24, r24
    12e4:	11 f0       	breq	.+4      	; 0x12ea <__floatsisf+0x48>
    12e6:	96 e9       	ldi	r25, 0x96	; 150
    12e8:	11 c0       	rjmp	.+34     	; 0x130c <__floatsisf+0x6a>
    12ea:	77 23       	and	r23, r23
    12ec:	21 f0       	breq	.+8      	; 0x12f6 <__floatsisf+0x54>
    12ee:	9e e8       	ldi	r25, 0x8E	; 142
    12f0:	87 2f       	mov	r24, r23
    12f2:	76 2f       	mov	r23, r22
    12f4:	05 c0       	rjmp	.+10     	; 0x1300 <__floatsisf+0x5e>
    12f6:	66 23       	and	r22, r22
    12f8:	71 f0       	breq	.+28     	; 0x1316 <__floatsisf+0x74>
    12fa:	96 e8       	ldi	r25, 0x86	; 134
    12fc:	86 2f       	mov	r24, r22
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	2a f0       	brmi	.+10     	; 0x130e <__floatsisf+0x6c>
    1304:	9a 95       	dec	r25
    1306:	66 0f       	add	r22, r22
    1308:	77 1f       	adc	r23, r23
    130a:	88 1f       	adc	r24, r24
    130c:	da f7       	brpl	.-10     	; 0x1304 <__floatsisf+0x62>
    130e:	88 0f       	add	r24, r24
    1310:	96 95       	lsr	r25
    1312:	87 95       	ror	r24
    1314:	97 f9       	bld	r25, 7
    1316:	08 95       	ret

00001318 <__fp_cmp>:
    1318:	99 0f       	add	r25, r25
    131a:	00 08       	sbc	r0, r0
    131c:	55 0f       	add	r21, r21
    131e:	aa 0b       	sbc	r26, r26
    1320:	e0 e8       	ldi	r30, 0x80	; 128
    1322:	fe ef       	ldi	r31, 0xFE	; 254
    1324:	16 16       	cp	r1, r22
    1326:	17 06       	cpc	r1, r23
    1328:	e8 07       	cpc	r30, r24
    132a:	f9 07       	cpc	r31, r25
    132c:	c0 f0       	brcs	.+48     	; 0x135e <__fp_cmp+0x46>
    132e:	12 16       	cp	r1, r18
    1330:	13 06       	cpc	r1, r19
    1332:	e4 07       	cpc	r30, r20
    1334:	f5 07       	cpc	r31, r21
    1336:	98 f0       	brcs	.+38     	; 0x135e <__fp_cmp+0x46>
    1338:	62 1b       	sub	r22, r18
    133a:	73 0b       	sbc	r23, r19
    133c:	84 0b       	sbc	r24, r20
    133e:	95 0b       	sbc	r25, r21
    1340:	39 f4       	brne	.+14     	; 0x1350 <__fp_cmp+0x38>
    1342:	0a 26       	eor	r0, r26
    1344:	61 f0       	breq	.+24     	; 0x135e <__fp_cmp+0x46>
    1346:	23 2b       	or	r18, r19
    1348:	24 2b       	or	r18, r20
    134a:	25 2b       	or	r18, r21
    134c:	21 f4       	brne	.+8      	; 0x1356 <__fp_cmp+0x3e>
    134e:	08 95       	ret
    1350:	0a 26       	eor	r0, r26
    1352:	09 f4       	brne	.+2      	; 0x1356 <__fp_cmp+0x3e>
    1354:	a1 40       	sbci	r26, 0x01	; 1
    1356:	a6 95       	lsr	r26
    1358:	8f ef       	ldi	r24, 0xFF	; 255
    135a:	81 1d       	adc	r24, r1
    135c:	81 1d       	adc	r24, r1
    135e:	08 95       	ret

00001360 <__fp_inf>:
    1360:	97 f9       	bld	r25, 7
    1362:	9f 67       	ori	r25, 0x7F	; 127
    1364:	80 e8       	ldi	r24, 0x80	; 128
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	08 95       	ret

0000136c <__fp_nan>:
    136c:	9f ef       	ldi	r25, 0xFF	; 255
    136e:	80 ec       	ldi	r24, 0xC0	; 192
    1370:	08 95       	ret

00001372 <__fp_pscA>:
    1372:	00 24       	eor	r0, r0
    1374:	0a 94       	dec	r0
    1376:	16 16       	cp	r1, r22
    1378:	17 06       	cpc	r1, r23
    137a:	18 06       	cpc	r1, r24
    137c:	09 06       	cpc	r0, r25
    137e:	08 95       	ret

00001380 <__fp_pscB>:
    1380:	00 24       	eor	r0, r0
    1382:	0a 94       	dec	r0
    1384:	12 16       	cp	r1, r18
    1386:	13 06       	cpc	r1, r19
    1388:	14 06       	cpc	r1, r20
    138a:	05 06       	cpc	r0, r21
    138c:	08 95       	ret

0000138e <__fp_round>:
    138e:	09 2e       	mov	r0, r25
    1390:	03 94       	inc	r0
    1392:	00 0c       	add	r0, r0
    1394:	11 f4       	brne	.+4      	; 0x139a <__fp_round+0xc>
    1396:	88 23       	and	r24, r24
    1398:	52 f0       	brmi	.+20     	; 0x13ae <__fp_round+0x20>
    139a:	bb 0f       	add	r27, r27
    139c:	40 f4       	brcc	.+16     	; 0x13ae <__fp_round+0x20>
    139e:	bf 2b       	or	r27, r31
    13a0:	11 f4       	brne	.+4      	; 0x13a6 <__fp_round+0x18>
    13a2:	60 ff       	sbrs	r22, 0
    13a4:	04 c0       	rjmp	.+8      	; 0x13ae <__fp_round+0x20>
    13a6:	6f 5f       	subi	r22, 0xFF	; 255
    13a8:	7f 4f       	sbci	r23, 0xFF	; 255
    13aa:	8f 4f       	sbci	r24, 0xFF	; 255
    13ac:	9f 4f       	sbci	r25, 0xFF	; 255
    13ae:	08 95       	ret

000013b0 <__fp_split3>:
    13b0:	57 fd       	sbrc	r21, 7
    13b2:	90 58       	subi	r25, 0x80	; 128
    13b4:	44 0f       	add	r20, r20
    13b6:	55 1f       	adc	r21, r21
    13b8:	59 f0       	breq	.+22     	; 0x13d0 <__fp_splitA+0x10>
    13ba:	5f 3f       	cpi	r21, 0xFF	; 255
    13bc:	71 f0       	breq	.+28     	; 0x13da <__fp_splitA+0x1a>
    13be:	47 95       	ror	r20

000013c0 <__fp_splitA>:
    13c0:	88 0f       	add	r24, r24
    13c2:	97 fb       	bst	r25, 7
    13c4:	99 1f       	adc	r25, r25
    13c6:	61 f0       	breq	.+24     	; 0x13e0 <__fp_splitA+0x20>
    13c8:	9f 3f       	cpi	r25, 0xFF	; 255
    13ca:	79 f0       	breq	.+30     	; 0x13ea <__fp_splitA+0x2a>
    13cc:	87 95       	ror	r24
    13ce:	08 95       	ret
    13d0:	12 16       	cp	r1, r18
    13d2:	13 06       	cpc	r1, r19
    13d4:	14 06       	cpc	r1, r20
    13d6:	55 1f       	adc	r21, r21
    13d8:	f2 cf       	rjmp	.-28     	; 0x13be <__fp_split3+0xe>
    13da:	46 95       	lsr	r20
    13dc:	f1 df       	rcall	.-30     	; 0x13c0 <__fp_splitA>
    13de:	08 c0       	rjmp	.+16     	; 0x13f0 <__fp_splitA+0x30>
    13e0:	16 16       	cp	r1, r22
    13e2:	17 06       	cpc	r1, r23
    13e4:	18 06       	cpc	r1, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	f1 cf       	rjmp	.-30     	; 0x13cc <__fp_splitA+0xc>
    13ea:	86 95       	lsr	r24
    13ec:	71 05       	cpc	r23, r1
    13ee:	61 05       	cpc	r22, r1
    13f0:	08 94       	sec
    13f2:	08 95       	ret

000013f4 <__fp_zero>:
    13f4:	e8 94       	clt

000013f6 <__fp_szero>:
    13f6:	bb 27       	eor	r27, r27
    13f8:	66 27       	eor	r22, r22
    13fa:	77 27       	eor	r23, r23
    13fc:	cb 01       	movw	r24, r22
    13fe:	97 f9       	bld	r25, 7
    1400:	08 95       	ret

00001402 <__gesf2>:
    1402:	0e 94 8c 09 	call	0x1318	; 0x1318 <__fp_cmp>
    1406:	08 f4       	brcc	.+2      	; 0x140a <__gesf2+0x8>
    1408:	8f ef       	ldi	r24, 0xFF	; 255
    140a:	08 95       	ret

0000140c <__mulsf3>:
    140c:	0e 94 19 0a 	call	0x1432	; 0x1432 <__mulsf3x>
    1410:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__fp_round>
    1414:	0e 94 b9 09 	call	0x1372	; 0x1372 <__fp_pscA>
    1418:	38 f0       	brcs	.+14     	; 0x1428 <__mulsf3+0x1c>
    141a:	0e 94 c0 09 	call	0x1380	; 0x1380 <__fp_pscB>
    141e:	20 f0       	brcs	.+8      	; 0x1428 <__mulsf3+0x1c>
    1420:	95 23       	and	r25, r21
    1422:	11 f0       	breq	.+4      	; 0x1428 <__mulsf3+0x1c>
    1424:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__fp_inf>
    1428:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_nan>
    142c:	11 24       	eor	r1, r1
    142e:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__fp_szero>

00001432 <__mulsf3x>:
    1432:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__fp_split3>
    1436:	70 f3       	brcs	.-36     	; 0x1414 <__mulsf3+0x8>

00001438 <__mulsf3_pse>:
    1438:	95 9f       	mul	r25, r21
    143a:	c1 f3       	breq	.-16     	; 0x142c <__mulsf3+0x20>
    143c:	95 0f       	add	r25, r21
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	55 1f       	adc	r21, r21
    1442:	62 9f       	mul	r22, r18
    1444:	f0 01       	movw	r30, r0
    1446:	72 9f       	mul	r23, r18
    1448:	bb 27       	eor	r27, r27
    144a:	f0 0d       	add	r31, r0
    144c:	b1 1d       	adc	r27, r1
    144e:	63 9f       	mul	r22, r19
    1450:	aa 27       	eor	r26, r26
    1452:	f0 0d       	add	r31, r0
    1454:	b1 1d       	adc	r27, r1
    1456:	aa 1f       	adc	r26, r26
    1458:	64 9f       	mul	r22, r20
    145a:	66 27       	eor	r22, r22
    145c:	b0 0d       	add	r27, r0
    145e:	a1 1d       	adc	r26, r1
    1460:	66 1f       	adc	r22, r22
    1462:	82 9f       	mul	r24, r18
    1464:	22 27       	eor	r18, r18
    1466:	b0 0d       	add	r27, r0
    1468:	a1 1d       	adc	r26, r1
    146a:	62 1f       	adc	r22, r18
    146c:	73 9f       	mul	r23, r19
    146e:	b0 0d       	add	r27, r0
    1470:	a1 1d       	adc	r26, r1
    1472:	62 1f       	adc	r22, r18
    1474:	83 9f       	mul	r24, r19
    1476:	a0 0d       	add	r26, r0
    1478:	61 1d       	adc	r22, r1
    147a:	22 1f       	adc	r18, r18
    147c:	74 9f       	mul	r23, r20
    147e:	33 27       	eor	r19, r19
    1480:	a0 0d       	add	r26, r0
    1482:	61 1d       	adc	r22, r1
    1484:	23 1f       	adc	r18, r19
    1486:	84 9f       	mul	r24, r20
    1488:	60 0d       	add	r22, r0
    148a:	21 1d       	adc	r18, r1
    148c:	82 2f       	mov	r24, r18
    148e:	76 2f       	mov	r23, r22
    1490:	6a 2f       	mov	r22, r26
    1492:	11 24       	eor	r1, r1
    1494:	9f 57       	subi	r25, 0x7F	; 127
    1496:	50 40       	sbci	r21, 0x00	; 0
    1498:	9a f0       	brmi	.+38     	; 0x14c0 <__mulsf3_pse+0x88>
    149a:	f1 f0       	breq	.+60     	; 0x14d8 <__mulsf3_pse+0xa0>
    149c:	88 23       	and	r24, r24
    149e:	4a f0       	brmi	.+18     	; 0x14b2 <__mulsf3_pse+0x7a>
    14a0:	ee 0f       	add	r30, r30
    14a2:	ff 1f       	adc	r31, r31
    14a4:	bb 1f       	adc	r27, r27
    14a6:	66 1f       	adc	r22, r22
    14a8:	77 1f       	adc	r23, r23
    14aa:	88 1f       	adc	r24, r24
    14ac:	91 50       	subi	r25, 0x01	; 1
    14ae:	50 40       	sbci	r21, 0x00	; 0
    14b0:	a9 f7       	brne	.-22     	; 0x149c <__mulsf3_pse+0x64>
    14b2:	9e 3f       	cpi	r25, 0xFE	; 254
    14b4:	51 05       	cpc	r21, r1
    14b6:	80 f0       	brcs	.+32     	; 0x14d8 <__mulsf3_pse+0xa0>
    14b8:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__fp_inf>
    14bc:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__fp_szero>
    14c0:	5f 3f       	cpi	r21, 0xFF	; 255
    14c2:	e4 f3       	brlt	.-8      	; 0x14bc <__mulsf3_pse+0x84>
    14c4:	98 3e       	cpi	r25, 0xE8	; 232
    14c6:	d4 f3       	brlt	.-12     	; 0x14bc <__mulsf3_pse+0x84>
    14c8:	86 95       	lsr	r24
    14ca:	77 95       	ror	r23
    14cc:	67 95       	ror	r22
    14ce:	b7 95       	ror	r27
    14d0:	f7 95       	ror	r31
    14d2:	e7 95       	ror	r30
    14d4:	9f 5f       	subi	r25, 0xFF	; 255
    14d6:	c1 f7       	brne	.-16     	; 0x14c8 <__mulsf3_pse+0x90>
    14d8:	fe 2b       	or	r31, r30
    14da:	88 0f       	add	r24, r24
    14dc:	91 1d       	adc	r25, r1
    14de:	96 95       	lsr	r25
    14e0:	87 95       	ror	r24
    14e2:	97 f9       	bld	r25, 7
    14e4:	08 95       	ret

000014e6 <_exit>:
    14e6:	f8 94       	cli

000014e8 <__stop_program>:
    14e8:	ff cf       	rjmp	.-2      	; 0x14e8 <__stop_program>
